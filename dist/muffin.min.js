/**
 * Bundle of muffin
 * Generated: 2022-05-05
 * Version: 0.6.0
 * FootLoose Labs (footloose.io)
 *
 *
 * Dependencies:
 *
 * localforage -- 1.10.0
 */

(function () {
	'use strict';

	// window.LOGGING_LEVEL = "NODEBUG";
	let DefaultConfig = {
	  "LOGGING_LEVEL": "IMP",
	  "POST_OFFICE_WORKER_URL": "muffin_po_worker.js",
	  "INTROSPECT": false,
	  "DB_NAME": 'element_footloose_labs_db',
	  "DB_VERSION": "0.1",
	  "DEBUG_SCOPE": {}
	};

	if (self.MUFFIN_CONFIG) {
	  DefaultConfig = { ...DefaultConfig,
	    ...self.MUFFIN_CONFIG
	  };
	}

	class Logger {}

	Object.defineProperty(Logger, "styles", {
	  enumerable: true,
	  writable: true,
	  value: {
	    "imp": "font-weight: bold; color: #1B2B34;",
	    "debug": "font-weight: bold; color: #EC5f67;",
	    "info": "font-weight: bold; color: #F99157;",
	    "warn": "font-weight: bold; color: #FAC863;",
	    "error": "font-weight: bold; color: #99C794;"
	  }
	});

	Logger.start = () => {
	  Logger.__log = console.log;

	  console.log = function () {
	    if (DefaultConfig.LOGGING_LEVEL == "NONE") {
	      return;
	    }

	    if (arguments[0] === "imp:") {
	      var argumentsArr = Array.prototype.slice.call(arguments);
	      var msgArr = argumentsArr.slice(1, argumentsArr.length);

	      Logger.__log.apply(this, msgArr);
	    }

	    if (DefaultConfig.LOGGING_LEVEL !== "DEBUG") {
	      return;
	    }

	    Logger.__log.apply(this, arguments);
	  };
	};

	// for generating random lexeme fixtures (useful during testing)
	// const RandExp = require('randexp');
	// import * as RandExp from "randexp";
	const TYPES = {
	  email: `[a-z0-9._+-]{1,20}@[a-z0-9]{3,15}\.[a-z]{2,4}`,
	  name: `^*[A-Z][a-z]{3,8}$ *[A-Z][a-z]{1,10}$`,
	  age: `^(1[89]|[2-9]\d)$`,
	  str: `^[a-zA-Z0-9]{16}$`,
	  uid: `^[a-fA-F0-9]{24}$`
	};
	const Generator = {};

	Generator.randomUid = () => {
	  return new RandExp(TYPES.uid, "i").gen().trim();
	};

	Generator.randomEmail = () => {
	  return new RandExp(TYPES.email, i);
	}; // Generator.randomNumericalRange = (rangeSpan) => {
	// 	let age = new RandExp(TYPES.age);
	// 	let rangeSpan = rangeSpan || 5;
	// 	return `${age}-{age+rangeSpan}`
	// }


	Generator.randomVal = _type => {//_type = String[min_length,max_length, regex], Email, Integer[min,max], Decimal[min,max], Object[(key,keyType)], List[min_indexes,max_indexes,fillType => ]
	};

	class Lexeme {
	  constructor(info) {
	    this.info = { ...this.constructor.schema,
	      ...info
	    };
	  }

	  static inflection(info) {
	    //can be extended in child classes inheriting from this parent; *inflection function must return boolean value;
	    // console.log("lexeme: default inflection");
	    if (typeof info == "string") {
	      return JSON.parse(info);
	    }

	    return info;
	  }

	  static inflect(info) {
	    // console.log("inflecting Lexeme - ", info);
	    var inflection = false;

	    try {
	      var inflection = this.inflection(info); // console.log("inflection = ", inflection);
	    } catch (e) {
	      console.log("imp:", " Error: lexeme inflection failed - ", e);
	      return;
	    }

	    if (!inflection) {
	      console.log("imp:", " INFO: lexeme inflection function returned false.");
	      return;
	    }

	    return new this(inflection); //if inflection is not false
	  }

	  get() {
	    return this.info;
	  }

	  hasKey(keyString) {

	    var keyList = keyString.split(".");

	    if (keyList.length == 1) {
	      return key in this.info;
	    }

	    var _info = this.info;
	    var keyIdx = 0;
	    var result = true; //need to figure out a proper way for this initial value to be false (currently insecure)

	    while (keyIdx < keyList.length) {
	      var _keyToTest = keyList[keyIdx];

	      if (_keyToTest in _info) {
	        _info = _info[_keyToTest];
	        i += 1;
	        continue;
	      }

	      result = false;
	      break;
	    }

	    return result;
	  }

	  hasKeys() {
	    var _this = this;

	    var result = true; //need to figure out a proper way for this initial value to be false (currently insecure)

	    Array.from(arguments).forEach(key => {
	      if (!_this.hasKey(key)) {
	        valid = false;
	      }
	    });
	    return result;
	  }

	  update(info) {
	    this.info = { ...this.info,
	      ...info
	    };
	    return this;
	  }

	  getPayload() {
	    return this.info;
	  }

	  stringify() {
	    return JSON.stringify(this.info);
	  }

	  getValue(keyString) {
	    var keyList = keyString.split(".");
	    var val = this;

	    for (var i = 0; i < keyList.length; i++) {
	      val = val[keyList[i]];
	    }

	    return val;
	  }

	  isString(keyString) {
	    if (!this.hasKey(keyString)) {
	      return false;
	    }

	    if (typeof this.getValue(keyString) == "string") {
	      return true;
	    }

	    return false;
	  }

	  isNumber(keyString) {
	    if (!this.hasKey(keyString)) {
	      return false;
	    }

	    if (typeof this.getValue(keyString) == "number") {
	      return true;
	    }

	    return false;
	  }

	  isObject(keyString) {
	    if (!this.hasKey(keyString)) {
	      return false;
	    }

	    if (typeof this.getValue(keyString) == "objectcd") {
	      return true;
	    }

	    return false;
	  }

	}

	Object.defineProperty(Lexeme, "name", {
	  enumerable: true,
	  writable: true,
	  value: ""
	});
	Object.defineProperty(Lexeme, "schema", {
	  enumerable: true,
	  writable: true,
	  value: {}
	});
	Lexeme.Generator = Generator;

	function randomString(_length) {
	  var text = "";

	  var _length = _length || 5;

	  var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

	  for (var i = 0; i < _length; i++) {
	    text += possible.charAt(Math.floor(Math.random() * possible.length));
	  }

	  return text;
	}

	function stringToHTMLFrag(strHTML) {
	  //output diff from stringToDocFrag: that always returns the full html page structure (with head & body)
	  var temp = document.createElement('template');
	  temp.innerHTML = strHTML;
	  return temp.content;
	}

	function stringToDocFrag(html_string) {
	  //can be removed eventually if stringToHTMLFrag works for all cases
	  var dom = null;

	  if (window.DOMParser) {
	    try {
	      dom = new DOMParser().parseFromString(html_string, "text/html");
	    } catch (e) {
	      dom = null;
	    }
	  } else if (window.ActiveXObject) {
	    try {
	      dom = new ActiveXObject('Microsoft.XMLDOM');
	      dom.async = false;
	      if (!dom.loadXML(html_string)) // parse error ..
	        window.alert(dom.parseError.reason);
	    } catch (e) {
	      dom = null;
	    }
	  } else alert("cannot parse xml string!");

	  return dom;
	}

	class DataChannel extends HTMLElement {
	  constructor() {
	    super();
	    this.uid = this.uid || randomString(8);

	    this._composeAncesstry();
	  }

	  connectedCallback() {
	    console.log("imp:", "constructing data-channel = ", this.attributes);
	    this.label = this.attributes.label.value;
	    this.socket = this.attributes.socket.value;
	    this._cmp = this.previousElementSibling;

	    this._cmp.constructedFrom.__initDataSrcInterface(this.label, this.socket);
	  }

	  _composeAncesstry() {
	    DOMComponentRegistry.update(this);
	    console.log("composed ancesstry ", this.domElName, ", ", this.uid);
	  }

	} // DataChannel.composeSelf = function(){
	// 	DOMComponentRegistry.register(this.prototype.constructor);
	// }


	Object.defineProperty(DataChannel, "domElName", {
	  enumerable: true,
	  writable: true,
	  value: "data-channel"
	});

	var _class;

	class PostOffice extends Object {
	  // constructor() {
	  // 	this.registry = [];
	  // }
	  // static defaultScope = PostOffice.addSocket(EventTarget,"global");
	  static addSocket(_constructor, name, _url, options) {
	    PostOffice.sockets[name] = new PostOffice.Socket(_constructor, name, _url, options);
	    return PostOffice.sockets[name];
	  }

	  static createInterface(name, specs, override) {
	    if (PostOffice.sockets[name] && !override) {
	      let err = `Error: Interface with name = ${name} already exists.`;
	      throw Error(err);
	    }

	    PostOffice.sockets[name] = new PostOffice.Socket(EventTarget, name);

	    if (specs) {
	      PostOffice.sockets[name].addInterfaceSpec(specs);
	    }

	    return PostOffice.sockets[name];
	  }

	  static getOrCreateInterface(name, specs) {
	    if (PostOffice.sockets[name]) {
	      return PostOffice.sockets[name];
	    }

	    PostOffice.sockets[name] = new PostOffice.Socket(EventTarget, name);

	    if (specs) {
	      PostOffice.sockets[name].addInterfaceSpec(specs);
	    }

	    return PostOffice.sockets[name];
	  }

	  static publishToInterface(targetInterfaceAddr, msg) {
	    var [interfaceSocketName, interfaceOpLabel] = targetInterfaceAddr.split(":::");
	    console.debug("publishToInterface - ", interfaceSocketName, interfaceOpLabel, msg);
	    let targetSocket = PostOffice.sockets[interfaceSocketName];

	    if (!targetSocket) {
	      let err = `Error: No such interface - ${interfaceSocketName}`;
	      throw Error(err);
	    }

	    targetSocket.publish(interfaceOpLabel, msg);
	  }

	  static _getRegistry() {
	    return PostOffice.registry;
	  }

	  static _addToRegistry(_broker) {
	    PostOffice.registry.push(_broker);
	  }

	  static _delFromRegistry(_broker) {}

	  static getDefaultScope() {
	    return PostOffice.defaultScope;
	  }

	  static _getBroker(label, scope) {
	    var scope = scope || PostOffice.getDefaultScope();
	    return PostOffice._getRegistry().filter(_broker => {
	      return _broker.label == label && _broker.scope == scope;
	    })[0];
	  }

	  static _createBroker(label, _cb, scope) {
	    var scope = scope || PostOffice.getDefaultScope();

	    var _broker = new PostOffice.Broker(label, _cb, scope);

	    return _broker;
	  }

	  static _createOrUpdateBroker(label, _cb, scope) {
	    var _broker = PostOffice._getBroker(label, scope);

	    if (_broker) {
	      _broker.addCallback(_cb);
	    } else {
	      PostOffice._addToRegistry(PostOffice._createBroker(label, _cb, scope));
	    }
	  } // static registerBroker(label,_cb,scope){  //legacy code - comments kept for referece in case anything breaks
	  // 	if(!label){return;}
	  // 	var scope = scope || PostOffice.getDefaultScope();
	  // 	PostOffice._createOrUpdateBroker(label, _cb, scope);
	  // }


	  static addGlobalListener(_label, _cb) {
	    //new version - refer to older version in case of fallacies
	    return PostOffice.sockets.global.addListener(_label, _cb);
	  } // static addListener(label,_cb,scope){
	  // 	if(!label){return;}
	  // 	var scope = scope || PostOffice.getDefaultScope();
	  // 	PostOffice._createOrUpdateBroker(label, _cb, scope);
	  // }


	  static _runBroker(label, msg, _scope) {
	    var _broker = PostOffice._getBroker(label, _scope);

	    if (!_broker) {
	      console.log("no broker registered for - ", label);
	      return;
	    }

	    _broker.execute(msg);
	  }

	  static broadcastMsg(label, msg, _scope) {
	    if (!label) {
	      return;
	    }

	    var _scope = _scope || PostOffice.getDefaultScope();

	    var evnt = new CustomEvent(label, {
	      detail: msg
	    });

	    _scope.dispatchEvent(evnt);

	    PostOffice._runBroker(label, msg, _scope);
	  }

	}

	PostOffice.sockets = {};
	PostOffice.registry = [];
	PostOffice.Socket = class PostOfficeSocket {
	  constructor(_constructor, name, url, options) {
	    var options = options || {};
	    this.constructedFrom = _constructor || WebSocket;
	    this.name = name;
	    this.url = url;
	    this.socket = new this.constructedFrom(url);
	    this.defaultScope = new EventTarget();
	    this.listeners = [];
	    this.autoRetryOnClose = options.autoRetryOnClose || true;
	    this.autoRetryInterval = options.autoRetryInterval || 5;
	    this.autoInitLexiconSubscriptions = options.autoInitLexiconSubscriptions || true;

	    this.__init__();
	  }

	  _initLexiconSubscriptions() {
	    // console.debug("PostOffice ---- _initLexiconSubscriptions : start ----------------", this.INTERFACE_SPEC);
	    if (this.INTERFACE_SPEC) {
	      // console.debug("PostOffice ---- _initLexiconSubscriptions : initialising LEXICON Subscriptions ----------------");
	      for (var key in this.INTERFACE_SPEC) {
	        if (this.INTERFACE_SPEC[key]) {
	          if (this.INTERFACE_SPEC[key].schema && this.INTERFACE_SPEC[key].schema.subscribe) {
	            // let _inflection = LEXICON.RORStateSubscriptionRequest.inflect({});
	            // console.debug("-- SEnding MSg", _inflection.get())
	            console.debug(`PostOffice:::_initLexiconSubscriptions publishing ${key}`);
	            this.publish(`${key}`, {});
	          }
	        } else {
	          console.warn(`PostOffice:::${this.name}: _initLexiconSubscriptions Key - ${key} in Spec has undefined value. (No lexeme associated with the key).`);
	        }
	      }
	    }
	  }

	  __init__() {
	    var _this = this; // PostOffice.sockets[name] = new WebSocket(_url);
	    // PostOffice.sockets[name].proxy = {};
	    // this.socket.


	    if (this.socket instanceof WebSocket) {
	      this._keepAlive();
	    }

	    this.socket.addEventListener("message", msgEv => {
	      _this._handleSocketMsgEv.call(_this, msgEv);
	    });
	    this.socket.addEventListener("close", ev => {
	      _this._handleSocketCloseEv.call(_this, ev);
	    });
	    this.socket.addEventListener("open", ev => {
	      _this._handleSocketOpenEv.call(_this, ev);
	    });
	    this.socket.addEventListener("error", ev => {
	      _this._handleSocketErrorEv.call(_this, ev);
	    }); // if(this.autoInitLexiconSubscriptions){
	    // 	this._initLexiconSubscriptions();
	    // }

	    this.on = this.addListener;
	  }

	  _keepAlive() {
	    var _this = this;

	    clearInterval(this.connectionKeepAlive);
	    this.connectionKeepAlive = setInterval(() => {
	      if (_this.keepAlive != true) {
	        return;
	      }

	      _this.send("ping");
	    }, 59000);
	  }

	  onmessage(socketMsgEv) {
	    //custom onmessage functions can be provided by the developer.
	    var _msgStr = socketMsgEv.data;

	    if (_msgStr == "pong") {
	      return;
	    } //ping-pong messages exchanged in keepAlive


	    var ev = null;

	    try {
	      var _msg = JSON.parse(_msgStr);

	      ev = new CustomEvent(_msg.label, {
	        detail: _msg
	      });
	    } catch (e) {
	      //not valid msg
	      var _msg = {
	        error: e,
	        label: `${this.name}-message-error`
	      };
	      ev = new CustomEvent(_msg.label, {
	        detail: _msg
	      });
	    }

	    return ev; //must return an event object
	  }

	  _handleSocketErrorEv(ev) {
	    this.dispatchMessage(ev.type, ev);
	    console.error(`PostOffice.Socket:::${this.name} errored`);
	  }

	  _handleSocketOpenEv(ev) {
	    this.dispatchMessage(ev.type, ev);
	    console.debug(`PostOffice.Socket:::${this.name} opened - `, ev);
	  }

	  _handleSocketCloseEv(ev) {
	    this.dispatchMessage(ev.type, ev);
	    console.debug(`PostOffice.Socket:::${this.name} closed`);

	    if (this.autoRetryOnClose == true) {
	      console.debug(`PostOffice.Socket:::${this.name} retrying connection in ${this.autoRetryInterval}s`);
	      setTimeout(() => {
	        console.debug(`PostOffice.Socket:::${this.name} attempting to connect again`);
	        this.socket = new this.constructedFrom(this.url);

	        this.__init__();
	      }, this.autoRetryInterval * 1000);
	      return;
	    }
	  }

	  _handleSocketMsgEv(socketMsgEv) {
	    console.debug(`Socket:::${this.name} (incoming) received msg = `, socketMsgEv);
	    var msgEv = this.onmessage(socketMsgEv);
	    console.debug(`Socket:::${this.name} (processed msgEv) = `, msgEv);

	    if (msgEv) {
	      this.dispatchEvent(msgEv);
	    }
	  }

	  send(msg) {
	    this.socket.send(msg);
	  }

	  sendMsg({
	    lexemeName,
	    msg
	  }) {
	    return new Promise((resolve, reject) => {
	      console.debug(`DEBUG: ${this.name}:`, "sending message = ", lexemeName, msg);
	      var lexeme = this.LEXICON[lexemeName];

	      if (!lexeme) {
	        let err = `Error: No such lexeme --> ${lexemeName}`;
	        reject({
	          error: err
	        });
	        return;
	      }

	      try {
	        var inflection = lexeme.inflect(msg);

	        if (!inflection) {
	          let err = `Error: Invalid msg form for ${lexemeName} --> ${inflection}`;
	          console.error(err);
	          reject({
	            error: err
	          });
	          return;
	        }
	      } catch (e) {
	        console.error("Error:", "error inflecting msg lexeme: ", e);
	        reject({
	          error: e
	        });
	        return;
	      }

	      console.debug(`DEBUG: ${this.name}: `, "Inflected Form = ", inflection.stringify());
	      let payloadJsonStr = inflection.stringify(); // payloadJsonStr = payloadJsonStr.replace(/\\n/g, '');

	      this.socket.send(payloadJsonStr);
	      console.debug(`DEBUG: ${this.name}:`, "message sent = ", payloadJsonStr);
	      resolve({
	        error: null
	      });
	    });
	  }

	  addInterfaceSpec(interfaceSpec) {
	    // for(var k in lexiconMap) {
	    // 	lexiconMap[k]	
	    // }
	    this.INTERFACE_SPEC = interfaceSpec;

	    if (this.autoInitLexiconSubscriptions) {
	      // console.debug("PostOffice ---- _initLexiconSubscriptions __start___ - ", this.INTERFACE_SPEC);
	      this._initLexiconSubscriptions();
	    }
	  }

	  publish(_label, _msg) {
	    console.debug(`DEBUG: PostOffice.Socket:::${this.name} Inflecting ${JSON.stringify(_msg)}`);
	    var lexeme = this.INTERFACE_SPEC[_label];

	    if (!lexeme) {
	      let err = `Error: No such lexeme --> ${_label}`;
	      throw Error(err);
	      return;
	    }

	    try {
	      var inflection = lexeme.inflect(_msg);

	      if (!inflection) {
	        let err = `Error: Invalid msg form for ${_label} --> ${inflection}`;
	        console.error(err);
	        throw Error(err);
	        return;
	      }
	    } catch (e) {
	      console.error("Error:", "error inflecting msg lexeme: ", e);
	      throw Error(e);
	      return;
	    }

	    console.debug(`DEBUG: PostOffice.Socket:::${this.name}:::${_label} Publishing ${inflection.stringify()}`);

	    let ev = this._msgToEv(_label, inflection.get());

	    this.defaultScope.dispatchEvent(ev);
	  }

	  _msgToEv(_label, _msg, lexemeName) {

	    if (lexemeName) {
	      let lexeme = this.LEXICON[lexemeName];

	      if (!lexeme) {
	        let err = `Error: invalid lexeme provided --> ${lexemeName}`;
	        throw Error(err);
	      }

	      var inflection;

	      try {
	        inflection = lexeme.inflect(_msg);

	        if (!inflection) {
	          let err = `Error: Invalid msg form for ${lexemeName} --> ${inflection}`;
	          console.error(err);
	          throw Error(err);
	        }
	      } catch (e) {
	        console.error("Error:", "error inflecting msg lexeme: ", e);
	        throw Error(e);
	      }

	      _msg = inflection.get();
	    }

	    return new CustomEvent(_label, {
	      detail: _msg
	    });
	  }

	  dispatchMessage(label, msg, lexemeName) {
	    let ev = this._msgToEv(label, msg, lexemeName);

	    this.dispatchEvent(ev);
	  }

	  broadcastMsg(label, msg, _scope) {
	    if (!label) {
	      return;
	    }

	    var evnt = new CustomEvent(label, {
	      detail: msg
	    });
	    this.dispatchEvent(evnt);
	  }

	  dispatchEvent(msgEv, _scope) {
	    //for forward compat
	    var _scope = _scope || this.defaultScope;

	    this.defaultScope.dispatchEvent(msgEv);
	    console.log("imp:", "PostOfficeSocket: ", this.name, " - dispatched event = ", msgEv.type, ", with payload = ", msgEv.detail);
	  }

	  addListener(label, cb) {
	    return new Promise((resolve, reject) => {
	      var _cb = ev => {
	        try {
	          var result = cb(ev.detail);
	          resolve(result);
	        } catch (e) {
	          reject(e);
	        }
	      };

	      this.defaultScope.addEventListener(label, _cb);
	      this.listeners.push({
	        label: label,
	        cb: cb
	      });
	    }); // this.defaultScope.addEventListener(label,cb);
	    // this.listeners.push({label:label,cb:cb});
	  }

	};
	PostOffice.Broker = class PostOfficeBroker {
	  constructor(_label, _cb, _scope) {
	    this.label = _label;
	    this.scope = _scope;
	    this.callbacks = [];
	    this.addCallback(_cb);
	  }

	  _getScope() {
	    return document.querySelector(this.scope) || PostOffice.getDefaultScope();
	  }

	  addCallback(_cb) {

	    this.callbacks.push(_cb); // (this._getScope()).addEventListener(_this.label, _this.execute);
	  }

	  execute(msg) {
	    this.callbacks.forEach((_cb, idx) => {
	      console.log("PostOffice.Broker executing callback - ", idx);

	      try {
	        //to prevent an error causing cb block execution of other cbs
	        _cb(msg);
	      } catch (e) {
	        console.log("PostOffice.Broker error executing callback - ", idx);
	        return;
	      }

	      console.log("PostOffice.Broker successfully executed callback - ", idx);
	    });
	  }

	};
	PostOffice.Message = (_class = class PostOfficeMessage {
	  constructor(msg) {
	    this.msg = { ...this.constructor.schema,
	      ...msg
	    };
	  }

	  hasKey(key) {

	    var keyList = key.split(".");

	    if (keyList.length == 1) {
	      return key in this.msg;
	    }

	    var _msg = this.msg;
	    var keyIdx = 0;
	    var result = true; //need to figure out a proper way for this initial value to be false (currently insecure)

	    while (keyIdx < keyList.length) {
	      var _keyToTest = keyList[keyIdx];

	      if (_keyToTest in _msg) {
	        _msg = _msg[_keyToTest];
	        i += 1;
	        continue;
	      }

	      result = false;
	      break;
	    }

	    return result;
	  }

	  hasKeys() {
	    var _this = this;

	    var result = true; //need to figure out a proper way for this initial value to be false (currently insecure)

	    Array.from(arguments).forEach(key => {
	      if (!_this.hasKey(key)) {
	        valid = false;
	      }
	    });
	    return result;
	  }

	  update(msg) {
	    this.msg = { ...this.msg,
	      ...msg
	    };
	    return this;
	  }

	  stringify() {
	    return JSON.stringify(this.msg);
	  }

	}, Object.defineProperty(_class, "schema", {
	  enumerable: true,
	  writable: true,
	  value: {}
	}), _class);
	PostOffice.defaultScope = PostOffice.addSocket(EventTarget, "global");

	PostOffice.sockets.global.onmessage = ev => {
	  return ev;
	};

	class DOMComponentRegistry$1 {
	  static brokerLabel() {
	    return "NewComponentRegistry";
	  }

	  static start() {
	    if (DOMComponentRegistry$1.started) {
	      console.log("DOMComponentRegistry already started");
	      return;
	    }

	    PostOffice.addGlobalListener(DOMComponentRegistry$1.brokerLabel(), ev => {
	      console.log("registering new component - ", ev.detail); // customElements.define(e.detail.name, e.detail._constructor);
	    }); // console.log("imp:", "REGISTERED BROKER === ", DOMComponentRegistry.brokerLabel);

	    DOMComponentRegistry$1.started = true;
	  }

	  static add(webComp) {
	    // customElements.define(webComp.domElName, webComp);
	    DOMComponentRegistry$1.components.push({
	      name: webComp.domElName,
	      error: webComp.error,
	      instances: []
	    });
	    PostOffice.broadcastMsg(DOMComponentRegistry$1.brokerLabel(), {
	      name: webComp.domElName
	    }, document);
	  }

	  static list() {
	    return this.components;
	  }

	  static findInstance(uid) {
	    var parent = null;
	    var entry = DOMComponentRegistry$1.list().find(_entry => {
	      parent = _entry.instances.find(_instance => {
	        return _instance.uid == uid;
	      });
	      return parent;
	    });
	    return parent;
	  }

	  static find(domElName) {
	    return DOMComponentRegistry$1.list().find(_entry => {
	      return _entry.name == domElName;
	    });
	  }

	  static register(webComp) {
	    if (typeof webComp.domElName == "function") {
	      var webCompDomName = webComp.domElName();
	    } else {
	      var webCompDomName = webComp.domElName;
	    }

	    try {
	      customElements.define(webCompDomName, webComp);
	    } catch (e) {
	      webComp.error = e;
	      console.log("imp:", e);
	    }

	    DOMComponentRegistry$1.add(webComp); // if(webComp.register){
	    // 	webComp.register();
	    // }
	  }

	  static async update(instance) {
	    var _entry = DOMComponentRegistry$1.find(instance.domElName);

	    if (!_entry) {
	      //wait for 1 second. //for root components registry might not be available immediately during load.
	      _entry = await new Promise((resolve, reject) => {
	        setTimeout(() => {
	          return resolve(DOMComponentRegistry$1.find.call(this, instance.domElName));
	        }, 1000);
	        setTimeout(() => {
	          return reject(null);
	        }, 1500);
	      });
	    }

	    if (_entry) {
	      _entry.instances.push(instance);
	    }
	  }

	}

	DOMComponentRegistry$1.components = [];

	/*!
	    localForage -- Offline Storage, Improved
	    Version 1.10.0
	    https://localforage.github.io/localForage
	    (c) 2013-2017 Mozilla, Apache License 2.0
	*/
	(function (f) {
	  if (typeof exports === "object" && typeof module !== "undefined") {
	    module.exports = f();
	  } else if (typeof define === "function" && define.amd) {
	    define([], f);
	  } else {
	    var g;

	    if (typeof window !== "undefined") {
	      g = window;
	    } else if (typeof global !== "undefined") {
	      g = global;
	    } else if (typeof self !== "undefined") {
	      g = self;
	    } else {
	      g = this;
	    }

	    g.localforage = f();
	  }
	})(function () {
	  return function e(t, n, r) {
	    function s(o, u) {
	      if (!n[o]) {
	        if (!t[o]) {
	          var a = typeof require == "function" && require;
	          if (!u && a) return a(o, !0);
	          if (i) return i(o, !0);
	          var f = new Error("Cannot find module '" + o + "'");
	          throw f.code = "MODULE_NOT_FOUND", f;
	        }

	        var l = n[o] = {
	          exports: {}
	        };
	        t[o][0].call(l.exports, function (e) {
	          var n = t[o][1][e];
	          return s(n ? n : e);
	        }, l, l.exports, e, t, n, r);
	      }

	      return n[o].exports;
	    }

	    var i = typeof require == "function" && require;

	    for (var o = 0; o < r.length; o++) s(r[o]);

	    return s;
	  }({
	    1: [function (_dereq_, module, exports) {
	      (function (global) {

	        var Mutation = global.MutationObserver || global.WebKitMutationObserver;
	        var scheduleDrain;
	        {
	          if (Mutation) {
	            var called = 0;
	            var observer = new Mutation(nextTick);
	            var element = global.document.createTextNode('');
	            observer.observe(element, {
	              characterData: true
	            });

	            scheduleDrain = function () {
	              element.data = called = ++called % 2;
	            };
	          } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {
	            var channel = new global.MessageChannel();
	            channel.port1.onmessage = nextTick;

	            scheduleDrain = function () {
	              channel.port2.postMessage(0);
	            };
	          } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {
	            scheduleDrain = function () {
	              // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	              // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	              var scriptEl = global.document.createElement('script');

	              scriptEl.onreadystatechange = function () {
	                nextTick();
	                scriptEl.onreadystatechange = null;
	                scriptEl.parentNode.removeChild(scriptEl);
	                scriptEl = null;
	              };

	              global.document.documentElement.appendChild(scriptEl);
	            };
	          } else {
	            scheduleDrain = function () {
	              setTimeout(nextTick, 0);
	            };
	          }
	        }
	        var draining;
	        var queue = []; //named nextTick for less confusing stack traces

	        function nextTick() {
	          draining = true;
	          var i, oldQueue;
	          var len = queue.length;

	          while (len) {
	            oldQueue = queue;
	            queue = [];
	            i = -1;

	            while (++i < len) {
	              oldQueue[i]();
	            }

	            len = queue.length;
	          }

	          draining = false;
	        }

	        module.exports = immediate;

	        function immediate(task) {
	          if (queue.push(task) === 1 && !draining) {
	            scheduleDrain();
	          }
	        }
	      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
	    }, {}],
	    2: [function (_dereq_, module, exports) {

	      var immediate = _dereq_(1);
	      /* istanbul ignore next */


	      function INTERNAL() {}

	      var handlers = {};
	      var REJECTED = ['REJECTED'];
	      var FULFILLED = ['FULFILLED'];
	      var PENDING = ['PENDING'];
	      module.exports = Promise;

	      function Promise(resolver) {
	        if (typeof resolver !== 'function') {
	          throw new TypeError('resolver must be a function');
	        }

	        this.state = PENDING;
	        this.queue = [];
	        this.outcome = void 0;

	        if (resolver !== INTERNAL) {
	          safelyResolveThenable(this, resolver);
	        }
	      }

	      Promise.prototype["catch"] = function (onRejected) {
	        return this.then(null, onRejected);
	      };

	      Promise.prototype.then = function (onFulfilled, onRejected) {
	        if (typeof onFulfilled !== 'function' && this.state === FULFILLED || typeof onRejected !== 'function' && this.state === REJECTED) {
	          return this;
	        }

	        var promise = new this.constructor(INTERNAL);

	        if (this.state !== PENDING) {
	          var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
	          unwrap(promise, resolver, this.outcome);
	        } else {
	          this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
	        }

	        return promise;
	      };

	      function QueueItem(promise, onFulfilled, onRejected) {
	        this.promise = promise;

	        if (typeof onFulfilled === 'function') {
	          this.onFulfilled = onFulfilled;
	          this.callFulfilled = this.otherCallFulfilled;
	        }

	        if (typeof onRejected === 'function') {
	          this.onRejected = onRejected;
	          this.callRejected = this.otherCallRejected;
	        }
	      }

	      QueueItem.prototype.callFulfilled = function (value) {
	        handlers.resolve(this.promise, value);
	      };

	      QueueItem.prototype.otherCallFulfilled = function (value) {
	        unwrap(this.promise, this.onFulfilled, value);
	      };

	      QueueItem.prototype.callRejected = function (value) {
	        handlers.reject(this.promise, value);
	      };

	      QueueItem.prototype.otherCallRejected = function (value) {
	        unwrap(this.promise, this.onRejected, value);
	      };

	      function unwrap(promise, func, value) {
	        immediate(function () {
	          var returnValue;

	          try {
	            returnValue = func(value);
	          } catch (e) {
	            return handlers.reject(promise, e);
	          }

	          if (returnValue === promise) {
	            handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));
	          } else {
	            handlers.resolve(promise, returnValue);
	          }
	        });
	      }

	      handlers.resolve = function (self, value) {
	        var result = tryCatch(getThen, value);

	        if (result.status === 'error') {
	          return handlers.reject(self, result.value);
	        }

	        var thenable = result.value;

	        if (thenable) {
	          safelyResolveThenable(self, thenable);
	        } else {
	          self.state = FULFILLED;
	          self.outcome = value;
	          var i = -1;
	          var len = self.queue.length;

	          while (++i < len) {
	            self.queue[i].callFulfilled(value);
	          }
	        }

	        return self;
	      };

	      handlers.reject = function (self, error) {
	        self.state = REJECTED;
	        self.outcome = error;
	        var i = -1;
	        var len = self.queue.length;

	        while (++i < len) {
	          self.queue[i].callRejected(error);
	        }

	        return self;
	      };

	      function getThen(obj) {
	        // Make sure we only access the accessor once as required by the spec
	        var then = obj && obj.then;

	        if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {
	          return function appyThen() {
	            then.apply(obj, arguments);
	          };
	        }
	      }

	      function safelyResolveThenable(self, thenable) {
	        // Either fulfill, reject or reject with error
	        var called = false;

	        function onError(value) {
	          if (called) {
	            return;
	          }

	          called = true;
	          handlers.reject(self, value);
	        }

	        function onSuccess(value) {
	          if (called) {
	            return;
	          }

	          called = true;
	          handlers.resolve(self, value);
	        }

	        function tryToUnwrap() {
	          thenable(onSuccess, onError);
	        }

	        var result = tryCatch(tryToUnwrap);

	        if (result.status === 'error') {
	          onError(result.value);
	        }
	      }

	      function tryCatch(func, value) {
	        var out = {};

	        try {
	          out.value = func(value);
	          out.status = 'success';
	        } catch (e) {
	          out.status = 'error';
	          out.value = e;
	        }

	        return out;
	      }

	      Promise.resolve = resolve;

	      function resolve(value) {
	        if (value instanceof this) {
	          return value;
	        }

	        return handlers.resolve(new this(INTERNAL), value);
	      }

	      Promise.reject = reject;

	      function reject(reason) {
	        var promise = new this(INTERNAL);
	        return handlers.reject(promise, reason);
	      }

	      Promise.all = all;

	      function all(iterable) {
	        var self = this;

	        if (Object.prototype.toString.call(iterable) !== '[object Array]') {
	          return this.reject(new TypeError('must be an array'));
	        }

	        var len = iterable.length;
	        var called = false;

	        if (!len) {
	          return this.resolve([]);
	        }

	        var values = new Array(len);
	        var resolved = 0;
	        var i = -1;
	        var promise = new this(INTERNAL);

	        while (++i < len) {
	          allResolver(iterable[i], i);
	        }

	        return promise;

	        function allResolver(value, i) {
	          self.resolve(value).then(resolveFromAll, function (error) {
	            if (!called) {
	              called = true;
	              handlers.reject(promise, error);
	            }
	          });

	          function resolveFromAll(outValue) {
	            values[i] = outValue;

	            if (++resolved === len && !called) {
	              called = true;
	              handlers.resolve(promise, values);
	            }
	          }
	        }
	      }

	      Promise.race = race;

	      function race(iterable) {
	        var self = this;

	        if (Object.prototype.toString.call(iterable) !== '[object Array]') {
	          return this.reject(new TypeError('must be an array'));
	        }

	        var len = iterable.length;
	        var called = false;

	        if (!len) {
	          return this.resolve([]);
	        }

	        var i = -1;
	        var promise = new this(INTERNAL);

	        while (++i < len) {
	          resolver(iterable[i]);
	        }

	        return promise;

	        function resolver(value) {
	          self.resolve(value).then(function (response) {
	            if (!called) {
	              called = true;
	              handlers.resolve(promise, response);
	            }
	          }, function (error) {
	            if (!called) {
	              called = true;
	              handlers.reject(promise, error);
	            }
	          });
	        }
	      }
	    }, {
	      "1": 1
	    }],
	    3: [function (_dereq_, module, exports) {
	      (function (global) {

	        if (typeof global.Promise !== 'function') {
	          global.Promise = _dereq_(2);
	        }
	      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
	    }, {
	      "2": 2
	    }],
	    4: [function (_dereq_, module, exports) {

	      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
	        return typeof obj;
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	      };

	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }

	      function getIDB() {
	        /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */
	        try {
	          if (typeof indexedDB !== 'undefined') {
	            return indexedDB;
	          }

	          if (typeof webkitIndexedDB !== 'undefined') {
	            return webkitIndexedDB;
	          }

	          if (typeof mozIndexedDB !== 'undefined') {
	            return mozIndexedDB;
	          }

	          if (typeof OIndexedDB !== 'undefined') {
	            return OIndexedDB;
	          }

	          if (typeof msIndexedDB !== 'undefined') {
	            return msIndexedDB;
	          }
	        } catch (e) {
	          return;
	        }
	      }

	      var idb = getIDB();

	      function isIndexedDBValid() {
	        try {
	          // Initialize IndexedDB; fall back to vendor-prefixed versions
	          // if needed.
	          if (!idb || !idb.open) {
	            return false;
	          } // We mimic PouchDB here;
	          //
	          // We test for openDatabase because IE Mobile identifies itself
	          // as Safari. Oh the lulz...


	          var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);
	          var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1; // Safari <10.1 does not meet our requirements for IDB support
	          // (see: https://github.com/pouchdb/pouchdb/issues/5572).
	          // Safari 10.1 shipped with fetch, we can use that to detect it.
	          // Note: this creates issues with `window.fetch` polyfills and
	          // overrides; see:
	          // https://github.com/localForage/localForage/issues/856

	          return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' && // some outdated implementations of IDB that appear on Samsung
	          // and HTC Android devices <4.4 are missing IDBKeyRange
	          // See: https://github.com/mozilla/localForage/issues/128
	          // See: https://github.com/mozilla/localForage/issues/272
	          typeof IDBKeyRange !== 'undefined';
	        } catch (e) {
	          return false;
	        }
	      } // Abstracts constructing a Blob object, so it also works in older
	      // browsers that don't support the native Blob constructor. (i.e.
	      // old QtWebKit versions, at least).
	      // Abstracts constructing a Blob object, so it also works in older
	      // browsers that don't support the native Blob constructor. (i.e.
	      // old QtWebKit versions, at least).


	      function createBlob(parts, properties) {
	        /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */
	        parts = parts || [];
	        properties = properties || {};

	        try {
	          return new Blob(parts, properties);
	        } catch (e) {
	          if (e.name !== 'TypeError') {
	            throw e;
	          }

	          var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;
	          var builder = new Builder();

	          for (var i = 0; i < parts.length; i += 1) {
	            builder.append(parts[i]);
	          }

	          return builder.getBlob(properties.type);
	        }
	      } // This is CommonJS because lie is an external dependency, so Rollup
	      // can just ignore it.


	      if (typeof Promise === 'undefined') {
	        // In the "nopromises" build this will just throw if you don't have
	        // a global promise object, but it would throw anyway later.
	        _dereq_(3);
	      }

	      var Promise$1 = Promise;

	      function executeCallback(promise, callback) {
	        if (callback) {
	          promise.then(function (result) {
	            callback(null, result);
	          }, function (error) {
	            callback(error);
	          });
	        }
	      }

	      function executeTwoCallbacks(promise, callback, errorCallback) {
	        if (typeof callback === 'function') {
	          promise.then(callback);
	        }

	        if (typeof errorCallback === 'function') {
	          promise["catch"](errorCallback);
	        }
	      }

	      function normalizeKey(key) {
	        // Cast the key to a string, as that's all we can set as a key.
	        if (typeof key !== 'string') {
	          console.warn(key + ' used as a key, but it is not a string.');
	          key = String(key);
	        }

	        return key;
	      }

	      function getCallback() {
	        if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {
	          return arguments[arguments.length - 1];
	        }
	      } // Some code originally from async_storage.js in
	      // [Gaia](https://github.com/mozilla-b2g/gaia).


	      var DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';
	      var supportsBlobs = void 0;
	      var dbContexts = {};
	      var toString = Object.prototype.toString; // Transaction Modes

	      var READ_ONLY = 'readonly';
	      var READ_WRITE = 'readwrite'; // Transform a binary string to an array buffer, because otherwise
	      // weird stuff happens when you try to work with the binary string directly.
	      // It is known.
	      // From http://stackoverflow.com/questions/14967647/ (continues on next line)
	      // encode-decode-image-with-base64-breaks-image (2013-04-21)

	      function _binStringToArrayBuffer(bin) {
	        var length = bin.length;
	        var buf = new ArrayBuffer(length);
	        var arr = new Uint8Array(buf);

	        for (var i = 0; i < length; i++) {
	          arr[i] = bin.charCodeAt(i);
	        }

	        return buf;
	      } //
	      // Blobs are not supported in all versions of IndexedDB, notably
	      // Chrome <37 and Android <5. In those versions, storing a blob will throw.
	      //
	      // Various other blob bugs exist in Chrome v37-42 (inclusive).
	      // Detecting them is expensive and confusing to users, and Chrome 37-42
	      // is at very low usage worldwide, so we do a hacky userAgent check instead.
	      //
	      // content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120
	      // 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
	      // FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
	      //
	      // Code borrowed from PouchDB. See:
	      // https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js
	      //


	      function _checkBlobSupportWithoutCaching(idb) {
	        return new Promise$1(function (resolve) {
	          var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);
	          var blob = createBlob(['']);
	          txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');

	          txn.onabort = function (e) {
	            // If the transaction aborts now its due to not being able to
	            // write to the database, likely due to the disk being full
	            e.preventDefault();
	            e.stopPropagation();
	            resolve(false);
	          };

	          txn.oncomplete = function () {
	            var matchedChrome = navigator.userAgent.match(/Chrome\/(\d+)/);
	            var matchedEdge = navigator.userAgent.match(/Edge\//); // MS Edge pretends to be Chrome 42:
	            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx

	            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);
	          };
	        })["catch"](function () {
	          return false; // error, so assume unsupported
	        });
	      }

	      function _checkBlobSupport(idb) {
	        if (typeof supportsBlobs === 'boolean') {
	          return Promise$1.resolve(supportsBlobs);
	        }

	        return _checkBlobSupportWithoutCaching(idb).then(function (value) {
	          supportsBlobs = value;
	          return supportsBlobs;
	        });
	      }

	      function _deferReadiness(dbInfo) {
	        var dbContext = dbContexts[dbInfo.name]; // Create a deferred object representing the current database operation.

	        var deferredOperation = {};
	        deferredOperation.promise = new Promise$1(function (resolve, reject) {
	          deferredOperation.resolve = resolve;
	          deferredOperation.reject = reject;
	        }); // Enqueue the deferred operation.

	        dbContext.deferredOperations.push(deferredOperation); // Chain its promise to the database readiness.

	        if (!dbContext.dbReady) {
	          dbContext.dbReady = deferredOperation.promise;
	        } else {
	          dbContext.dbReady = dbContext.dbReady.then(function () {
	            return deferredOperation.promise;
	          });
	        }
	      }

	      function _advanceReadiness(dbInfo) {
	        var dbContext = dbContexts[dbInfo.name]; // Dequeue a deferred operation.

	        var deferredOperation = dbContext.deferredOperations.pop(); // Resolve its promise (which is part of the database readiness
	        // chain of promises).

	        if (deferredOperation) {
	          deferredOperation.resolve();
	          return deferredOperation.promise;
	        }
	      }

	      function _rejectReadiness(dbInfo, err) {
	        var dbContext = dbContexts[dbInfo.name]; // Dequeue a deferred operation.

	        var deferredOperation = dbContext.deferredOperations.pop(); // Reject its promise (which is part of the database readiness
	        // chain of promises).

	        if (deferredOperation) {
	          deferredOperation.reject(err);
	          return deferredOperation.promise;
	        }
	      }

	      function _getConnection(dbInfo, upgradeNeeded) {
	        return new Promise$1(function (resolve, reject) {
	          dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();

	          if (dbInfo.db) {
	            if (upgradeNeeded) {
	              _deferReadiness(dbInfo);

	              dbInfo.db.close();
	            } else {
	              return resolve(dbInfo.db);
	            }
	          }

	          var dbArgs = [dbInfo.name];

	          if (upgradeNeeded) {
	            dbArgs.push(dbInfo.version);
	          }

	          var openreq = idb.open.apply(idb, dbArgs);

	          if (upgradeNeeded) {
	            openreq.onupgradeneeded = function (e) {
	              var db = openreq.result;

	              try {
	                db.createObjectStore(dbInfo.storeName);

	                if (e.oldVersion <= 1) {
	                  // Added when support for blob shims was added
	                  db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);
	                }
	              } catch (ex) {
	                if (ex.name === 'ConstraintError') {
	                  console.warn('The database "' + dbInfo.name + '"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage "' + dbInfo.storeName + '" already exists.');
	                } else {
	                  throw ex;
	                }
	              }
	            };
	          }

	          openreq.onerror = function (e) {
	            e.preventDefault();
	            reject(openreq.error);
	          };

	          openreq.onsuccess = function () {
	            var db = openreq.result;

	            db.onversionchange = function (e) {
	              // Triggered when the database is modified (e.g. adding an objectStore) or
	              // deleted (even when initiated by other sessions in different tabs).
	              // Closing the connection here prevents those operations from being blocked.
	              // If the database is accessed again later by this instance, the connection
	              // will be reopened or the database recreated as needed.
	              e.target.close();
	            };

	            resolve(db);

	            _advanceReadiness(dbInfo);
	          };
	        });
	      }

	      function _getOriginalConnection(dbInfo) {
	        return _getConnection(dbInfo, false);
	      }

	      function _getUpgradedConnection(dbInfo) {
	        return _getConnection(dbInfo, true);
	      }

	      function _isUpgradeNeeded(dbInfo, defaultVersion) {
	        if (!dbInfo.db) {
	          return true;
	        }

	        var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);
	        var isDowngrade = dbInfo.version < dbInfo.db.version;
	        var isUpgrade = dbInfo.version > dbInfo.db.version;

	        if (isDowngrade) {
	          // If the version is not the default one
	          // then warn for impossible downgrade.
	          if (dbInfo.version !== defaultVersion) {
	            console.warn('The database "' + dbInfo.name + '"' + " can't be downgraded from version " + dbInfo.db.version + ' to version ' + dbInfo.version + '.');
	          } // Align the versions to prevent errors.


	          dbInfo.version = dbInfo.db.version;
	        }

	        if (isUpgrade || isNewStore) {
	          // If the store is new then increment the version (if needed).
	          // This will trigger an "upgradeneeded" event which is required
	          // for creating a store.
	          if (isNewStore) {
	            var incVersion = dbInfo.db.version + 1;

	            if (incVersion > dbInfo.version) {
	              dbInfo.version = incVersion;
	            }
	          }

	          return true;
	        }

	        return false;
	      } // encode a blob for indexeddb engines that don't support blobs


	      function _encodeBlob(blob) {
	        return new Promise$1(function (resolve, reject) {
	          var reader = new FileReader();
	          reader.onerror = reject;

	          reader.onloadend = function (e) {
	            var base64 = btoa(e.target.result || '');
	            resolve({
	              __local_forage_encoded_blob: true,
	              data: base64,
	              type: blob.type
	            });
	          };

	          reader.readAsBinaryString(blob);
	        });
	      } // decode an encoded blob


	      function _decodeBlob(encodedBlob) {
	        var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));

	        return createBlob([arrayBuff], {
	          type: encodedBlob.type
	        });
	      } // is this one of our fancy encoded blobs?


	      function _isEncodedBlob(value) {
	        return value && value.__local_forage_encoded_blob;
	      } // Specialize the default `ready()` function by making it dependent
	      // on the current database operations. Thus, the driver will be actually
	      // ready when it's been initialized (default) *and* there are no pending
	      // operations on the database (initiated by some other instances).


	      function _fullyReady(callback) {
	        var self = this;

	        var promise = self._initReady().then(function () {
	          var dbContext = dbContexts[self._dbInfo.name];

	          if (dbContext && dbContext.dbReady) {
	            return dbContext.dbReady;
	          }
	        });

	        executeTwoCallbacks(promise, callback, callback);
	        return promise;
	      } // Try to establish a new db connection to replace the
	      // current one which is broken (i.e. experiencing
	      // InvalidStateError while creating a transaction).


	      function _tryReconnect(dbInfo) {
	        _deferReadiness(dbInfo);

	        var dbContext = dbContexts[dbInfo.name];
	        var forages = dbContext.forages;

	        for (var i = 0; i < forages.length; i++) {
	          var forage = forages[i];

	          if (forage._dbInfo.db) {
	            forage._dbInfo.db.close();

	            forage._dbInfo.db = null;
	          }
	        }

	        dbInfo.db = null;
	        return _getOriginalConnection(dbInfo).then(function (db) {
	          dbInfo.db = db;

	          if (_isUpgradeNeeded(dbInfo)) {
	            // Reopen the database for upgrading.
	            return _getUpgradedConnection(dbInfo);
	          }

	          return db;
	        }).then(function (db) {
	          // store the latest db reference
	          // in case the db was upgraded
	          dbInfo.db = dbContext.db = db;

	          for (var i = 0; i < forages.length; i++) {
	            forages[i]._dbInfo.db = db;
	          }
	        })["catch"](function (err) {
	          _rejectReadiness(dbInfo, err);

	          throw err;
	        });
	      } // FF doesn't like Promises (micro-tasks) and IDDB store operations,
	      // so we have to do it with callbacks


	      function createTransaction(dbInfo, mode, callback, retries) {
	        if (retries === undefined) {
	          retries = 1;
	        }

	        try {
	          var tx = dbInfo.db.transaction(dbInfo.storeName, mode);
	          callback(null, tx);
	        } catch (err) {
	          if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {
	            return Promise$1.resolve().then(function () {
	              if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {
	                // increase the db version, to create the new ObjectStore
	                if (dbInfo.db) {
	                  dbInfo.version = dbInfo.db.version + 1;
	                } // Reopen the database for upgrading.


	                return _getUpgradedConnection(dbInfo);
	              }
	            }).then(function () {
	              return _tryReconnect(dbInfo).then(function () {
	                createTransaction(dbInfo, mode, callback, retries - 1);
	              });
	            })["catch"](callback);
	          }

	          callback(err);
	        }
	      }

	      function createDbContext() {
	        return {
	          // Running localForages sharing a database.
	          forages: [],
	          // Shared database.
	          db: null,
	          // Database readiness (promise).
	          dbReady: null,
	          // Deferred operations on the database.
	          deferredOperations: []
	        };
	      } // Open the IndexedDB database (automatically creates one if one didn't
	      // previously exist), using any options set in the config.


	      function _initStorage(options) {
	        var self = this;
	        var dbInfo = {
	          db: null
	        };

	        if (options) {
	          for (var i in options) {
	            dbInfo[i] = options[i];
	          }
	        } // Get the current context of the database;


	        var dbContext = dbContexts[dbInfo.name]; // ...or create a new context.

	        if (!dbContext) {
	          dbContext = createDbContext(); // Register the new context in the global container.

	          dbContexts[dbInfo.name] = dbContext;
	        } // Register itself as a running localForage in the current context.


	        dbContext.forages.push(self); // Replace the default `ready()` function with the specialized one.

	        if (!self._initReady) {
	          self._initReady = self.ready;
	          self.ready = _fullyReady;
	        } // Create an array of initialization states of the related localForages.


	        var initPromises = [];

	        function ignoreErrors() {
	          // Don't handle errors here,
	          // just makes sure related localForages aren't pending.
	          return Promise$1.resolve();
	        }

	        for (var j = 0; j < dbContext.forages.length; j++) {
	          var forage = dbContext.forages[j];

	          if (forage !== self) {
	            // Don't wait for itself...
	            initPromises.push(forage._initReady()["catch"](ignoreErrors));
	          }
	        } // Take a snapshot of the related localForages.


	        var forages = dbContext.forages.slice(0); // Initialize the connection process only when
	        // all the related localForages aren't pending.

	        return Promise$1.all(initPromises).then(function () {
	          dbInfo.db = dbContext.db; // Get the connection or open a new one without upgrade.

	          return _getOriginalConnection(dbInfo);
	        }).then(function (db) {
	          dbInfo.db = db;

	          if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {
	            // Reopen the database for upgrading.
	            return _getUpgradedConnection(dbInfo);
	          }

	          return db;
	        }).then(function (db) {
	          dbInfo.db = dbContext.db = db;
	          self._dbInfo = dbInfo; // Share the final connection amongst related localForages.

	          for (var k = 0; k < forages.length; k++) {
	            var forage = forages[k];

	            if (forage !== self) {
	              // Self is already up-to-date.
	              forage._dbInfo.db = dbInfo.db;
	              forage._dbInfo.version = dbInfo.version;
	            }
	          }
	        });
	      }

	      function getItem(key, callback) {
	        var self = this;
	        key = normalizeKey(key);
	        var promise = new Promise$1(function (resolve, reject) {
	          self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
	              if (err) {
	                return reject(err);
	              }

	              try {
	                var store = transaction.objectStore(self._dbInfo.storeName);
	                var req = store.get(key);

	                req.onsuccess = function () {
	                  var value = req.result;

	                  if (value === undefined) {
	                    value = null;
	                  }

	                  if (_isEncodedBlob(value)) {
	                    value = _decodeBlob(value);
	                  }

	                  resolve(value);
	                };

	                req.onerror = function () {
	                  reject(req.error);
	                };
	              } catch (e) {
	                reject(e);
	              }
	            });
	          })["catch"](reject);
	        });
	        executeCallback(promise, callback);
	        return promise;
	      } // Iterate over all items stored in database.


	      function iterate(iterator, callback) {
	        var self = this;
	        var promise = new Promise$1(function (resolve, reject) {
	          self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
	              if (err) {
	                return reject(err);
	              }

	              try {
	                var store = transaction.objectStore(self._dbInfo.storeName);
	                var req = store.openCursor();
	                var iterationNumber = 1;

	                req.onsuccess = function () {
	                  var cursor = req.result;

	                  if (cursor) {
	                    var value = cursor.value;

	                    if (_isEncodedBlob(value)) {
	                      value = _decodeBlob(value);
	                    }

	                    var result = iterator(value, cursor.key, iterationNumber++); // when the iterator callback returns any
	                    // (non-`undefined`) value, then we stop
	                    // the iteration immediately

	                    if (result !== void 0) {
	                      resolve(result);
	                    } else {
	                      cursor["continue"]();
	                    }
	                  } else {
	                    resolve();
	                  }
	                };

	                req.onerror = function () {
	                  reject(req.error);
	                };
	              } catch (e) {
	                reject(e);
	              }
	            });
	          })["catch"](reject);
	        });
	        executeCallback(promise, callback);
	        return promise;
	      }

	      function setItem(key, value, callback) {
	        var self = this;
	        key = normalizeKey(key);
	        var promise = new Promise$1(function (resolve, reject) {
	          var dbInfo;
	          self.ready().then(function () {
	            dbInfo = self._dbInfo;

	            if (toString.call(value) === '[object Blob]') {
	              return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {
	                if (blobSupport) {
	                  return value;
	                }

	                return _encodeBlob(value);
	              });
	            }

	            return value;
	          }).then(function (value) {
	            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
	              if (err) {
	                return reject(err);
	              }

	              try {
	                var store = transaction.objectStore(self._dbInfo.storeName); // The reason we don't _save_ null is because IE 10 does
	                // not support saving the `null` type in IndexedDB. How
	                // ironic, given the bug below!
	                // See: https://github.com/mozilla/localForage/issues/161

	                if (value === null) {
	                  value = undefined;
	                }

	                var req = store.put(value, key);

	                transaction.oncomplete = function () {
	                  // Cast to undefined so the value passed to
	                  // callback/promise is the same as what one would get out
	                  // of `getItem()` later. This leads to some weirdness
	                  // (setItem('foo', undefined) will return `null`), but
	                  // it's not my fault localStorage is our baseline and that
	                  // it's weird.
	                  if (value === undefined) {
	                    value = null;
	                  }

	                  resolve(value);
	                };

	                transaction.onabort = transaction.onerror = function () {
	                  var err = req.error ? req.error : req.transaction.error;
	                  reject(err);
	                };
	              } catch (e) {
	                reject(e);
	              }
	            });
	          })["catch"](reject);
	        });
	        executeCallback(promise, callback);
	        return promise;
	      }

	      function removeItem(key, callback) {
	        var self = this;
	        key = normalizeKey(key);
	        var promise = new Promise$1(function (resolve, reject) {
	          self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
	              if (err) {
	                return reject(err);
	              }

	              try {
	                var store = transaction.objectStore(self._dbInfo.storeName); // We use a Grunt task to make this safe for IE and some
	                // versions of Android (including those used by Cordova).
	                // Normally IE won't like `.delete()` and will insist on
	                // using `['delete']()`, but we have a build step that
	                // fixes this for us now.

	                var req = store["delete"](key);

	                transaction.oncomplete = function () {
	                  resolve();
	                };

	                transaction.onerror = function () {
	                  reject(req.error);
	                }; // The request will be also be aborted if we've exceeded our storage
	                // space.


	                transaction.onabort = function () {
	                  var err = req.error ? req.error : req.transaction.error;
	                  reject(err);
	                };
	              } catch (e) {
	                reject(e);
	              }
	            });
	          })["catch"](reject);
	        });
	        executeCallback(promise, callback);
	        return promise;
	      }

	      function clear(callback) {
	        var self = this;
	        var promise = new Promise$1(function (resolve, reject) {
	          self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
	              if (err) {
	                return reject(err);
	              }

	              try {
	                var store = transaction.objectStore(self._dbInfo.storeName);
	                var req = store.clear();

	                transaction.oncomplete = function () {
	                  resolve();
	                };

	                transaction.onabort = transaction.onerror = function () {
	                  var err = req.error ? req.error : req.transaction.error;
	                  reject(err);
	                };
	              } catch (e) {
	                reject(e);
	              }
	            });
	          })["catch"](reject);
	        });
	        executeCallback(promise, callback);
	        return promise;
	      }

	      function length(callback) {
	        var self = this;
	        var promise = new Promise$1(function (resolve, reject) {
	          self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
	              if (err) {
	                return reject(err);
	              }

	              try {
	                var store = transaction.objectStore(self._dbInfo.storeName);
	                var req = store.count();

	                req.onsuccess = function () {
	                  resolve(req.result);
	                };

	                req.onerror = function () {
	                  reject(req.error);
	                };
	              } catch (e) {
	                reject(e);
	              }
	            });
	          })["catch"](reject);
	        });
	        executeCallback(promise, callback);
	        return promise;
	      }

	      function key(n, callback) {
	        var self = this;
	        var promise = new Promise$1(function (resolve, reject) {
	          if (n < 0) {
	            resolve(null);
	            return;
	          }

	          self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
	              if (err) {
	                return reject(err);
	              }

	              try {
	                var store = transaction.objectStore(self._dbInfo.storeName);
	                var advanced = false;
	                var req = store.openKeyCursor();

	                req.onsuccess = function () {
	                  var cursor = req.result;

	                  if (!cursor) {
	                    // this means there weren't enough keys
	                    resolve(null);
	                    return;
	                  }

	                  if (n === 0) {
	                    // We have the first key, return it if that's what they
	                    // wanted.
	                    resolve(cursor.key);
	                  } else {
	                    if (!advanced) {
	                      // Otherwise, ask the cursor to skip ahead n
	                      // records.
	                      advanced = true;
	                      cursor.advance(n);
	                    } else {
	                      // When we get here, we've got the nth key.
	                      resolve(cursor.key);
	                    }
	                  }
	                };

	                req.onerror = function () {
	                  reject(req.error);
	                };
	              } catch (e) {
	                reject(e);
	              }
	            });
	          })["catch"](reject);
	        });
	        executeCallback(promise, callback);
	        return promise;
	      }

	      function keys(callback) {
	        var self = this;
	        var promise = new Promise$1(function (resolve, reject) {
	          self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
	              if (err) {
	                return reject(err);
	              }

	              try {
	                var store = transaction.objectStore(self._dbInfo.storeName);
	                var req = store.openKeyCursor();
	                var keys = [];

	                req.onsuccess = function () {
	                  var cursor = req.result;

	                  if (!cursor) {
	                    resolve(keys);
	                    return;
	                  }

	                  keys.push(cursor.key);
	                  cursor["continue"]();
	                };

	                req.onerror = function () {
	                  reject(req.error);
	                };
	              } catch (e) {
	                reject(e);
	              }
	            });
	          })["catch"](reject);
	        });
	        executeCallback(promise, callback);
	        return promise;
	      }

	      function dropInstance(options, callback) {
	        callback = getCallback.apply(this, arguments);
	        var currentConfig = this.config();
	        options = typeof options !== 'function' && options || {};

	        if (!options.name) {
	          options.name = options.name || currentConfig.name;
	          options.storeName = options.storeName || currentConfig.storeName;
	        }

	        var self = this;
	        var promise;

	        if (!options.name) {
	          promise = Promise$1.reject('Invalid arguments');
	        } else {
	          var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;
	          var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {
	            var dbContext = dbContexts[options.name];
	            var forages = dbContext.forages;
	            dbContext.db = db;

	            for (var i = 0; i < forages.length; i++) {
	              forages[i]._dbInfo.db = db;
	            }

	            return db;
	          });

	          if (!options.storeName) {
	            promise = dbPromise.then(function (db) {
	              _deferReadiness(options);

	              var dbContext = dbContexts[options.name];
	              var forages = dbContext.forages;
	              db.close();

	              for (var i = 0; i < forages.length; i++) {
	                var forage = forages[i];
	                forage._dbInfo.db = null;
	              }

	              var dropDBPromise = new Promise$1(function (resolve, reject) {
	                var req = idb.deleteDatabase(options.name);

	                req.onerror = function () {
	                  var db = req.result;

	                  if (db) {
	                    db.close();
	                  }

	                  reject(req.error);
	                };

	                req.onblocked = function () {
	                  // Closing all open connections in onversionchange handler should prevent this situation, but if
	                  // we do get here, it just means the request remains pending - eventually it will succeed or error
	                  console.warn('dropInstance blocked for database "' + options.name + '" until all open connections are closed');
	                };

	                req.onsuccess = function () {
	                  var db = req.result;

	                  if (db) {
	                    db.close();
	                  }

	                  resolve(db);
	                };
	              });
	              return dropDBPromise.then(function (db) {
	                dbContext.db = db;

	                for (var i = 0; i < forages.length; i++) {
	                  var _forage = forages[i];

	                  _advanceReadiness(_forage._dbInfo);
	                }
	              })["catch"](function (err) {
	                (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function () {});
	                throw err;
	              });
	            });
	          } else {
	            promise = dbPromise.then(function (db) {
	              if (!db.objectStoreNames.contains(options.storeName)) {
	                return;
	              }

	              var newVersion = db.version + 1;

	              _deferReadiness(options);

	              var dbContext = dbContexts[options.name];
	              var forages = dbContext.forages;
	              db.close();

	              for (var i = 0; i < forages.length; i++) {
	                var forage = forages[i];
	                forage._dbInfo.db = null;
	                forage._dbInfo.version = newVersion;
	              }

	              var dropObjectPromise = new Promise$1(function (resolve, reject) {
	                var req = idb.open(options.name, newVersion);

	                req.onerror = function (err) {
	                  var db = req.result;
	                  db.close();
	                  reject(err);
	                };

	                req.onupgradeneeded = function () {
	                  var db = req.result;
	                  db.deleteObjectStore(options.storeName);
	                };

	                req.onsuccess = function () {
	                  var db = req.result;
	                  db.close();
	                  resolve(db);
	                };
	              });
	              return dropObjectPromise.then(function (db) {
	                dbContext.db = db;

	                for (var j = 0; j < forages.length; j++) {
	                  var _forage2 = forages[j];
	                  _forage2._dbInfo.db = db;

	                  _advanceReadiness(_forage2._dbInfo);
	                }
	              })["catch"](function (err) {
	                (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function () {});
	                throw err;
	              });
	            });
	          }
	        }

	        executeCallback(promise, callback);
	        return promise;
	      }

	      var asyncStorage = {
	        _driver: 'asyncStorage',
	        _initStorage: _initStorage,
	        _support: isIndexedDBValid(),
	        iterate: iterate,
	        getItem: getItem,
	        setItem: setItem,
	        removeItem: removeItem,
	        clear: clear,
	        length: length,
	        key: key,
	        keys: keys,
	        dropInstance: dropInstance
	      };

	      function isWebSQLValid() {
	        return typeof openDatabase === 'function';
	      } // Sadly, the best way to save binary data in WebSQL/localStorage is serializing
	      // it to Base64, so this is how we store it to prevent very strange errors with less
	      // verbose ways of binary <-> string data storage.


	      var BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	      var BLOB_TYPE_PREFIX = '~~local_forage_type~';
	      var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;
	      var SERIALIZED_MARKER = '__lfsc__:';
	      var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length; // OMG the serializations!

	      var TYPE_ARRAYBUFFER = 'arbf';
	      var TYPE_BLOB = 'blob';
	      var TYPE_INT8ARRAY = 'si08';
	      var TYPE_UINT8ARRAY = 'ui08';
	      var TYPE_UINT8CLAMPEDARRAY = 'uic8';
	      var TYPE_INT16ARRAY = 'si16';
	      var TYPE_INT32ARRAY = 'si32';
	      var TYPE_UINT16ARRAY = 'ur16';
	      var TYPE_UINT32ARRAY = 'ui32';
	      var TYPE_FLOAT32ARRAY = 'fl32';
	      var TYPE_FLOAT64ARRAY = 'fl64';
	      var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;
	      var toString$1 = Object.prototype.toString;

	      function stringToBuffer(serializedString) {
	        // Fill the string into a ArrayBuffer.
	        var bufferLength = serializedString.length * 0.75;
	        var len = serializedString.length;
	        var i;
	        var p = 0;
	        var encoded1, encoded2, encoded3, encoded4;

	        if (serializedString[serializedString.length - 1] === '=') {
	          bufferLength--;

	          if (serializedString[serializedString.length - 2] === '=') {
	            bufferLength--;
	          }
	        }

	        var buffer = new ArrayBuffer(bufferLength);
	        var bytes = new Uint8Array(buffer);

	        for (i = 0; i < len; i += 4) {
	          encoded1 = BASE_CHARS.indexOf(serializedString[i]);
	          encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);
	          encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);
	          encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);
	          /*jslint bitwise: true */

	          bytes[p++] = encoded1 << 2 | encoded2 >> 4;
	          bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
	          bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
	        }

	        return buffer;
	      } // Converts a buffer to a string to store, serialized, in the backend
	      // storage library.


	      function bufferToString(buffer) {
	        // base64-arraybuffer
	        var bytes = new Uint8Array(buffer);
	        var base64String = '';
	        var i;

	        for (i = 0; i < bytes.length; i += 3) {
	          /*jslint bitwise: true */
	          base64String += BASE_CHARS[bytes[i] >> 2];
	          base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
	          base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
	          base64String += BASE_CHARS[bytes[i + 2] & 63];
	        }

	        if (bytes.length % 3 === 2) {
	          base64String = base64String.substring(0, base64String.length - 1) + '=';
	        } else if (bytes.length % 3 === 1) {
	          base64String = base64String.substring(0, base64String.length - 2) + '==';
	        }

	        return base64String;
	      } // Serialize a value, afterwards executing a callback (which usually
	      // instructs the `setItem()` callback/promise to be executed). This is how
	      // we store binary data with localStorage.


	      function serialize(value, callback) {
	        var valueType = '';

	        if (value) {
	          valueType = toString$1.call(value);
	        } // Cannot use `value instanceof ArrayBuffer` or such here, as these
	        // checks fail when running the tests using casper.js...
	        //
	        // TODO: See why those tests fail and use a better solution.


	        if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {
	          // Convert binary arrays to a string and prefix the string with
	          // a special marker.
	          var buffer;
	          var marker = SERIALIZED_MARKER;

	          if (value instanceof ArrayBuffer) {
	            buffer = value;
	            marker += TYPE_ARRAYBUFFER;
	          } else {
	            buffer = value.buffer;

	            if (valueType === '[object Int8Array]') {
	              marker += TYPE_INT8ARRAY;
	            } else if (valueType === '[object Uint8Array]') {
	              marker += TYPE_UINT8ARRAY;
	            } else if (valueType === '[object Uint8ClampedArray]') {
	              marker += TYPE_UINT8CLAMPEDARRAY;
	            } else if (valueType === '[object Int16Array]') {
	              marker += TYPE_INT16ARRAY;
	            } else if (valueType === '[object Uint16Array]') {
	              marker += TYPE_UINT16ARRAY;
	            } else if (valueType === '[object Int32Array]') {
	              marker += TYPE_INT32ARRAY;
	            } else if (valueType === '[object Uint32Array]') {
	              marker += TYPE_UINT32ARRAY;
	            } else if (valueType === '[object Float32Array]') {
	              marker += TYPE_FLOAT32ARRAY;
	            } else if (valueType === '[object Float64Array]') {
	              marker += TYPE_FLOAT64ARRAY;
	            } else {
	              callback(new Error('Failed to get type for BinaryArray'));
	            }
	          }

	          callback(marker + bufferToString(buffer));
	        } else if (valueType === '[object Blob]') {
	          // Conver the blob to a binaryArray and then to a string.
	          var fileReader = new FileReader();

	          fileReader.onload = function () {
	            // Backwards-compatible prefix for the blob type.
	            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);
	            callback(SERIALIZED_MARKER + TYPE_BLOB + str);
	          };

	          fileReader.readAsArrayBuffer(value);
	        } else {
	          try {
	            callback(JSON.stringify(value));
	          } catch (e) {
	            console.error("Couldn't convert value into a JSON string: ", value);
	            callback(null, e);
	          }
	        }
	      } // Deserialize data we've inserted into a value column/field. We place
	      // special markers into our strings to mark them as encoded; this isn't
	      // as nice as a meta field, but it's the only sane thing we can do whilst
	      // keeping localStorage support intact.
	      //
	      // Oftentimes this will just deserialize JSON content, but if we have a
	      // special marker (SERIALIZED_MARKER, defined above), we will extract
	      // some kind of arraybuffer/binary data/typed array out of the string.


	      function deserialize(value) {
	        // If we haven't marked this string as being specially serialized (i.e.
	        // something other than serialized JSON), we can just return it and be
	        // done with it.
	        if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {
	          return JSON.parse(value);
	        } // The following code deals with deserializing some kind of Blob or
	        // TypedArray. First we separate out the type of data we're dealing
	        // with from the data itself.


	        var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);
	        var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);
	        var blobType; // Backwards-compatible blob type serialization strategy.
	        // DBs created with older versions of localForage will simply not have the blob type.

	        if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {
	          var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);
	          blobType = matcher[1];
	          serializedString = serializedString.substring(matcher[0].length);
	        }

	        var buffer = stringToBuffer(serializedString); // Return the right type based on the code/type set during
	        // serialization.

	        switch (type) {
	          case TYPE_ARRAYBUFFER:
	            return buffer;

	          case TYPE_BLOB:
	            return createBlob([buffer], {
	              type: blobType
	            });

	          case TYPE_INT8ARRAY:
	            return new Int8Array(buffer);

	          case TYPE_UINT8ARRAY:
	            return new Uint8Array(buffer);

	          case TYPE_UINT8CLAMPEDARRAY:
	            return new Uint8ClampedArray(buffer);

	          case TYPE_INT16ARRAY:
	            return new Int16Array(buffer);

	          case TYPE_UINT16ARRAY:
	            return new Uint16Array(buffer);

	          case TYPE_INT32ARRAY:
	            return new Int32Array(buffer);

	          case TYPE_UINT32ARRAY:
	            return new Uint32Array(buffer);

	          case TYPE_FLOAT32ARRAY:
	            return new Float32Array(buffer);

	          case TYPE_FLOAT64ARRAY:
	            return new Float64Array(buffer);

	          default:
	            throw new Error('Unkown type: ' + type);
	        }
	      }

	      var localforageSerializer = {
	        serialize: serialize,
	        deserialize: deserialize,
	        stringToBuffer: stringToBuffer,
	        bufferToString: bufferToString
	      };
	      /*
	       * Includes code from:
	       *
	       * base64-arraybuffer
	       * https://github.com/niklasvh/base64-arraybuffer
	       *
	       * Copyright (c) 2012 Niklas von Hertzen
	       * Licensed under the MIT license.
	       */

	      function createDbTable(t, dbInfo, callback, errorCallback) {
	        t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);
	      } // Open the WebSQL database (automatically creates one if one didn't
	      // previously exist), using any options set in the config.


	      function _initStorage$1(options) {
	        var self = this;
	        var dbInfo = {
	          db: null
	        };

	        if (options) {
	          for (var i in options) {
	            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];
	          }
	        }

	        var dbInfoPromise = new Promise$1(function (resolve, reject) {
	          // Open the database; the openDatabase API will automatically
	          // create it for us if it doesn't exist.
	          try {
	            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);
	          } catch (e) {
	            return reject(e);
	          } // Create our key/value table if it doesn't exist.


	          dbInfo.db.transaction(function (t) {
	            createDbTable(t, dbInfo, function () {
	              self._dbInfo = dbInfo;
	              resolve();
	            }, function (t, error) {
	              reject(error);
	            });
	          }, reject);
	        });
	        dbInfo.serializer = localforageSerializer;
	        return dbInfoPromise;
	      }

	      function tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {
	        t.executeSql(sqlStatement, args, callback, function (t, error) {
	          if (error.code === error.SYNTAX_ERR) {
	            t.executeSql('SELECT name FROM sqlite_master ' + "WHERE type='table' AND name = ?", [dbInfo.storeName], function (t, results) {
	              if (!results.rows.length) {
	                // if the table is missing (was deleted)
	                // re-create it table and retry
	                createDbTable(t, dbInfo, function () {
	                  t.executeSql(sqlStatement, args, callback, errorCallback);
	                }, errorCallback);
	              } else {
	                errorCallback(t, error);
	              }
	            }, errorCallback);
	          } else {
	            errorCallback(t, error);
	          }
	        }, errorCallback);
	      }

	      function getItem$1(key, callback) {
	        var self = this;
	        key = normalizeKey(key);
	        var promise = new Promise$1(function (resolve, reject) {
	          self.ready().then(function () {
	            var dbInfo = self._dbInfo;
	            dbInfo.db.transaction(function (t) {
	              tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {
	                var result = results.rows.length ? results.rows.item(0).value : null; // Check to see if this is serialized content we need to
	                // unpack.

	                if (result) {
	                  result = dbInfo.serializer.deserialize(result);
	                }

	                resolve(result);
	              }, function (t, error) {
	                reject(error);
	              });
	            });
	          })["catch"](reject);
	        });
	        executeCallback(promise, callback);
	        return promise;
	      }

	      function iterate$1(iterator, callback) {
	        var self = this;
	        var promise = new Promise$1(function (resolve, reject) {
	          self.ready().then(function () {
	            var dbInfo = self._dbInfo;
	            dbInfo.db.transaction(function (t) {
	              tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {
	                var rows = results.rows;
	                var length = rows.length;

	                for (var i = 0; i < length; i++) {
	                  var item = rows.item(i);
	                  var result = item.value; // Check to see if this is serialized content
	                  // we need to unpack.

	                  if (result) {
	                    result = dbInfo.serializer.deserialize(result);
	                  }

	                  result = iterator(result, item.key, i + 1); // void(0) prevents problems with redefinition
	                  // of `undefined`.

	                  if (result !== void 0) {
	                    resolve(result);
	                    return;
	                  }
	                }

	                resolve();
	              }, function (t, error) {
	                reject(error);
	              });
	            });
	          })["catch"](reject);
	        });
	        executeCallback(promise, callback);
	        return promise;
	      }

	      function _setItem(key, value, callback, retriesLeft) {
	        var self = this;
	        key = normalizeKey(key);
	        var promise = new Promise$1(function (resolve, reject) {
	          self.ready().then(function () {
	            // The localStorage API doesn't return undefined values in an
	            // "expected" way, so undefined is always cast to null in all
	            // drivers. See: https://github.com/mozilla/localForage/pull/42
	            if (value === undefined) {
	              value = null;
	            } // Save the original value to pass to the callback.


	            var originalValue = value;
	            var dbInfo = self._dbInfo;
	            dbInfo.serializer.serialize(value, function (value, error) {
	              if (error) {
	                reject(error);
	              } else {
	                dbInfo.db.transaction(function (t) {
	                  tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {
	                    resolve(originalValue);
	                  }, function (t, error) {
	                    reject(error);
	                  });
	                }, function (sqlError) {
	                  // The transaction failed; check
	                  // to see if it's a quota error.
	                  if (sqlError.code === sqlError.QUOTA_ERR) {
	                    // We reject the callback outright for now, but
	                    // it's worth trying to re-run the transaction.
	                    // Even if the user accepts the prompt to use
	                    // more storage on Safari, this error will
	                    // be called.
	                    //
	                    // Try to re-run the transaction.
	                    if (retriesLeft > 0) {
	                      resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));
	                      return;
	                    }

	                    reject(sqlError);
	                  }
	                });
	              }
	            });
	          })["catch"](reject);
	        });
	        executeCallback(promise, callback);
	        return promise;
	      }

	      function setItem$1(key, value, callback) {
	        return _setItem.apply(this, [key, value, callback, 1]);
	      }

	      function removeItem$1(key, callback) {
	        var self = this;
	        key = normalizeKey(key);
	        var promise = new Promise$1(function (resolve, reject) {
	          self.ready().then(function () {
	            var dbInfo = self._dbInfo;
	            dbInfo.db.transaction(function (t) {
	              tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {
	                resolve();
	              }, function (t, error) {
	                reject(error);
	              });
	            });
	          })["catch"](reject);
	        });
	        executeCallback(promise, callback);
	        return promise;
	      } // Deletes every item in the table.
	      // TODO: Find out if this resets the AUTO_INCREMENT number.


	      function clear$1(callback) {
	        var self = this;
	        var promise = new Promise$1(function (resolve, reject) {
	          self.ready().then(function () {
	            var dbInfo = self._dbInfo;
	            dbInfo.db.transaction(function (t) {
	              tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {
	                resolve();
	              }, function (t, error) {
	                reject(error);
	              });
	            });
	          })["catch"](reject);
	        });
	        executeCallback(promise, callback);
	        return promise;
	      } // Does a simple `COUNT(key)` to get the number of items stored in
	      // localForage.


	      function length$1(callback) {
	        var self = this;
	        var promise = new Promise$1(function (resolve, reject) {
	          self.ready().then(function () {
	            var dbInfo = self._dbInfo;
	            dbInfo.db.transaction(function (t) {
	              // Ahhh, SQL makes this one soooooo easy.
	              tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {
	                var result = results.rows.item(0).c;
	                resolve(result);
	              }, function (t, error) {
	                reject(error);
	              });
	            });
	          })["catch"](reject);
	        });
	        executeCallback(promise, callback);
	        return promise;
	      } // Return the key located at key index X; essentially gets the key from a
	      // `WHERE id = ?`. This is the most efficient way I can think to implement
	      // this rarely-used (in my experience) part of the API, but it can seem
	      // inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so
	      // the ID of each key will change every time it's updated. Perhaps a stored
	      // procedure for the `setItem()` SQL would solve this problem?
	      // TODO: Don't change ID on `setItem()`.


	      function key$1(n, callback) {
	        var self = this;
	        var promise = new Promise$1(function (resolve, reject) {
	          self.ready().then(function () {
	            var dbInfo = self._dbInfo;
	            dbInfo.db.transaction(function (t) {
	              tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {
	                var result = results.rows.length ? results.rows.item(0).key : null;
	                resolve(result);
	              }, function (t, error) {
	                reject(error);
	              });
	            });
	          })["catch"](reject);
	        });
	        executeCallback(promise, callback);
	        return promise;
	      }

	      function keys$1(callback) {
	        var self = this;
	        var promise = new Promise$1(function (resolve, reject) {
	          self.ready().then(function () {
	            var dbInfo = self._dbInfo;
	            dbInfo.db.transaction(function (t) {
	              tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {
	                var keys = [];

	                for (var i = 0; i < results.rows.length; i++) {
	                  keys.push(results.rows.item(i).key);
	                }

	                resolve(keys);
	              }, function (t, error) {
	                reject(error);
	              });
	            });
	          })["catch"](reject);
	        });
	        executeCallback(promise, callback);
	        return promise;
	      } // https://www.w3.org/TR/webdatabase/#databases
	      // > There is no way to enumerate or delete the databases available for an origin from this API.


	      function getAllStoreNames(db) {
	        return new Promise$1(function (resolve, reject) {
	          db.transaction(function (t) {
	            t.executeSql('SELECT name FROM sqlite_master ' + "WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'", [], function (t, results) {
	              var storeNames = [];

	              for (var i = 0; i < results.rows.length; i++) {
	                storeNames.push(results.rows.item(i).name);
	              }

	              resolve({
	                db: db,
	                storeNames: storeNames
	              });
	            }, function (t, error) {
	              reject(error);
	            });
	          }, function (sqlError) {
	            reject(sqlError);
	          });
	        });
	      }

	      function dropInstance$1(options, callback) {
	        callback = getCallback.apply(this, arguments);
	        var currentConfig = this.config();
	        options = typeof options !== 'function' && options || {};

	        if (!options.name) {
	          options.name = options.name || currentConfig.name;
	          options.storeName = options.storeName || currentConfig.storeName;
	        }

	        var self = this;
	        var promise;

	        if (!options.name) {
	          promise = Promise$1.reject('Invalid arguments');
	        } else {
	          promise = new Promise$1(function (resolve) {
	            var db;

	            if (options.name === currentConfig.name) {
	              // use the db reference of the current instance
	              db = self._dbInfo.db;
	            } else {
	              db = openDatabase(options.name, '', '', 0);
	            }

	            if (!options.storeName) {
	              // drop all database tables
	              resolve(getAllStoreNames(db));
	            } else {
	              resolve({
	                db: db,
	                storeNames: [options.storeName]
	              });
	            }
	          }).then(function (operationInfo) {
	            return new Promise$1(function (resolve, reject) {
	              operationInfo.db.transaction(function (t) {
	                function dropTable(storeName) {
	                  return new Promise$1(function (resolve, reject) {
	                    t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {
	                      resolve();
	                    }, function (t, error) {
	                      reject(error);
	                    });
	                  });
	                }

	                var operations = [];

	                for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {
	                  operations.push(dropTable(operationInfo.storeNames[i]));
	                }

	                Promise$1.all(operations).then(function () {
	                  resolve();
	                })["catch"](function (e) {
	                  reject(e);
	                });
	              }, function (sqlError) {
	                reject(sqlError);
	              });
	            });
	          });
	        }

	        executeCallback(promise, callback);
	        return promise;
	      }

	      var webSQLStorage = {
	        _driver: 'webSQLStorage',
	        _initStorage: _initStorage$1,
	        _support: isWebSQLValid(),
	        iterate: iterate$1,
	        getItem: getItem$1,
	        setItem: setItem$1,
	        removeItem: removeItem$1,
	        clear: clear$1,
	        length: length$1,
	        key: key$1,
	        keys: keys$1,
	        dropInstance: dropInstance$1
	      };

	      function isLocalStorageValid() {
	        try {
	          return typeof localStorage !== 'undefined' && 'setItem' in localStorage && // in IE8 typeof localStorage.setItem === 'object'
	          !!localStorage.setItem;
	        } catch (e) {
	          return false;
	        }
	      }

	      function _getKeyPrefix(options, defaultConfig) {
	        var keyPrefix = options.name + '/';

	        if (options.storeName !== defaultConfig.storeName) {
	          keyPrefix += options.storeName + '/';
	        }

	        return keyPrefix;
	      } // Check if localStorage throws when saving an item


	      function checkIfLocalStorageThrows() {
	        var localStorageTestKey = '_localforage_support_test';

	        try {
	          localStorage.setItem(localStorageTestKey, true);
	          localStorage.removeItem(localStorageTestKey);
	          return false;
	        } catch (e) {
	          return true;
	        }
	      } // Check if localStorage is usable and allows to save an item
	      // This method checks if localStorage is usable in Safari Private Browsing
	      // mode, or in any other case where the available quota for localStorage
	      // is 0 and there wasn't any saved items yet.


	      function _isLocalStorageUsable() {
	        return !checkIfLocalStorageThrows() || localStorage.length > 0;
	      } // Config the localStorage backend, using options set in the config.


	      function _initStorage$2(options) {
	        var self = this;
	        var dbInfo = {};

	        if (options) {
	          for (var i in options) {
	            dbInfo[i] = options[i];
	          }
	        }

	        dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);

	        if (!_isLocalStorageUsable()) {
	          return Promise$1.reject();
	        }

	        self._dbInfo = dbInfo;
	        dbInfo.serializer = localforageSerializer;
	        return Promise$1.resolve();
	      } // Remove all keys from the datastore, effectively destroying all data in
	      // the app's key/value store!


	      function clear$2(callback) {
	        var self = this;
	        var promise = self.ready().then(function () {
	          var keyPrefix = self._dbInfo.keyPrefix;

	          for (var i = localStorage.length - 1; i >= 0; i--) {
	            var key = localStorage.key(i);

	            if (key.indexOf(keyPrefix) === 0) {
	              localStorage.removeItem(key);
	            }
	          }
	        });
	        executeCallback(promise, callback);
	        return promise;
	      } // Retrieve an item from the store. Unlike the original async_storage
	      // library in Gaia, we don't modify return values at all. If a key's value
	      // is `undefined`, we pass that value to the callback function.


	      function getItem$2(key, callback) {
	        var self = this;
	        key = normalizeKey(key);
	        var promise = self.ready().then(function () {
	          var dbInfo = self._dbInfo;
	          var result = localStorage.getItem(dbInfo.keyPrefix + key); // If a result was found, parse it from the serialized
	          // string into a JS object. If result isn't truthy, the key
	          // is likely undefined and we'll pass it straight to the
	          // callback.

	          if (result) {
	            result = dbInfo.serializer.deserialize(result);
	          }

	          return result;
	        });
	        executeCallback(promise, callback);
	        return promise;
	      } // Iterate over all items in the store.


	      function iterate$2(iterator, callback) {
	        var self = this;
	        var promise = self.ready().then(function () {
	          var dbInfo = self._dbInfo;
	          var keyPrefix = dbInfo.keyPrefix;
	          var keyPrefixLength = keyPrefix.length;
	          var length = localStorage.length; // We use a dedicated iterator instead of the `i` variable below
	          // so other keys we fetch in localStorage aren't counted in
	          // the `iterationNumber` argument passed to the `iterate()`
	          // callback.
	          //
	          // See: github.com/mozilla/localForage/pull/435#discussion_r38061530

	          var iterationNumber = 1;

	          for (var i = 0; i < length; i++) {
	            var key = localStorage.key(i);

	            if (key.indexOf(keyPrefix) !== 0) {
	              continue;
	            }

	            var value = localStorage.getItem(key); // If a result was found, parse it from the serialized
	            // string into a JS object. If result isn't truthy, the
	            // key is likely undefined and we'll pass it straight
	            // to the iterator.

	            if (value) {
	              value = dbInfo.serializer.deserialize(value);
	            }

	            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);

	            if (value !== void 0) {
	              return value;
	            }
	          }
	        });
	        executeCallback(promise, callback);
	        return promise;
	      } // Same as localStorage's key() method, except takes a callback.


	      function key$2(n, callback) {
	        var self = this;
	        var promise = self.ready().then(function () {
	          var dbInfo = self._dbInfo;
	          var result;

	          try {
	            result = localStorage.key(n);
	          } catch (error) {
	            result = null;
	          } // Remove the prefix from the key, if a key is found.


	          if (result) {
	            result = result.substring(dbInfo.keyPrefix.length);
	          }

	          return result;
	        });
	        executeCallback(promise, callback);
	        return promise;
	      }

	      function keys$2(callback) {
	        var self = this;
	        var promise = self.ready().then(function () {
	          var dbInfo = self._dbInfo;
	          var length = localStorage.length;
	          var keys = [];

	          for (var i = 0; i < length; i++) {
	            var itemKey = localStorage.key(i);

	            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {
	              keys.push(itemKey.substring(dbInfo.keyPrefix.length));
	            }
	          }

	          return keys;
	        });
	        executeCallback(promise, callback);
	        return promise;
	      } // Supply the number of keys in the datastore to the callback function.


	      function length$2(callback) {
	        var self = this;
	        var promise = self.keys().then(function (keys) {
	          return keys.length;
	        });
	        executeCallback(promise, callback);
	        return promise;
	      } // Remove an item from the store, nice and simple.


	      function removeItem$2(key, callback) {
	        var self = this;
	        key = normalizeKey(key);
	        var promise = self.ready().then(function () {
	          var dbInfo = self._dbInfo;
	          localStorage.removeItem(dbInfo.keyPrefix + key);
	        });
	        executeCallback(promise, callback);
	        return promise;
	      } // Set a key's value and run an optional callback once the value is set.
	      // Unlike Gaia's implementation, the callback function is passed the value,
	      // in case you want to operate on that value only after you're sure it
	      // saved, or something like that.


	      function setItem$2(key, value, callback) {
	        var self = this;
	        key = normalizeKey(key);
	        var promise = self.ready().then(function () {
	          // Convert undefined values to null.
	          // https://github.com/mozilla/localForage/pull/42
	          if (value === undefined) {
	            value = null;
	          } // Save the original value to pass to the callback.


	          var originalValue = value;
	          return new Promise$1(function (resolve, reject) {
	            var dbInfo = self._dbInfo;
	            dbInfo.serializer.serialize(value, function (value, error) {
	              if (error) {
	                reject(error);
	              } else {
	                try {
	                  localStorage.setItem(dbInfo.keyPrefix + key, value);
	                  resolve(originalValue);
	                } catch (e) {
	                  // localStorage capacity exceeded.
	                  // TODO: Make this a specific error/event.
	                  if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
	                    reject(e);
	                  }

	                  reject(e);
	                }
	              }
	            });
	          });
	        });
	        executeCallback(promise, callback);
	        return promise;
	      }

	      function dropInstance$2(options, callback) {
	        callback = getCallback.apply(this, arguments);
	        options = typeof options !== 'function' && options || {};

	        if (!options.name) {
	          var currentConfig = this.config();
	          options.name = options.name || currentConfig.name;
	          options.storeName = options.storeName || currentConfig.storeName;
	        }

	        var self = this;
	        var promise;

	        if (!options.name) {
	          promise = Promise$1.reject('Invalid arguments');
	        } else {
	          promise = new Promise$1(function (resolve) {
	            if (!options.storeName) {
	              resolve(options.name + '/');
	            } else {
	              resolve(_getKeyPrefix(options, self._defaultConfig));
	            }
	          }).then(function (keyPrefix) {
	            for (var i = localStorage.length - 1; i >= 0; i--) {
	              var key = localStorage.key(i);

	              if (key.indexOf(keyPrefix) === 0) {
	                localStorage.removeItem(key);
	              }
	            }
	          });
	        }

	        executeCallback(promise, callback);
	        return promise;
	      }

	      var localStorageWrapper = {
	        _driver: 'localStorageWrapper',
	        _initStorage: _initStorage$2,
	        _support: isLocalStorageValid(),
	        iterate: iterate$2,
	        getItem: getItem$2,
	        setItem: setItem$2,
	        removeItem: removeItem$2,
	        clear: clear$2,
	        length: length$2,
	        key: key$2,
	        keys: keys$2,
	        dropInstance: dropInstance$2
	      };

	      var sameValue = function sameValue(x, y) {
	        return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);
	      };

	      var includes = function includes(array, searchElement) {
	        var len = array.length;
	        var i = 0;

	        while (i < len) {
	          if (sameValue(array[i], searchElement)) {
	            return true;
	          }

	          i++;
	        }

	        return false;
	      };

	      var isArray = Array.isArray || function (arg) {
	        return Object.prototype.toString.call(arg) === '[object Array]';
	      }; // Drivers are stored here when `defineDriver()` is called.
	      // They are shared across all instances of localForage.


	      var DefinedDrivers = {};
	      var DriverSupport = {};
	      var DefaultDrivers = {
	        INDEXEDDB: asyncStorage,
	        WEBSQL: webSQLStorage,
	        LOCALSTORAGE: localStorageWrapper
	      };
	      var DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];
	      var OptionalDriverMethods = ['dropInstance'];
	      var LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);
	      var DefaultConfig = {
	        description: '',
	        driver: DefaultDriverOrder.slice(),
	        name: 'localforage',
	        // Default DB size is _JUST UNDER_ 5MB, as it's the highest size
	        // we can use without a prompt.
	        size: 4980736,
	        storeName: 'keyvaluepairs',
	        version: 1.0
	      };

	      function callWhenReady(localForageInstance, libraryMethod) {
	        localForageInstance[libraryMethod] = function () {
	          var _args = arguments;
	          return localForageInstance.ready().then(function () {
	            return localForageInstance[libraryMethod].apply(localForageInstance, _args);
	          });
	        };
	      }

	      function extend() {
	        for (var i = 1; i < arguments.length; i++) {
	          var arg = arguments[i];

	          if (arg) {
	            for (var _key in arg) {
	              if (arg.hasOwnProperty(_key)) {
	                if (isArray(arg[_key])) {
	                  arguments[0][_key] = arg[_key].slice();
	                } else {
	                  arguments[0][_key] = arg[_key];
	                }
	              }
	            }
	          }
	        }

	        return arguments[0];
	      }

	      var LocalForage = function () {
	        function LocalForage(options) {
	          _classCallCheck(this, LocalForage);

	          for (var driverTypeKey in DefaultDrivers) {
	            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {
	              var driver = DefaultDrivers[driverTypeKey];
	              var driverName = driver._driver;
	              this[driverTypeKey] = driverName;

	              if (!DefinedDrivers[driverName]) {
	                // we don't need to wait for the promise,
	                // since the default drivers can be defined
	                // in a blocking manner
	                this.defineDriver(driver);
	              }
	            }
	          }

	          this._defaultConfig = extend({}, DefaultConfig);
	          this._config = extend({}, this._defaultConfig, options);
	          this._driverSet = null;
	          this._initDriver = null;
	          this._ready = false;
	          this._dbInfo = null;

	          this._wrapLibraryMethodsWithReady();

	          this.setDriver(this._config.driver)["catch"](function () {});
	        } // Set any config values for localForage; can be called anytime before
	        // the first API call (e.g. `getItem`, `setItem`).
	        // We loop through options so we don't overwrite existing config
	        // values.


	        LocalForage.prototype.config = function config(options) {
	          // If the options argument is an object, we use it to set values.
	          // Otherwise, we return either a specified config value or all
	          // config values.
	          if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
	            // If localforage is ready and fully initialized, we can't set
	            // any new configuration values. Instead, we return an error.
	            if (this._ready) {
	              return new Error("Can't call config() after localforage " + 'has been used.');
	            }

	            for (var i in options) {
	              if (i === 'storeName') {
	                options[i] = options[i].replace(/\W/g, '_');
	              }

	              if (i === 'version' && typeof options[i] !== 'number') {
	                return new Error('Database version must be a number.');
	              }

	              this._config[i] = options[i];
	            } // after all config options are set and
	            // the driver option is used, try setting it


	            if ('driver' in options && options.driver) {
	              return this.setDriver(this._config.driver);
	            }

	            return true;
	          } else if (typeof options === 'string') {
	            return this._config[options];
	          } else {
	            return this._config;
	          }
	        }; // Used to define a custom driver, shared across all instances of
	        // localForage.


	        LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {
	          var promise = new Promise$1(function (resolve, reject) {
	            try {
	              var driverName = driverObject._driver;
	              var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver'); // A driver name should be defined and not overlap with the
	              // library-defined, default drivers.

	              if (!driverObject._driver) {
	                reject(complianceError);
	                return;
	              }

	              var driverMethods = LibraryMethods.concat('_initStorage');

	              for (var i = 0, len = driverMethods.length; i < len; i++) {
	                var driverMethodName = driverMethods[i]; // when the property is there,
	                // it should be a method even when optional

	                var isRequired = !includes(OptionalDriverMethods, driverMethodName);

	                if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {
	                  reject(complianceError);
	                  return;
	                }
	              }

	              var configureMissingMethods = function configureMissingMethods() {
	                var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {
	                  return function () {
	                    var error = new Error('Method ' + methodName + ' is not implemented by the current driver');
	                    var promise = Promise$1.reject(error);
	                    executeCallback(promise, arguments[arguments.length - 1]);
	                    return promise;
	                  };
	                };

	                for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {
	                  var optionalDriverMethod = OptionalDriverMethods[_i];

	                  if (!driverObject[optionalDriverMethod]) {
	                    driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);
	                  }
	                }
	              };

	              configureMissingMethods();

	              var setDriverSupport = function setDriverSupport(support) {
	                if (DefinedDrivers[driverName]) {
	                  console.info('Redefining LocalForage driver: ' + driverName);
	                }

	                DefinedDrivers[driverName] = driverObject;
	                DriverSupport[driverName] = support; // don't use a then, so that we can define
	                // drivers that have simple _support methods
	                // in a blocking manner

	                resolve();
	              };

	              if ('_support' in driverObject) {
	                if (driverObject._support && typeof driverObject._support === 'function') {
	                  driverObject._support().then(setDriverSupport, reject);
	                } else {
	                  setDriverSupport(!!driverObject._support);
	                }
	              } else {
	                setDriverSupport(true);
	              }
	            } catch (e) {
	              reject(e);
	            }
	          });
	          executeTwoCallbacks(promise, callback, errorCallback);
	          return promise;
	        };

	        LocalForage.prototype.driver = function driver() {
	          return this._driver || null;
	        };

	        LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {
	          var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));
	          executeTwoCallbacks(getDriverPromise, callback, errorCallback);
	          return getDriverPromise;
	        };

	        LocalForage.prototype.getSerializer = function getSerializer(callback) {
	          var serializerPromise = Promise$1.resolve(localforageSerializer);
	          executeTwoCallbacks(serializerPromise, callback);
	          return serializerPromise;
	        };

	        LocalForage.prototype.ready = function ready(callback) {
	          var self = this;

	          var promise = self._driverSet.then(function () {
	            if (self._ready === null) {
	              self._ready = self._initDriver();
	            }

	            return self._ready;
	          });

	          executeTwoCallbacks(promise, callback, callback);
	          return promise;
	        };

	        LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {
	          var self = this;

	          if (!isArray(drivers)) {
	            drivers = [drivers];
	          }

	          var supportedDrivers = this._getSupportedDrivers(drivers);

	          function setDriverToConfig() {
	            self._config.driver = self.driver();
	          }

	          function extendSelfWithDriver(driver) {
	            self._extend(driver);

	            setDriverToConfig();
	            self._ready = self._initStorage(self._config);
	            return self._ready;
	          }

	          function initDriver(supportedDrivers) {
	            return function () {
	              var currentDriverIndex = 0;

	              function driverPromiseLoop() {
	                while (currentDriverIndex < supportedDrivers.length) {
	                  var driverName = supportedDrivers[currentDriverIndex];
	                  currentDriverIndex++;
	                  self._dbInfo = null;
	                  self._ready = null;
	                  return self.getDriver(driverName).then(extendSelfWithDriver)["catch"](driverPromiseLoop);
	                }

	                setDriverToConfig();
	                var error = new Error('No available storage method found.');
	                self._driverSet = Promise$1.reject(error);
	                return self._driverSet;
	              }

	              return driverPromiseLoop();
	            };
	          } // There might be a driver initialization in progress
	          // so wait for it to finish in order to avoid a possible
	          // race condition to set _dbInfo


	          var oldDriverSetDone = this._driverSet !== null ? this._driverSet["catch"](function () {
	            return Promise$1.resolve();
	          }) : Promise$1.resolve();
	          this._driverSet = oldDriverSetDone.then(function () {
	            var driverName = supportedDrivers[0];
	            self._dbInfo = null;
	            self._ready = null;
	            return self.getDriver(driverName).then(function (driver) {
	              self._driver = driver._driver;
	              setDriverToConfig();

	              self._wrapLibraryMethodsWithReady();

	              self._initDriver = initDriver(supportedDrivers);
	            });
	          })["catch"](function () {
	            setDriverToConfig();
	            var error = new Error('No available storage method found.');
	            self._driverSet = Promise$1.reject(error);
	            return self._driverSet;
	          });
	          executeTwoCallbacks(this._driverSet, callback, errorCallback);
	          return this._driverSet;
	        };

	        LocalForage.prototype.supports = function supports(driverName) {
	          return !!DriverSupport[driverName];
	        };

	        LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {
	          extend(this, libraryMethodsAndProperties);
	        };

	        LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {
	          var supportedDrivers = [];

	          for (var i = 0, len = drivers.length; i < len; i++) {
	            var driverName = drivers[i];

	            if (this.supports(driverName)) {
	              supportedDrivers.push(driverName);
	            }
	          }

	          return supportedDrivers;
	        };

	        LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {
	          // Add a stub for each driver API method that delays the call to the
	          // corresponding driver method until localForage is ready. These stubs
	          // will be replaced by the driver methods as soon as the driver is
	          // loaded, so there is no performance impact.
	          for (var i = 0, len = LibraryMethods.length; i < len; i++) {
	            callWhenReady(this, LibraryMethods[i]);
	          }
	        };

	        LocalForage.prototype.createInstance = function createInstance(options) {
	          return new LocalForage(options);
	        };

	        return LocalForage;
	      }(); // The actual localForage object that we expose as a module or via a
	      // global. It's extended by pulling in one of our other libraries.


	      var localforage_js = new LocalForage();
	      module.exports = localforage_js;
	    }, {
	      "3": 3
	    }]
	  }, {}, [4])(4);
	});

	localforage.config({
	  name: DefaultConfig.DB_NAME,
	  version: DefaultConfig.DB_VERSION
	});

	class DataSource {
	  //returns null only if this.label is null
	  static getOrCreate(label, socket, _cmp) {
	    // if(proxyLabel){
	    // 	return DataSource.getProxy(proxyLabel, replyLabel);
	    // }
	    // return new DataSource(label, socket, _cmp);
	    if (!label) {
	      console.log("imp:", "datasource initialisation stopped - No label specified.");
	      return;
	    }

	    var _dataSrc = DataSource._getInstance(label, socket);

	    if (_dataSrc) {
	      console.log("imp:", "pre-existing datasource available - using the same.");
	      return _dataSrc;
	    }

	    return new DataSource(label, socket, _cmp);
	  }

	  constructor(label, socket, _cmp, proxy) {
	    // Object.defineProperty(this, 'data', {
	    //    get: this._get
	    // });
	    this.socketName = socket;
	    this.socket = socket ? PostOffice.sockets[socket] : null;
	    this.label = label; //label has to be unique

	    this.events = [];
	    this.data = _cmp.schema || {}; // console.debug("DataSource constructor::::::: - ", this.data);

	    this._cmp = _cmp;
	    this.comms = {
	      "init": `${this.label}-datasrc-initialised`
	    };
	    this.eventTarget = new EventTarget();
	    this.active = true;
	    return this.__init__();
	  }

	  __init__() {
	    if (!this.label) {
	      this._log("imp:", "initialisation stopped - No label specified.");

	      this.active = false;
	      return;
	    }

	    this._initLogging();

	    this._checkLocalDBorFixtures();

	    this._initSocket();

	    DataSource._instances.update(this);

	    this._log("imp:", "initialisation successful;"); // console.groupEnd();

	  }

	  _initLogging() {
	    this._logPrefix = this._cmp._logPrefix + " DataSource: ";
	    this._logStyle = "font-size: 12px; color:blue"; // console.group(this._logPrefix);
	  }

	  _log() {
	    var argumentsArr = Array.prototype.slice.call(arguments);

	    if (arguments[0] === "imp:") {
	      var msg = argumentsArr.slice(1, argumentsArr.length).join(" ");
	      console.log("imp:", "%c" + this._logPrefix, this._logStyle, msg);
	    } else {
	      console.log("%c" + this._logPrefix, this._logStyle, msg);
	    }
	  }

	  _initSocket() {
	    if (!this.socket) {
	      this._log("No socket initialised");
	    }

	    var _this = this;

	    if (this.socket) {
	      this.socket.addListener(this.label, _msg => {
	        _this._onmsg.call(_this, _msg);
	      });
	    }
	  }

	  _normalizeData(data) {
	    if (typeof this._cmp.schema == "object" && this._cmp.schema.hasOwnProperty("length")) {
	      return data; // when data is an array
	    }

	    return { ...this._cmp.schema,
	      ...data
	    };
	  }

	  _disptachMessage(data) {
	    var ev = new CustomEvent(this.label, {
	      detail: data
	    });
	    this.eventTarget.dispatchEvent(ev);
	    PostOffice.broadcastMsg(this.label, data); //to currently allow for the registered borkers from other components 
	  }

	  _updateDataInContext(data) {
	    this.data = data;

	    this._log('imp:', 'updated data in context');

	    this._disptachMessage(this.data);
	  }

	  _checkLocalDBorFixtures() {
	    var _this = this;

	    localforage.getItem(this.label).then(value => {
	      if (!value) {
	        var fixtures = _this._loadFixtures();

	        if (!fixtures) {
	          _this._log('imp:', 'no fixtures applied');
	        }

	        return;
	      }

	      _this._log('imp:', 'got locally stored data');

	      _this._updateDataInContext(value);
	    }).catch(err => {
	      _this._log('imp:', 'error checking locally stored data;', " _reason_: ", err, ";");

	      _this._loadFixtures();
	    });
	  }

	  _loadFixtures() {
	    this._log('imp:', "checking for fixtures");

	    if (!this._cmp) {
	      return;
	    }

	    var _cmp_data = this._cmp._getCmpData();

	    if (!_cmp_data) {
	      return;
	    }

	    if (_cmp_data.innerHTML == "") {
	      return;
	    }

	    try {
	      var data = JSON.parse(_cmp_data.innerHTML);

	      this._updateData(data);

	      this._log('imp:', "fixtures applied");

	      return data;
	    } catch (e) {
	      this._log("imp:", "invalid json in fixtures");

	      return;
	    }
	  } // async _get () {
	  // 	try {
	  // 	    var _data = await localforage.getItem(this.label);
	  // 	    // var _dataJSON = JSON.parse(_data);
	  // 	    // console.log("imp:","GOT DATA in DataSource === ", _data);
	  // 	    return _data;
	  // 	} catch (err) {
	  // 	    this._log("imp:","error in datasource._get --> ",err);
	  // 	    return false;
	  // 	}
	  // 	// return JSON.parse(this.data).data;
	  // }


	  _updateData(_data) {
	    this._log("attempting data update");

	    var _this = this;

	    if (this._cmp._isDebuggale()) {
	      TRASH_SCOPE.cmp_data_src = this;
	    }

	    var data = this._normalizeData(_data);

	    localforage.setItem(this.label, data).then(function (value) {
	      _this._log('imp:', 'updating data');

	      _this._updateDataInContext(value);
	    }).catch(function (err) {
	      _this._log('imp:', 'error updating data;', ' _reason_: ', err);
	    });
	  }

	  _authenticateMsg(_msg) {
	    // var auth = false;
	    // if(_msg.label === this.label){ auth = true;}
	    return _msg.label === this.label;
	  } // _onmsg (_msg) {
	  // 	if(!this._authenticateMsg(_msg)){return;}
	  // 	console.group(this._logPrefix);
	  // 	this._log("imp:", "got msg - ");
	  // 	if(!_msg.data){return;}
	  // 	var _data = null;
	  // 	try{
	  // 		_data = JSON.parse(_msg.data).data;
	  // 		// JSON.stringify(_data);  // no performance benefit to converting to strings & storing (instead additional steps)
	  // 	}
	  // 	catch(err){
	  // 		this._log("imp:", "socket data received is not valid json;", ' _reason_: ', err);
	  // 	}
	  // 	if(!_data){return;}
	  // 	console.dir(_data);
	  // 	this._updateData(_data);
	  // 	console.groupEnd()
	  // }


	  _onmsg(_msg) {
	    // var _msgStr = msgEv.data;
	    // try{
	    // 	var _msg = JSON.parse(_msgStr);
	    // }catch(e){ //not valid msg
	    // 	return;
	    // }
	    this._log("imp:", "DataSrc received msg - ", _msg);

	    if (!this._authenticateMsg(_msg)) {
	      this._log("imp:", "msg authentication failed for - ", _msg);

	      return;
	    } // console.group(this._logPrefix);


	    this._log("imp:", "DataSrc validated msg - ", JSON.stringify(_msg));

	    if (_msg.data || _msg.result) {
	      let _dataToStore = _msg.data || _msg.result;

	      console.debug(`DataSource: ${this.label} stroring the following data - `);
	      console.dir(_dataToStore);

	      this._updateData(_dataToStore);
	    } // console.groupEnd();

	  }

	}

	DataSource._instances = [];

	DataSource._instances.update = function (_entry) {
	  DataSource._instances.push(_entry);
	};

	DataSource._getInstance = function (label, socket) {
	  return DataSource._instances.find(_ds => {
	    return _ds.label == label && _ds.socketName == socket;
	  });
	}; // DataSource.getProxy = function(proxyLabel, replyLabel){

	class DOMComponent extends HTMLElement {
	  static get observedAttributes() {
	    return ['data-update'];
	  }

	  defaultLifecycleInterfaces(state) {
	    var defaultBrokers = [{
	      state: "datasrcInit",
	      label: "init-data-src-" + this.uid
	    }];

	    if (state) {
	      return defaultBrokers.filter(_broker => {
	        return _broker.state == state;
	      });
	    }

	    return defaultBrokers;
	  }

	  constructor(opt) {
	    super();

	    if (this._isDebuggale()) {
	      DefaultConfig.DEBUG_SCOPE._debugCmp = this;
	    }

	    var opt = opt || {};
	    this.data = this.constructor.schema || {};
	    this.schema = this.constructor.schema || {};
	    this.domElName = this.constructor.domElName || opt.domElName;
	    this.interfaces = this.constructor.interfaces || opt.interfaces;
	    this.stateSpace = this.constructor.stateSpace || opt.stateSpace;
	    this.LEXICON = this.constructor.LEXICON || {}; // this.interfaceSpecs = this.constructor.interfaceSpecs || {};

	    this.advertiseAs = this.constructor.advertiseAs;
	    this.transitionSpace = {}; // this.autoInitLexiconSubscriptions = this.constructor.autoInitLexiconSubscriptions || true;

	    this.uid = this.uid || randomString(8);
	    this.composedScope = {};
	    this.uiVars = {};
	    this.data_src = null;
	    this.current_state = "idle";
	    this.opt = opt;
	    this.eventTarget = new EventTarget();
	    this.interface = PostOffice.addSocket(EventTarget, this.label());

	    this._preInit();
	  }

	  label() {
	    return this.domElName + " #" + this.uid;
	  }

	  _setupDomContentLoadedCallback() {
	    document.addEventListener("DOMContentLoaded", ev => {
	      if (this.onDomContentLoaded) {
	        this.onDomContentLoaded();
	      }
	    });
	  }

	  _setupAdvertisedInterface() {
	    if (this.advertiseAs) {
	      this.advertisedInterface = PostOffice.getOrCreateInterface(this.advertiseAs); // Object.keys(this.LEXICON).forEach((key)=>{

	      for (var key in this.LEXICON) {
	        this.advertisedInterface.on(`${key}`, inflectedMsg => {
	          console.debug("DEBUG:", `Interface.${this.advertiseAs}:::${key} received msg - `, inflectedMsg);

	          if (this[key]) {
	            this[key].call(this, inflectedMsg);
	          } else {
	            console.warn(`${this._logPrefix} No operation = ${key} availble in the component but defined in lexicon`);
	          }
	        });
	      }
	      this.advertisedInterface.addInterfaceSpec(this.LEXICON);
	    }
	  }

	  _preInit() {
	    this._setupDomContentLoadedCallback();

	    this._setupAdvertisedInterface(); // if(this.autoInitLexiconSubscriptions){
	    // 	this._initLexiconSubscriptions();
	    // }

	  }

	  connectedCallback() {
	    var opt = this.opt;

	    this.__init__(opt);

	    if (this.onConnect) {
	      this.switchToIdleState(); //default state switch to idle (NOTE - before calling the onConnect method of the instance)

	      this.onConnect.call(this);
	    }
	  }

	  _onDataSrcUpdate(ev) {
	    this._log("imp:", this.data_src.label, "- ", "component data update signal received");

	    this.interface.dispatchMessage("datasrc-update", {
	      uiVars: this.uiVars,
	      data: this.data
	    });
	    this.render();
	  }

	  attributeChangedCallback() {
	    this.render();
	  }

	  __init__(opt) {

	    this._initLogging();

	    this._initStateSpace();

	    this._log("imp:", "DOMELName = ", this.domElName);

	    this._log("imp:", "component data/schema = ");

	    console.dir(this.data);

	    this._log("initialising with ", opt);

	    this.shadow = this.attachShadow({
	      mode: opt.domMode || "open"
	    });
	    this.markupFunc = this.constructor.markupFunc || opt.markupFunc;
	    this.styleMarkup = this.constructor.styleMarkup || opt.styleMarkup;
	    this.processData = this.constructor.processData || opt.processData;

	    if (!this.markupFunc) {
	      this._log("----------initialisation stopped - no markupFunc found---------------");

	      return;
	    }

	    this._composeAncesstry();

	    this._initLifecycle(opt);

	    this._log("imp:", "initialised");

	    console.groupEnd();
	  }

	  getParent() {
	    return DOMComponentRegistry$1.findInstance(this.parent);
	  } // _nameChild(_instance) {
	  //   	var name = randomString(8);
	  //   	_instance.uid = name;
	  //   	this.childCmps.push(_instance);
	  // }


	  async _composeAncesstry() {
	    try {
	      await DOMComponentRegistry$1.update(this);
	    } catch (e) {
	      console.warn(`WARN: Failed to compose ancesstry of ${this.domElName} - `, e);
	    }

	    if (this.attributes.parent) {
	      this.parent = this.attributes.parent.value;

	      if (this.attributes.childscope) {
	        let childscopeKey = this.attributes.childscope.value;
	        this.getParent().composedScope[childscopeKey] = this;
	        this.getParent().interface.dispatchMessage("child-composed", childscopeKey);
	      }
	    }

	    console.log("composed ancesstry ", this.domElName, ", ", this.uid);
	  }

	  _initLogging() {
	    this._logPrefix = this.label() + ":";
	    this._logStyle = "font-size: 12px; color:darkred";
	    console.group(this._logPrefix);
	  }

	  _log() {
	    var argumentsArr = Array.prototype.slice.call(arguments);

	    if (arguments[0] === "imp:") {
	      var msg = argumentsArr.slice(1, argumentsArr.length).join(" ");
	      console.log("imp:", "%c" + this._logPrefix, this._logStyle, msg);
	    } else {
	      console.log("%c" + this._logPrefix, this._logStyle, msg);
	    }
	  }

	  _isDebuggale() {
	    return this.hasAttribute("debug");
	  }

	  _getCmpData() {
	    return this.querySelector("component-data");
	  }

	  _getDomNode() {
	    return document.querySelector("[data-component='" + this.uid + "']");
	  }

	  _initComponentDataSrc(opt) {
	    if (this.data_src) {
	      this._log("imp:", "preventing reinitialisation of component data. (already initialised).");

	      return;
	    }

	    var _cmp_data = this._getCmpData();

	    if (_cmp_data) {
	      var label = _cmp_data.getAttribute("label");

	      var socket = _cmp_data.getAttribute("socket");

	      this._log("imp:", "initialising component data source"); // this.data_src = new DataSource(label, socket, this, proxy);


	      this.__initDataSrcInterface(label, socket);
	    } else {
	      //happens when _cmd_data is null or label is null
	      this._log("imp:", "component data is null, directly rendering the component.");

	      this.render();
	    }
	  }

	  __initDataSrcInterface(label, socket) {
	    var _this = this;

	    this.data_src = DataSource.getOrCreate(label, socket, this);

	    if (this.data_src) {
	      Object.defineProperty(this, 'data', {
	        get: () => {
	          return this._postProcessCmpData.call(this, this.data_src.data);
	        }
	      });
	    }

	    this.broker = this.data_src.eventTarget.addEventListener(label, ev => {
	      _this._onDataSrcUpdate.call(_this, ev);
	    }); // this.broker = PostOffice.addGlobalListener(label, (_msg)=>{
	    // 	_this._onDataSrcUpdate.call(_this, _msg)
	    // });
	  }

	  _initStateSpace() {
	    this.stateSpace = { ...this.defaultStateSpace,
	      ...this.stateSpace
	    };
	  }

	  addInterface() {}

	  _initInterfaces(opt) {
	    if (!this.interfaces) {
	      return;
	    }

	    var _this = this;

	    for (var key in this.interfaces) {
	      PostOffice.addGlobalListener(`${this.uid}-${key}`, _msg => {
	        var response = _this.interfaces[key](_msg);

	        PostOffice.broadcastMsg(`${_msg.sender}-${key}`, new Muffin.ComponentMsg({
	          data: response
	        }));
	      });
	    } // var _this = this;
	    // this.defaultLifecycleInterfaces().map((_entry)=>{
	    // 	PostOffice.addGlobalListener( _entry.label, (ev)=>{
	    // 		_this._initComponentDataSrc.call(_this);
	    // 	});
	    // });

	  }

	  _initUiVars(opt) {// Object.defineProperty(this, 'uiVars', {
	    //        set: (value)=>{
	    //        	this['uiVars']=value;
	    //        	this.render();
	    //        }
	    //    });
	  }

	  _getRouteContext() {
	    var closestRoute = this.closest("[route]") || this._getDomNode().closest("[route]");

	    if (!closestRoute) {
	      return false;
	    }

	    var routeName = closestRoute.getAttribute("route");
	    return this.router.getRoute(routeName);
	  }

	  _initRouteInterface(opt) {
	    //updation of routeVars
	    if (!this.router) {
	      return;
	    } // var routeContext = this._getRouteContext();
	    // if(!routeContext){return;}
	    // var routeSocket = PostOffice.sockets[`${routeContext.socketName}`];
	    // if(!routeSocket){return;}


	    var _this = this; // routeSocket.addListener("onBeforeLoad",(ev)=>{
	    // 	_this.routeVars = ev.detail;
	    // 	if(_this.onBeforeRouteLoad){
	    // 		_this.onBeforeRouteLoad();
	    // 	}
	    // });


	    this.router._socket.on("onBeforeLoad", msg => {
	      //this.router._socket - enables passing routeVars without specifying each route level config (socketName)  
	      _this.routeVars = msg; //all routes with this router will get this routeVars unlike the commented approach above.

	      if (_this.onBeforeRouteLoad) {
	        _this.onBeforeRouteLoad();
	      }
	    });
	  }

	  _initLifecycle(opt) {
	    this._initUiVars(opt);

	    this._initInterfaces(opt);

	    this._initComponentDataSrc(opt);

	    this._initRouteInterface(opt);
	  }

	  _postProcessCmpData(newData) {
	    // console.group(this._logPrefix+"postProcessData");
	    this._log("imp:", "Post-Processing cmp data (label = " + this.data_src.label + "), data = ");

	    console.dir(newData);

	    if (this.processData) {
	      //processData can be defined when creating components (see inventory_block.js - MedicineThumbnailList)
	      try {
	        this._processedData = this.processData.call(this, newData);
	        return this._processedData;
	      } catch (e) {
	        this._log("imp:", "could not post process CMP data - ", e, "data = ", JSON.stringify(newData), " & schema = ", JSON.stringify(this.schema), " & this.data_src.data = ", JSON.stringify(this.data_src.data));

	        return newData;
	      }
	    }

	    return newData; // console.groupEnd();
	  }

	  __processStyleMarkup() {
	    if (!this.styleMarkup) {
	      return;
	    } // if(this._renderedStyle){return;}


	    try {
	      var _renderedStyleString = this.styleMarkup(`[data-component=${this.uid}]`, this.current_state); //called only once


	      this._renderedStyle = stringToHTMLFrag(_renderedStyleString);
	    } catch (e) {
	      this._log("imp:", "error in rendering style - ", e);

	      return;
	    }

	    this._renderedFrag.firstElementChild.prepend(this._renderedStyle);
	  }

	  __processRenderedFragEventListeners() {
	    var _this = this;

	    this._events = {
	      "onchange": [],
	      "onclick": [],
	      "oninput": [],
	      "onscroll": [],
	      "onkeyup": [],
	      "onload": [],
	      "contextmenu": []
	    };

	    this._renderedFrag.querySelectorAll("[on-change]").forEach(_el => {
	      _el.onchange = function (ev) {
	        // _el.attributes["on-change"].value.call(_this);
	        _this[_el.attributes["on-change"].value].call(_this, _el, ev);
	      };

	      this._events.onchange.push(_el.attributes["on-change"]);
	    });

	    this._renderedFrag.querySelectorAll("[on-input]").forEach(_el => {
	      _el.oninput = function (ev) {
	        _this[_el.attributes["on-input"].value].call(_this, _el, ev);
	      };

	      this._events.oninput.push(_el.attributes["on-input"]);
	    });

	    this._renderedFrag.querySelectorAll("[on-click]").forEach(_el => {
	      _el.onclick = function (ev) {
	        _this[_el.attributes["on-click"].value].call(_this, _el, ev);
	      };

	      this._events.onclick.push(_el.attributes["on-click"]);
	    });

	    this._renderedFrag.querySelectorAll("[on-scroll]").forEach(_el => {
	      _el.onscroll = function (ev) {
	        _this[_el.attributes["on-scroll"].value].call(_this, _el, ev);
	      };

	      this._events.onscroll.push(_el.attributes["on-scroll"]);
	    });

	    this._renderedFrag.querySelectorAll("[on-keyup]").forEach(_el => {
	      _el.onkeyup = function (ev) {
	        _this[_el.attributes["on-keyup"].value].call(_this, _el, ev);
	      };

	      this._events.onkeyup.push(_el.attributes["on-keyup"]);
	    });

	    this._renderedFrag.querySelectorAll("[on-load]").forEach(_el => {
	      _el.onload = function (ev) {
	        _this[_el.attributes["on-load"].value].call(_this, _el, ev);
	      };

	      this._events.onload.push(_el.attributes["on-load"]);
	    });

	    this._renderedFrag.querySelectorAll("[on-contextmenu]").forEach(_el => {
	      _el.oncontextmenu = function (ev) {
	        ev.preventDefault();

	        _this[_el.attributes["on-contextmenu"].value].call(_this, _el, ev);
	      };

	      this._events.contextmenu.push(_el.attributes["on-contextmenu"]);
	    });
	  }

	  _getChildCmps() {
	    var cmp_dom_node = this._getDomNode();

	    if (!cmp_dom_node) {
	      return [];
	    }

	    return Array.from(cmp_dom_node.querySelectorAll('[data-component]'));
	  }

	  _processChildCmps() {
	    var _this = this;

	    var childCmpsInDOM = _this._getChildCmps();

	    if (childCmpsInDOM.length == 0) {
	      return;
	    }

	    this._log("imp:", "PROCESSING CHILD CMPS");

	    var cmpSelector = DOMComponentRegistry$1.list().map(_entry => {
	      return _entry.name;
	    }).join(",");

	    var childCmpsInRenderedFrag = _this._renderedFrag.querySelectorAll(cmpSelector);

	    childCmpsInRenderedFrag.forEach((_childCmpInFrag, fragCmpIdx) => {
	      var _childCmpInDom = childCmpsInDOM.find((_cmp, domCmpIdx) => {
	        return _cmp.constructedFrom.domElName == _childCmpInFrag.tagName.toLowerCase();
	      });

	      if (_childCmpInDom) {
	        _childCmpInFrag.replaceWith(_childCmpInDom); // _childCmpInDom.render();

	      } // childCmpsInDOM.splice(domCmpIdx, 1);
	      // childCmpsInDOM.shift();

	    }); // childCmpsInDOM.forEach((_childCmp, idx)=>{ //would not work if 2 child elements of the same type
	    //   try{
	    //     _this._renderedFrag.querySelector(_childCmp.dataset.cmpname).replaceWith(_childCmp);
	    //   }catch(e){}
	    // })
	  } // advertiseInterface() {
	  // 	this.advertisedInterface = PostOffice.getOrCreateInterface(this.ad, this.constructor.interfaceSpecs);
	  // }


	  switchState(stateName) {
	    var targetState = this.stateSpace[stateName];

	    if (!targetState) {
	      return;
	    }

	    var prevStateName = this.current_state;

	    if (targetState.apriori.includes(prevStateName)) {
	      //only these transitions are allowed. this is to ensure reliability of behviours.
	      var transition = this.transitionSpace[`${prevStateName} <to> ${stateName}`];

	      if (transition) {
	        try {
	          transition.call(this);

	          this._log("imp:", "Transition fired - ", `${prevStateName} <to> ${stateName}`); //if transition is successful (doesn't throw any error) -->


	          this.current_state = stateName;
	          this.uiVars.state = {
	            name: stateName,
	            meta: targetState
	          };
	          this.render();
	        } catch (e) {
	          console.error("Transition error - ", e);
	        }
	      } else {
	        this.current_state = stateName;
	        this.uiVars.state = {
	          name: stateName,
	          meta: targetState
	        };
	        this.render();
	      }

	      this.interface.dispatchMessage("state-change", {
	        uiVars: this.uiVars,
	        data: this.data
	      });

	      this._log("imp:", "Switched State To - ", this.current_state);
	    }

	    return this.current_state; // this._updateDomNodeState();
	    // if(state.informParent){
	    //     this._broadCastToParent(this.uiVars.current_state);
	    // }
	  }

	  switchToIdleState({
	    stateName = "idle"
	  } = {}) {
	    var targetState = this.stateSpace[stateName];

	    if (!targetState) {
	      return;
	    }

	    this.current_state = stateName;
	    this.uiVars.state = {
	      name: stateName,
	      meta: targetState
	    };
	    return this.current_state;
	  }

	  __processRootMarkup() {
	    this._renderedFrag.firstElementChild.dataset.component = this.uid; // this.dataset.uid = this.uid;

	    Reflect.defineProperty(this._renderedFrag.firstElementChild, "constructedFrom", {
	      value: this
	    }); // this._renderedFrag.querySelectorAll('[uiVar]').forEach((uiVarEl, idx)=>{
	    // 	uiVarEl.dataset.uid = `${this.uid}-uiVar-${idx}`; 
	    // });
	  }

	  __processConditionalMarkup(_el) {
	    //to be optimised later
	    if (!_el) {
	      this._renderedFrag.querySelectorAll("[render-if]").forEach(_el => {
	        if (!eval(_el.getAttribute("render-if"))) {
	          _el.style.display = "none";
	        }
	      });
	    } else {
	      // console.log("imp:","conditional markup of - ",  _el, " ::::====:::: ", eval(_el.getAttribute("render-if")));
	      if (!eval(_el.getAttribute("render-if"))) {
	        _el.style.display = "none";
	      } else {
	        _el.style.display = "block";
	      }
	    }
	  }

	  __isDOMTreeEqual(node1, node2) {
	    //light check - only 1st depth
	    if (node1.childElementCount != node2.childElementCount) {
	      return false;
	    }

	    var isEqual = true;

	    for (var idx in Array.from(node1.children)) {
	      // if(node1.constructedFrom.debugPatchDom){
	      // 	console.log("imp:", "checking children __isDOMTreeInequal between - ", node1.children[idx], " & ", node2.children[idx]);
	      // }
	      var childNode1 = node1.children[idx];
	      var childNode2 = node2.children[idx];

	      if (childNode1.constructedFrom || childNode2.constructedFrom) {
	        continue;
	      }

	      if (childNode1.childElementCount != childNode2.childElementCount) {
	        isEqual = false;
	        break;
	      }
	    }

	    return isEqual;
	  }

	  __patchUnequalAttributes(node1, node2) {
	    if (node1.attributes == node2.attributes) {
	      return;
	    }

	    var ignoreAttributeList = [];
	    Array.from(node1.attributes).forEach(_node1Attr => {
	      if (ignoreAttributeList.includes(_node1Attr.name)) {
	        return;
	      }

	      if (!node2.attributes[_node1Attr.name]) {
	        //attribute is not present in node2
	        node2.setAttribute(_node1Attr.name, _node1Attr.value);
	      } else if (node2.getAttribute(_node1Attr.name) != _node1Attr.value) {
	        //attribute value is different in node2
	        // console.debug("patching attribute - ", _node1Attr.name, `: (old value = ${node2.attributes[_node1Attr.name].value}, new value = ${_node1Attr.value})`);
	        node2.setAttribute(_node1Attr.name, _node1Attr.value); // node2.attributes[_node1Attr.name] = _node1Attr.value;
	      } //if attribute present && value is same --> do no patching

	    });
	  }

	  async __findAndReplaceUnequalNodes(root1, root2) {
	    //not used currently
	    var _this = this; // console.log("imp:", "patchDom: comparing nodes - ", root1, root2);


	    if (root2.hasAttribute("render-if")) {
	      this.__processConditionalMarkup(root2);
	    } // if(root2.constructedFrom && root2.constructedFrom.domElName != this.domElName){
	    // 	return;
	    // }


	    this.__patchUnequalAttributes(root1, root2);

	    if (root1.children.length == 0 || root2.children.length == 0) {
	      // console.log("imp:", "patchDom: replacing node - ", root2, " with ", root1);
	      root2.replaceWith(root1);
	      return;
	    }

	    Array.from(root1.children).forEach((_root1ChildNode, idx) => {
	      var _root2ChildNode = root2.children[idx];

	      if (_root1ChildNode.isEqualNode(_root2ChildNode)) {
	        return; //don't render in this case
	      }

	      if (_root2ChildNode.attributes.renderonlyonce) {
	        return;
	      }

	      if (_root2ChildNode.hasOwnProperty("constructedFrom")) {
	        if (_root1ChildNode.attributes.volatile) {
	          _root2ChildNode.replaceWith(_root1ChildNode);
	        }

	        return;
	      } // _this.__findAndReplaceUnequalNodes(_root1ChildNode, _root2ChildNode);


	      if (!this.__isDOMTreeEqual(_root1ChildNode, _root2ChildNode)) {
	        _root2ChildNode.replaceWith(_root1ChildNode);
	      } else {
	        _this.__findAndReplaceUnequalNodes(_root1ChildNode, _root2ChildNode);
	      } // if(_root2ChildNode.hasOwnProperty("constructedFrom")){return;}

	    });
	  }

	  __patchRootNodeAttrs(rootNode) {
	    rootNode.dataset.state = this.current_state;
	  }

	  __patchStyle(rootNode) {
	    var _indomStyle = rootNode.querySelector('style');

	    var _renderedStyle = this._renderedFrag.querySelector('style');

	    if (_renderedStyle && !_indomStyle.isEqualNode(_renderedStyle)) {
	      _indomStyle.replaceWith(_renderedStyle);
	    }
	  }

	  __patchDOMCompletely(cmp_dom_node) {
	    this.__processConditionalMarkup();

	    cmp_dom_node.replaceWith(this._renderedFrag);
	  }

	  __patchDOM() {
	    if (this.attributes.stop) {
	      DefaultConfig.DEBUG_SCOPE.stoppedCmp = this;
	      return;
	    }

	    var in_dom = this._getDomNode();

	    var cmp_dom_node = in_dom || this;

	    try {
	      var _renderedFragRootNode = this._renderedFrag.firstElementChild;

	      if (cmp_dom_node.isEqualNode(_renderedFragRootNode)) {
	        return;
	      }

	      if (in_dom) {
	        this.__patchRootNodeAttrs(cmp_dom_node);

	        if (cmp_dom_node.attributes.renderonlyonce) {
	          this.__patchStyle(cmp_dom_node);

	          console.log("imp:", "Not patching dom - as renderonlyonce declared in rootNode");
	          return;
	        }

	        if (this.__isDOMTreeEqual(cmp_dom_node, _renderedFragRootNode)) {
	          this.__findAndReplaceUnequalNodes(_renderedFragRootNode, cmp_dom_node);
	        } else {
	          this.__patchDOMCompletely(cmp_dom_node);
	        }
	      } else {
	        this.__patchDOMCompletely(cmp_dom_node);
	      }
	    } catch (e) {
	      this._log("imp:", "(ERROR) - component rendering failed with the following error - \n", e);
	    }
	  }

	  async render() {
	    //called from either - 1.) datasrcupdate, 2.) datasrc is null after init, 3.) onattributechange, 4.) stateChange
	    this._log("----------rendering component start---------------");

	    try {
	      var _rendered = this.markupFunc.call(this, this.data, this.uid, this.uiVars, this.routeVars, this.constructor);
	    } catch (e) {
	      console.error(this._logPrefix, "error in rendering component - ", e);
	      return;
	    } // this.shadow.innerHTML = _rendered;
	    // this._log("imp:","rendered markupFunc");


	    this._renderedFrag = stringToHTMLFrag(_rendered); // this._log("imp:","rendered fragment");
	    // this._processChildCmps();

	    this.__processRootMarkup();

	    this.__processStyleMarkup();

	    this.__processRenderedFragEventListeners(); // this._log("imp:","renderered fragment uid");


	    this.__patchDOM();

	    DefaultConfig.DEBUG_SCOPE.debugLastRenderedCmp = this;

	    this._log("----------rendering component end-----------------");

	    if (this.postRender) {
	      this.postRender();
	    }

	    return this;
	  }

	}

	Object.defineProperty(DOMComponent, "defaultStateSpace", {
	  enumerable: true,
	  writable: true,
	  value: {
	    "idle": {
	      apriori: []
	    }
	  }
	});

	DOMComponent.prototype._binding = function (b) {
	  var _this = this;

	  this.element = b.element;
	  this.value = b.object[b.property];
	  this.attribute = b.attribute;

	  this.valueGetter = function () {
	    return _this.value;
	  };

	  this.valueSetter = function (val) {
	    _this.value = val;
	    _this.element[_this.attribute] = val;
	  };

	  Object.defineProperty(b.object, b.property, {
	    get: this.valueGetter,
	    set: this.valueSetter
	  });
	  b.object[b.property] = this.value;
	  this.element[this.attribute] = this.value;
	};

	DOMComponent._composeSelf = function () {
	  DOMComponentRegistry$1.register(this.prototype.constructor);
	};

	DOMComponent._compose = function () {
	  this.prototype.constructor._composeSelf();
	};

	Object.defineProperty(DOMComponent, "compose", {
	  //what if 2 parents are composing the same child
	  get: function () {
	    return this._compose;
	  },
	  set: function (composeFunc) {
	    this._compose = function () {
	      // console.log("imp:","Updating Compose function of component ",this);
	      composeFunc.call(this);

	      this.prototype.constructor._composeSelf();
	    };
	  }
	});

	function Router(options) {
	  var options = options || {};
	  this.routes = [];
	  this.toggleClass = options.toggleClass || '_active';
	  this.routeDelimiter = options.routeDelimiter || "?";
	  this.containment = document;

	  this.__init__();
	}

	Router.prototype.__init__ = function () {

	  this._initLogging();

	  this._initListeners();

	  this._initSocket();

	  this._log('router initialized');
	};

	Router.prototype._initLogging = function () {
	  this._logPrefix = "Router: ";
	  this._logStyle = "font-size: 12px; color:green";
	};

	Router.prototype._log = function () {
	  var argumentsArr = Array.prototype.slice.call(arguments);

	  if (arguments[0] === "imp:") {
	    var msg = argumentsArr.slice(1, argumentsArr.length).join(" ");
	    console.log("imp:", "%c" + this._logPrefix, this._logStyle, msg);
	  } else {
	    console.log("%c" + this._logPrefix, this._logStyle, msg);
	  }
	};

	Router.prototype._initSocket = function () {
	  this._socket = PostOffice.addSocket(EventTarget, "element_router");
	};

	Router.prototype._getParamsObjFromPathString = function (pathString) {
	  var paramsStrList = pathString.split("?").pop().split("&");
	  paramsStrList.shift();
	  return paramsStrList.map(_paramStr => {
	    var paramSplit = _paramStr.split("=");

	    var paramObj = {};
	    paramObj[paramSplit[0]] = paramSplit[1];
	    return paramObj;
	  }).reduce((accum, curr) => {
	    return { ...accum,
	      ...curr
	    };
	  }, {});
	};

	Router.prototype.getCurrentRouteParams = function () {
	  if (window.history.state) {
	    return this._getParamsObjFromPathString(window.history.state.url);
	  } else {
	    //if url is loaded by directly entering into the address bar
	    return this._getParamsObjFromPathString(window.location.search);
	  }
	};

	Router.prototype._getRouteNameFromWindowLocation = function () {
	  var routePath = window.location.search.split("?").pop().split("&").shift() || this.getDefaultRoute().name;
	  return routePath;
	};

	Router.prototype._getRouteNameFromHistoryState = function () {
	  return window.history.state.name;
	};

	Router.prototype.getCurrentRouteName = function () {
	  if (window.history.state) {
	    return this._getRouteNameFromHistoryState();
	  } else {
	    //if url is loaded by directly entering into the address bar
	    return this._getRouteNameFromWindowLocation();
	  }
	};

	Router.prototype._initListeners = function () {
	  var _this = this;

	  window.onpopstate = function () {
	    //not called wgeb durectly called by script (only called on browser actions by user)
	    _this._log("imp:", "onpopstate start");

	    var routeName = _this.getCurrentRouteName();

	    var routeObj = _this.getRoute(routeName);

	    _this._log("imp:", "onpopstate end");

	    _this.triggerCustomEvent(window, 'stateChange', {
	      state: routeObj
	    });
	  };

	  window.addEventListener('stateChange', function (ev) {
	    _this.onStateChange.call(_this, ev);
	  });
	  document.addEventListener('DOMContentLoaded', e => {
	    _this.go(_this.getCurrentRouteName(), _this.getCurrentRouteParams());
	  }, false);
	};

	Router.prototype.getDefaultRoute = function () {
	  return this.routes.filter(function (route) {
	    return route.defaultRoute === true;
	  })[0] || {};
	};

	Router.prototype.addDefaultRoute = function (route_name, url_params) {
	  var routeObj = this.getOrCreateRoute(route_name, url_params);
	  routeObj.defaultRoute = true;
	};

	Router.prototype.getRoute = function (route_name) {
	  return this.routes.filter(function (route) {
	    return route.name == route_name;
	  })[0];
	};

	Router.prototype.createOrReplaceRoute = function (routeObj) {
	  var idx = this.routes.findIndex(route => {
	    return route.name == routeObj.name;
	  });

	  if (idx >= 0) {
	    this.routes.splice(idx, 1);
	  }

	  this.addRoute(routeObj);
	};

	Router.prototype.closeRoute = function (routeObj, routeEl) {
	  var _this = this;

	  if (!routeObj) {
	    return;
	  }

	  routeObj.onbeforeexit ? routeObj.onbeforeexit.call(_this, routeEl) : null;
	  routeEl.classList.remove(_this.toggleClass);
	  routeObj.active = false;
	}; // Router.prototype.togglePage = function(target_page, target_route){
	// 	var _this = this;
	// }


	Router.prototype.onStateChange = function (ev) {
	  // var _this = this;
	  // var e = e.detail ? e.detail.srcEvent : e;
	  // eee = ev;
	  var state = ev.detail.state || this.getDefaultRoute();
	  var routeObj = this.getRoute(state.name);

	  if (!routeObj) {
	    this._log('no such route');

	    return;
	  }

	  this._onBeforeLoad(routeObj);

	  this.toggleRouteEl(routeObj);
	};

	Router.prototype.getRouteEl = function (routeName) {
	  return this.containment.querySelector('[route=' + routeName + ']');
	};

	Router.prototype.getCurrentScope = function (routeObj) {
	  var scope = this.containment;

	  if (this.isSubRoute(routeObj)) {
	    var ancesstorRouteElems = this.getRouteAncesstors(routeObj.name).elems;
	    scope = ancesstorRouteElems.slice(-1)[0]; //direct parent
	  }

	  routeObj.scope = scope;
	  return scope;
	};

	Router.prototype._getActiveRouteElemsInScope = function (scope) {
	  var scope = scope || this.containment;
	  return scope.querySelectorAll(`.${this.getToggleClass()}[route]`);
	};

	Router.prototype._closeAllActiveRoutesInScope = function (scope) {
	  var _this = this;

	  var currently_active_route_elems_in_scope = this._getActiveRouteElemsInScope(scope);

	  currently_active_route_elems_in_scope.forEach(function (currently_active_route_el, currently_active_route) {
	    var currently_active_route_obj = _this.getRoute(currently_active_route_el.getAttribute('route'));

	    _this.closeRoute(currently_active_route_obj, currently_active_route_el);
	  });
	};

	Router.prototype._onBeforeLoad = function (routeObj) {
	  if (routeObj.socketName && PostOffice.sockets[routeObj.socketName]) {
	    PostOffice.sockets[routeObj.socketName].dispatchMessage("onBeforeLoad", {
	      name: routeObj.name,
	      url: routeObj.url,
	      params: routeObj.params,
	      active: routeObj.active
	    });
	  }

	  this._socket.dispatchMessage("onBeforeLoad", {
	    name: routeObj.name,
	    url: routeObj.url,
	    params: routeObj.params,
	    active: routeObj.active
	  });

	  if (routeObj.onBeforeLoad) {
	    routeObj.onBeforeLoad.call(this, routeObj);
	  }
	};

	Router.prototype.toggleRouteEl = function (routeObj) {
	  var routeEl = this.getRouteEl(routeObj.name);

	  if (!routeEl) {
	    this._log('imp:', 'no elements with this route attr found');

	    return;
	  }

	  var _this = this;

	  var scope = this.getCurrentScope(routeObj);

	  this._closeAllActiveRoutesInScope(scope); //activate all the ancesstor routes to this route --> 


	  var ancesstorRouteElems = this.getRouteAncesstors(routeObj.name).elems;
	  ancesstorRouteElems.forEach(_routeEl => {
	    var _parentScope = _this.getCurrentScope(_this.getOrCreateRoute(_routeEl.getAttribute("route")));

	    _this._closeAllActiveRoutesInScope(_parentScope);

	    _routeEl.classList.add(this.getToggleClass());
	  });
	  routeEl.classList.add(this.getToggleClass());
	  routeObj.active = true;

	  this._onload(routeObj, routeEl);

	  this.active_route = routeObj.name;

	  this._log('imp:', 'toggled element with route attr = ', this.active_route);
	};

	Router.prototype._onload = function (target_route, target_page) {
	  window.scrollTo(0, 0);

	  if (target_route.onload) {
	    target_route.onload.call(this, target_page, target_route);
	  }

	  if (this.onroutechange) {
	    this.onroutechange(target_route, target_page);
	  }
	};

	Router.prototype.triggerCustomEvent = function (target, eventName, details) {
	  if (!target) {
	    return;
	  }

	  if (!eventName) {
	    return;
	  }

	  var evnt = new CustomEvent(eventName, {
	    detail: details
	  });
	  target.dispatchEvent(evnt);
	};

	Router.prototype.updateState = function (routeObj) {
	  var _this = this;

	  if (this.isSubRoute(routeObj)) {
	    var ancesstorRouteNames = this.getRouteAncesstors(routeObj.name).routes;
	    routeObj.url = this.routeDelimiter + ancesstorRouteNames.concat(routeObj.name).join("/");

	    _this._log("updating historyUrl for sub-route == ", routeObj.url);
	  } else {
	    routeObj.url = `${this.routeDelimiter}${routeObj.name}`;

	    _this._log("updating historyUrl for route: ", routeObj.url);
	  }

	  if (routeObj.params) {
	    for (var key in routeObj.params) {
	      routeObj.url += "&" + String(key) + "=" + String(routeObj.params[key]);
	    }
	  }

	  var historyTitle = routeObj.name;
	  var historyUrl = routeObj.url;
	  var historyData = {
	    name: historyTitle,
	    url: historyUrl
	  };

	  _this._log("updating history State: ", JSON.stringify(historyData));

	  try {
	    window.history.pushState(historyData, historyTitle, historyUrl);
	  } catch (e) {
	    _this._log("imp:", "ERROR updating History");

	    return;
	  }

	  _this._log("imp:", "history updated");
	};

	Router.prototype.back = function () {
	  window.history.back();
	};

	Router.prototype.isSubRoute = function (routeObj) {
	  var routeEl = this.getRouteEl(routeObj.name);

	  if (!routeEl) {
	    return false;
	  }

	  return true;
	  return routeEl.hasAttribute('sub-route') ? true : false;
	};

	Router.prototype.getToggleClass = function (route_name) {
	  var _this = this;

	  var routeEl = this.getRouteEl(route_name);

	  if (!routeEl) {
	    return _this.toggleClass;
	  }

	  return routeEl.hasAttribute('route-class') ? routeEl.getAttribute('route-class') : _this.toggleClass;
	};

	Router.prototype.getRouteAncesstors = function (route_name) {
	  var nodeList = document.querySelectorAll("[route]");
	  var ancesstorRouteElems = Array.from(nodeList).filter(el => el.querySelector("[route='" + route_name + "']")); // var ancesstorRouteElems = [].slice.call($("[route]").has(" [route='"+route_name+"'][sub-route]"));

	  var ancesstorRoutes = ancesstorRouteElems.map(function (a) {
	    return a.getAttribute("route");
	  });
	  return {
	    elems: ancesstorRouteElems,
	    routes: ancesstorRoutes
	  };
	};

	Router.prototype.updateRouteObjParams = function (routeObj, url_params) {
	  if (routeObj.params) {
	    routeObj.params = { ...routeObj.params,
	      ...url_params
	    };
	  }
	};

	Router.prototype.go = function (route_name, url_params) {
	  // var routeEl = this.getRouteEl(route_name);
	  // if(!routeEl){
	  // 	this._log("imp:","no elements with this route attr found");
	  // 	return;
	  // }
	  var routeObj = this.getOrCreateRoute(route_name, url_params);
	  this.updateRouteObjParams(routeObj, url_params);
	  this.updateState(routeObj);

	  this._log("imp:", "changing route to - ", routeObj.name);

	  this.triggerCustomEvent(window, 'stateChange', {
	    state: routeObj
	  });
	};

	Router.prototype.getOrCreateRoute = function (route_name, url_params) {
	  var routeObj = this.getRoute(route_name);

	  if (routeObj) {
	    routeObj.params = { ...routeObj.params,
	      ...url_params
	    };
	  } else {
	    routeObj = {
	      name: route_name,
	      params: url_params
	    };
	    this.addRoute(routeObj);
	  }

	  return routeObj;
	};

	Router.prototype.initSocket = function (socketName) {
	  this._log("imp:", "initializing socket = ", socketName);

	  PostOffice.addSocket(EventTarget, socketName);
	};

	Router.prototype.addRoute = function (routeObj, options) {
	  if (!routeObj) {
	    return;
	  }

	  if (!routeObj.name) {
	    return;
	  }

	  var options = options || {};

	  if (routeObj.socketName) {
	    this.initSocket(routeObj.socketName);
	  }

	  if (options.force) {
	    this.createOrReplaceRoute(routeObj);
	    return;
	  }

	  if (!this.getRoute(routeObj.name)) {
	    this.routes.push(routeObj);
	  }
	};

	Router.prototype.addRouteConfig = function (routeObjList) {
	  var _this = this;

	  routeObjList.forEach(function (routeObj) {
	    _this.addRoute(routeObj);
	  });
	};

	Router.prototype.getActiveRoute = function () {
	  return this.active_route ? this.getRoute(this.active_route) : null;
	};

	function docFragParser(_docFrag, cmp_el_src) {
	  var t = _docFrag.querySelector('template');

	  var doc = document.importNode(t.content, true); // var doc = link.import;
	  // dd = doc;

	  var docFrag = document.createDocumentFragment(); // var scriptFrag = document.createDocumentFragment();

	  if (_checkIfTerminatingCmpUrl(cmp_el_src)) {
	    cmp_el_src = cmp_el_src.split('/');
	    cmp_el_src.pop();
	    cmp_el_src = cmp_el_src.join('/');
	  }

	  while (doc.firstChild) {
	    //any parsing tbd here
	    var content = doc.firstChild;

	    if (content.src) {
	      content.src = content.src[0] == "/" ? content.src : content.src = cmp_el_src + content.src.split(window.location.origin).pop();
	    }

	    if (content.href) {
	      content.href = content.href[0] == "/" ? content.href : content.href = cmp_el_src + content.href.split(window.location.origin).pop();
	    } // if(content.tagName=="SCRIPT"){
	    // 	// console.log("FOUND SCRIPT = ", content);
	    // 	scriptFrag.insertBefore(content, scriptFrag.firstChild); //so that order of scripts is same as in template
	    // }else{
	    // 	docFrag.appendChild(content);
	    // }


	    docFrag.insertBefore(content, docFrag.firstChild); //preserve order of content
	  }

	  return {
	    _frag: docFrag
	  };
	}

	function _checkIfTerminatingCmpUrl(_url) {
	  return _url.slice(-5) == ".html" || _url.slice(-4) == ".svg";
	}

	class IncludeFrag extends HTMLElement {
	  constructor() {
	    super();
	    this.uid = this.uid || randomString(8);

	    this._composeAncesstry();
	  }

	  loadDocFragIntoDom(docFrag) {
	    console.log("imp:", "loading frag into dom - ", docFrag);

	    var _parsed_frag = docFragParser(docFrag, this.src);

	    this.replaceWith(_parsed_frag._frag);
	  }

	  async fetchFrag() {

	    return new Promise((resolve, reject) => {
	      fetch(this.src).then(function (r) {
	        console.log("imp:", "fetched htmlfrag");
	        r.text().then(text => {
	          resolve(stringToDocFrag(text));
	        });
	      }).catch(function (e) {
	        console.log("imp:", "error loading htmlfrag - ", e);
	        reject(e);
	      });
	    });
	  }

	  async connectedCallback() {
	    this.src = this.attributes.src.value;

	    if (this.src) {
	      var frag = await this.fetchFrag();
	      window.frag = frag;
	      this.loadDocFragIntoDom(frag);
	    }
	  }

	  _composeAncesstry() {
	    DOMComponentRegistry.update(this);
	    console.log("composed ancesstry ", this.domElName, ", ", this.uid);
	  }

	}

	Object.defineProperty(IncludeFrag, "domElName", {
	  enumerable: true,
	  writable: true,
	  value: "include-frag"
	});

	var Introspector = {};

	Introspector.initPort = msgEv => {
	  if (DefaultConfig.INTROSPECT != true) {
	    return;
	  }

	  Introspector.port2 = msgEv.ports[0];

	  if (!Introspector.port2) {
	    return;
	  }

	  Introspector.port2.onmessage = () => {
	    if (DefaultConfig.INTROSPECT != true) {
	      return;
	    }

	    var introspectObj = [];
	    DOMComponentRegistry.list().forEach(_entry => {
	      _entry.instances.forEach(instance => {
	        var introspectableInstance = {
	          name: instance.domElName,
	          uid: instance.uid,
	          stateSpace: instance.stateSpace,
	          current_state: instance.current_state
	        };
	        introspectObj.push(introspectableInstance);
	      });
	    });
	    console.log("imp:", " - DEBUGGER MSG - ", msgEv);
	    Introspector.port2.postMessage(introspectObj);
	  };
	};

	Introspector.start = () => {
	  if (DefaultConfig.INTROSPECT != true) {
	    return;
	  }

	  window.onmessage = function (msgEv) {
	    if (DefaultConfig.INTROSPECT != true) {
	      return;
	    }

	    console.log("imp:", "initializing port", msgEv);
	    Introspector.initPort(msgEv);
	  };

	  console.log("imp:", "STARTED MUFFIN DEBUGGER");
	};

	// 	if(!(this.prototype instanceof DOMComponent)){return;}
	// 	DOMComponentRegistry.register(this);
	// }

	window.Muffin = {};
	Logger.start();
	DOMComponentRegistry$1.start();
	Introspector.start();
	DOMComponentRegistry$1.register(DataChannel);
	DOMComponentRegistry$1.register(IncludeFrag);
	window.Muffin.Lexeme = Lexeme;
	window.Muffin.Router = Router;
	window.Muffin.PostOffice = PostOffice;
	window.Muffin.DOMComponentRegistry = DOMComponentRegistry$1;
	window.Muffin.DataSource = DataSource;
	window.Muffin.DOMComponent = DOMComponent;
	window.Muffin.Introspector = Introspector;
	window.Router = Router;
	window.PostOffice = PostOffice;
	window.DOMComponentRegistry = DOMComponentRegistry$1;
	window.DataSource = DataSource;
	window.DOMComponent = DOMComponent; // window.IncludeFrag = IncludeFrag;

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVmZmluLm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbmZpZy5qcyIsIi4uL3NyYy9sb2dnZXIuanMiLCIuLi9zcmMvbGV4ZW1lX2dlbi5qcyIsIi4uL3NyYy9sZXhlbWUuanMiLCIuLi9zcmMvdXRpbHMuanMiLCIuLi9zcmMvZGF0YV9jb21wb25lbnQuanMiLCIuLi9zcmMvcG9zdF9vZmZpY2UuanMiLCIuLi9zcmMvZG9tX2NvbXBvbmVudF9yZWdpc3RyeS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2NhbGZvcmFnZS9kaXN0L2xvY2FsZm9yYWdlLmpzIiwiLi4vc3JjL2RhdGFfc291cmNlLmpzIiwiLi4vc3JjL2RvbV9jb21wb25lbnQuanMiLCIuLi9zcmMvcm91dGVyLmpzIiwiLi4vc3JjL2luY2x1ZGUuanMiLCIuLi9zcmMvaW50cm9zcGVjdG9yLmpzIiwiLi4vc3JjL21haW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gd2luZG93LkxPR0dJTkdfTEVWRUwgPSBcIk5PREVCVUdcIjtcblxubGV0IERlZmF1bHRDb25maWcgPSB7XG5cdFwiTE9HR0lOR19MRVZFTFwiIDogXCJJTVBcIixcblx0XCJQT1NUX09GRklDRV9XT1JLRVJfVVJMXCI6IFwibXVmZmluX3BvX3dvcmtlci5qc1wiLFxuXHRcIklOVFJPU1BFQ1RcIjogZmFsc2UsXG4gICAgXCJEQl9OQU1FXCI6ICdlbGVtZW50X2Zvb3Rsb29zZV9sYWJzX2RiJyxcbiAgICBcIkRCX1ZFUlNJT05cIjogXCIwLjFcIixcbiAgICBcIkRFQlVHX1NDT1BFXCI6IHt9XG59O1xuXG5pZihzZWxmLk1VRkZJTl9DT05GSUcpe1xuXHREZWZhdWx0Q29uZmlnID0gey4uLkRlZmF1bHRDb25maWcsIC4uLnNlbGYuTVVGRklOX0NPTkZJR31cbn1cblxuZXhwb3J0IHtcblx0RGVmYXVsdENvbmZpZ1xufSIsImltcG9ydCB7IERlZmF1bHRDb25maWcgfSBmcm9tIFwiLi9jb25maWcuanNcIjtcblxuY2xhc3MgTG9nZ2VyIHtcblx0c3RhdGljIHN0eWxlcyA9IHtcblx0XHRcImltcFwiOiBcImZvbnQtd2VpZ2h0OiBib2xkOyBjb2xvcjogIzFCMkIzNDtcIixcblx0XHRcImRlYnVnXCI6IFwiZm9udC13ZWlnaHQ6IGJvbGQ7IGNvbG9yOiAjRUM1ZjY3O1wiLFxuXHRcdFwiaW5mb1wiOiBcImZvbnQtd2VpZ2h0OiBib2xkOyBjb2xvcjogI0Y5OTE1NztcIixcblx0XHRcIndhcm5cIjogXCJmb250LXdlaWdodDogYm9sZDsgY29sb3I6ICNGQUM4NjM7XCIsXG5cdFx0XCJlcnJvclwiOiBcImZvbnQtd2VpZ2h0OiBib2xkOyBjb2xvcjogIzk5Qzc5NDtcIlxuXHR9XG59XG5cbkxvZ2dlci5zdGFydCA9ICgpID0+IHtcblx0TG9nZ2VyLl9fbG9nID0gY29uc29sZS5sb2c7XG5cdGNvbnNvbGUubG9nID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoRGVmYXVsdENvbmZpZy5MT0dHSU5HX0xFVkVMID09IFwiTk9ORVwiKXtyZXR1cm47fVxuXG5cdFx0aWYoYXJndW1lbnRzWzBdPT09XCJpbXA6XCIpe1xuXHRcdFx0dmFyIGFyZ3VtZW50c0FyciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdFx0XHR2YXIgbXNnQXJyID0gYXJndW1lbnRzQXJyLnNsaWNlKDEsYXJndW1lbnRzQXJyLmxlbmd0aClcblx0XHRcdExvZ2dlci5fX2xvZy5hcHBseSh0aGlzLCBtc2dBcnIpO1xuXHRcdH1cblxuXHRcdGlmKERlZmF1bHRDb25maWcuTE9HR0lOR19MRVZFTCAhPT0gXCJERUJVR1wiKXtyZXR1cm47fVxuICAgIFx0TG9nZ2VyLl9fbG9nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdH1cbn07XG5cblxuXG5leHBvcnQgeyBcblx0TG9nZ2VyXG59IiwiLy8gZm9yIGdlbmVyYXRpbmcgcmFuZG9tIGxleGVtZSBmaXh0dXJlcyAodXNlZnVsIGR1cmluZyB0ZXN0aW5nKVxuXG4vLyBjb25zdCBSYW5kRXhwID0gcmVxdWlyZSgncmFuZGV4cCcpO1xuLy8gaW1wb3J0ICogYXMgUmFuZEV4cCBmcm9tIFwicmFuZGV4cFwiO1xuXG5cbmNvbnN0IFRZUEVTID0ge1xuXHRlbWFpbDogYFthLXowLTkuXystXXsxLDIwfUBbYS16MC05XXszLDE1fVxcLlthLXpdezIsNH1gLFxuXHRuYW1lOiBgXipbQS1aXVthLXpdezMsOH0kICpbQS1aXVthLXpdezEsMTB9JGAsXG5cdGFnZTogYF4oMVs4OV18WzItOV1cXGQpJGAsXG5cdHN0cjogYF5bYS16QS1aMC05XXsxNn0kYCxcblx0dWlkOiBgXlthLWZBLUYwLTldezI0fSRgXG59XG5cblxuY29uc3QgR2VuZXJhdG9yID0ge307XG5cbkdlbmVyYXRvci5yYW5kb21VaWQgPSAoKSA9PiB7XG5cdHJldHVybiBuZXcgUmFuZEV4cChUWVBFUy51aWQsXCJpXCIpLmdlbigpLnRyaW0oKTtcbn1cbkdlbmVyYXRvci5yYW5kb21FbWFpbCA9ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IFJhbmRFeHAoVFlQRVMuZW1haWwsaSk7XG59XG5cbi8vIEdlbmVyYXRvci5yYW5kb21OdW1lcmljYWxSYW5nZSA9IChyYW5nZVNwYW4pID0+IHtcbi8vIFx0bGV0IGFnZSA9IG5ldyBSYW5kRXhwKFRZUEVTLmFnZSk7XG4vLyBcdGxldCByYW5nZVNwYW4gPSByYW5nZVNwYW4gfHwgNTtcbi8vIFx0cmV0dXJuIGAke2FnZX0te2FnZStyYW5nZVNwYW59YFxuLy8gfVxuXG5HZW5lcmF0b3IucmFuZG9tVmFsID0gKF90eXBlKSA9PiB7IC8vX3R5cGUgPSBTdHJpbmdbbWluX2xlbmd0aCxtYXhfbGVuZ3RoLCByZWdleF0sIEVtYWlsLCBJbnRlZ2VyW21pbixtYXhdLCBEZWNpbWFsW21pbixtYXhdLCBPYmplY3RbKGtleSxrZXlUeXBlKV0sIExpc3RbbWluX2luZGV4ZXMsbWF4X2luZGV4ZXMsZmlsbFR5cGUgPT4gXVxuXG59XG5cblxuZXhwb3J0IHtcblx0R2VuZXJhdG9yXG59IiwiaW1wb3J0IHsgR2VuZXJhdG9yIH0gZnJvbSBcIi4vbGV4ZW1lX2dlblwiO1xuXG5jbGFzcyBMZXhlbWUge1xuICAgIHN0YXRpYyBuYW1lID0gXCJcIjtcblxuICAgIHN0YXRpYyBzY2hlbWEgPSB7fTtcblxuICAgIGNvbnN0cnVjdG9yKGluZm8pIHtcbiAgICAgICAgdGhpcy5pbmZvID0gey4uLnRoaXMuY29uc3RydWN0b3Iuc2NoZW1hLC4uLmluZm99O1xuICAgIH1cblxuXG4gICAgc3RhdGljIGluZmxlY3Rpb24oaW5mbykgeyAvL2NhbiBiZSBleHRlbmRlZCBpbiBjaGlsZCBjbGFzc2VzIGluaGVyaXRpbmcgZnJvbSB0aGlzIHBhcmVudDsgKmluZmxlY3Rpb24gZnVuY3Rpb24gbXVzdCByZXR1cm4gYm9vbGVhbiB2YWx1ZTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJsZXhlbWU6IGRlZmF1bHQgaW5mbGVjdGlvblwiKTtcbiAgICAgICAgaWYodHlwZW9mIGluZm8gPT0gXCJzdHJpbmdcIil7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShpbmZvKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICBzdGF0aWMgaW5mbGVjdChpbmZvKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiaW5mbGVjdGluZyBMZXhlbWUgLSBcIiwgaW5mbyk7XG4gICAgICAgIHZhciBpbmZsZWN0aW9uID0gZmFsc2U7XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIHZhciBpbmZsZWN0aW9uID0gdGhpcy5pbmZsZWN0aW9uKGluZm8pO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJpbmZsZWN0aW9uID0gXCIsIGluZmxlY3Rpb24pO1xuICAgICAgICB9Y2F0Y2goZSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImltcDpcIixcIiBFcnJvcjogbGV4ZW1lIGluZmxlY3Rpb24gZmFpbGVkIC0gXCIsIGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmKCFpbmZsZWN0aW9uKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaW1wOlwiLFwiIElORk86IGxleGVtZSBpbmZsZWN0aW9uIGZ1bmN0aW9uIHJldHVybmVkIGZhbHNlLlwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgdGhpcyhpbmZsZWN0aW9uKTsgLy9pZiBpbmZsZWN0aW9uIGlzIG5vdCBmYWxzZVxuICAgIH1cblxuICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5mbztcbiAgICB9XG5cbiAgICBoYXNLZXkoa2V5U3RyaW5nKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBrZXlMaXN0ID0ga2V5U3RyaW5nLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgaWYoa2V5TGlzdC5sZW5ndGggPT0gMSl7XG4gICAgICAgICAgICByZXR1cm4ga2V5IGluIHRoaXMuaW5mbztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfaW5mbyA9IHRoaXMuaW5mbztcbiAgICAgICAgdmFyIGtleUlkeCA9IDA7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9IHRydWU7ICAvL25lZWQgdG8gZmlndXJlIG91dCBhIHByb3BlciB3YXkgZm9yIHRoaXMgaW5pdGlhbCB2YWx1ZSB0byBiZSBmYWxzZSAoY3VycmVudGx5IGluc2VjdXJlKVxuICAgICAgICB3aGlsZSAoa2V5SWR4IDwga2V5TGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBfa2V5VG9UZXN0ID0ga2V5TGlzdFtrZXlJZHhdO1xuICAgICAgICAgICAgaWYoX2tleVRvVGVzdCBpbiBfaW5mbykge1xuICAgICAgICAgICAgICAgIF9pbmZvID0gX2luZm9bX2tleVRvVGVzdF07XG4gICAgICAgICAgICAgICAgaSs9MTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBoYXNLZXlzKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTsgIC8vbmVlZCB0byBmaWd1cmUgb3V0IGEgcHJvcGVyIHdheSBmb3IgdGhpcyBpbml0aWFsIHZhbHVlIHRvIGJlIGZhbHNlIChjdXJyZW50bHkgaW5zZWN1cmUpXG4gICAgICAgIEFycmF5LmZyb20oYXJndW1lbnRzKS5mb3JFYWNoKChrZXkpPT57XG4gICAgICAgICAgICBpZighX3RoaXMuaGFzS2V5KGtleSkpe3ZhbGlkPWZhbHNlfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdXBkYXRlKGluZm8pIHtcbiAgICAgICAgdGhpcy5pbmZvID0gey4uLnRoaXMuaW5mbywuLi5pbmZvfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXRQYXlsb2FkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbmZvO1xuICAgIH1cblxuICAgIHN0cmluZ2lmeSgpIHtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLmluZm8pO1xuICAgIH1cblxuICAgIGdldFZhbHVlKGtleVN0cmluZykge1xuICAgICAgICB2YXIga2V5TGlzdCA9IGtleVN0cmluZy5zcGxpdChcIi5cIik7XG4gICAgICAgIHZhciB2YWwgPSB0aGlzO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhbCA9IHZhbFtrZXlMaXN0W2ldXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuXG4gICAgaXNTdHJpbmcoa2V5U3RyaW5nKXtcbiAgICAgICAgaWYoIXRoaXMuaGFzS2V5KGtleVN0cmluZykpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmKHR5cGVvZiB0aGlzLmdldFZhbHVlKGtleVN0cmluZykgPT0gXCJzdHJpbmdcIil7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaXNOdW1iZXIoa2V5U3RyaW5nKXtcbiAgICAgICAgaWYoIXRoaXMuaGFzS2V5KGtleVN0cmluZykpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmKHR5cGVvZiB0aGlzLmdldFZhbHVlKGtleVN0cmluZykgPT0gXCJudW1iZXJcIil7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaXNPYmplY3Qoa2V5U3RyaW5nKXtcbiAgICAgICAgaWYoIXRoaXMuaGFzS2V5KGtleVN0cmluZykpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmKHR5cGVvZiB0aGlzLmdldFZhbHVlKGtleVN0cmluZykgPT0gXCJvYmplY3RjZFwiKXtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbkxleGVtZS5HZW5lcmF0b3IgPSBHZW5lcmF0b3I7XG5cbmV4cG9ydCB7IFxuICAgIExleGVtZVxufSIsImZ1bmN0aW9uIHJhbmRvbVN0cmluZyhfbGVuZ3RoKXtcbiAgICAgIHZhciB0ZXh0ID0gXCJcIjtcbiAgICAgIHZhciBfbGVuZ3RoID0gX2xlbmd0aCB8fCA1O1xuICAgICAgdmFyIHBvc3NpYmxlID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCI7XG4gICAgICBmb3IoIHZhciBpPTA7IGkgPCBfbGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgdGV4dCArPSBwb3NzaWJsZS5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGUubGVuZ3RoKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG52YXIgdHJpZ2dlckN1c3RvbUV2ZW50ID0gZnVuY3Rpb24odGFyZ2V0LCBldmVudE5hbWUsIGRldGFpbHMpe1xuICBpZighdGFyZ2V0KXtyZXR1cm47fVxuICBpZighZXZlbnROYW1lKXtyZXR1cm47fVxuICB2YXIgZXZudCA9IG5ldyBDdXN0b21FdmVudChldmVudE5hbWUsIHtcbiAgICAgIGRldGFpbDogZGV0YWlsc1xuICAgIH0pO1xuICB0YXJnZXQuZGlzcGF0Y2hFdmVudChldm50KTtcbn1cblxuXG5mdW5jdGlvbiBzdHJpbmdUb0hUTUxGcmFnKHN0ckhUTUwpIHsgICAvL291dHB1dCBkaWZmIGZyb20gc3RyaW5nVG9Eb2NGcmFnOiB0aGF0IGFsd2F5cyByZXR1cm5zIHRoZSBmdWxsIGh0bWwgcGFnZSBzdHJ1Y3R1cmUgKHdpdGggaGVhZCAmIGJvZHkpXG4gICAgdmFyIHRlbXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xuICAgIHRlbXAuaW5uZXJIVE1MID0gc3RySFRNTDtcbiAgICByZXR1cm4gdGVtcC5jb250ZW50O1xufVxuXG5mdW5jdGlvbiBzdHJpbmdUb0RvY0ZyYWcoaHRtbF9zdHJpbmcpIHsgIC8vY2FuIGJlIHJlbW92ZWQgZXZlbnR1YWxseSBpZiBzdHJpbmdUb0hUTUxGcmFnIHdvcmtzIGZvciBhbGwgY2FzZXNcbiAgICAgdmFyIGRvbSA9IG51bGw7XG4gICAgIGlmICh3aW5kb3cuRE9NUGFyc2VyKSB7XG4gICAgICAgIHRyeSB7IFxuICAgICAgICAgICBkb20gPSAobmV3IERPTVBhcnNlcigpKS5wYXJzZUZyb21TdHJpbmcoaHRtbF9zdHJpbmcsIFwidGV4dC9odG1sXCIpOyBcbiAgICAgICAgfSBcbiAgICAgICAgY2F0Y2ggKGUpIHsgZG9tID0gbnVsbDsgfVxuICAgICB9XG4gICAgIGVsc2UgaWYgKHdpbmRvdy5BY3RpdmVYT2JqZWN0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgIGRvbSA9IG5ldyBBY3RpdmVYT2JqZWN0KCdNaWNyb3NvZnQuWE1MRE9NJyk7XG4gICAgICAgICAgIGRvbS5hc3luYyA9IGZhbHNlO1xuICAgICAgICAgICBpZiAoIWRvbS5sb2FkWE1MKGh0bWxfc3RyaW5nKSkgLy8gcGFyc2UgZXJyb3IgLi5cblxuICAgICAgICAgICAgICB3aW5kb3cuYWxlcnQoZG9tLnBhcnNlRXJyb3IucmVhc29uKTtcbiAgICAgICAgfSBcbiAgICAgICAgY2F0Y2ggKGUpIHsgZG9tID0gbnVsbDsgfVxuICAgICB9XG4gICAgIGVsc2VcbiAgICAgICAgYWxlcnQoXCJjYW5ub3QgcGFyc2UgeG1sIHN0cmluZyFcIik7XG4gICAgIHJldHVybiBkb207XG59XG5cblxuXG5mdW5jdGlvbiBnZXRDb29raWUobmFtZSkge1xuICAgIHZhciBjb29raWVWYWx1ZSA9IG51bGw7XG4gICAgaWYgKGRvY3VtZW50LmNvb2tpZSAmJiBkb2N1bWVudC5jb29raWUgIT0gJycpIHtcbiAgICAgICAgdmFyIGNvb2tpZXMgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY29va2llID0gY29va2llc1tpXS50cmltKCk7XG4gICAgICAgICAgICBpZiAoY29va2llLnN1YnN0cmluZygwLCBuYW1lLmxlbmd0aCArIDEpID09IChuYW1lICsgJz0nKSkge1xuICAgICAgICAgICAgICAgIGNvb2tpZVZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZS5zdWJzdHJpbmcobmFtZS5sZW5ndGggKyAxKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvb2tpZVZhbHVlO1xufVxuXG5cbmZ1bmN0aW9uIGNyZWF0ZUNPUlNSZXF1ZXN0KG1ldGhvZCwgdXJsLCBhc3luYykge1xuICB2YXIgeGhyO1xuICBpZiAod2luZG93LlhNTEh0dHBSZXF1ZXN0KVxuICAgIHsvLyBjb2RlIGZvciBJRTcrLCBGaXJlZm94LCBDaHJvbWUsIE9wZXJhLCBTYWZhcmlcbiAgICAgIHhocj1uZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB9XG4gIGVsc2VcbiAgICB7Ly8gY29kZSBmb3IgSUU2LCBJRTVcbiAgICAgIHhocj1uZXcgQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxIVFRQXCIpO1xuICAgIH1cblxuICBpZiAoXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHIpIHtcblxuICAgIC8vIENoZWNrIGlmIHRoZSBYTUxIdHRwUmVxdWVzdCBvYmplY3QgaGFzIGEgXCJ3aXRoQ3JlZGVudGlhbHNcIiBwcm9wZXJ0eS5cbiAgICAvLyBcIndpdGhDcmVkZW50aWFsc1wiIG9ubHkgZXhpc3RzIG9uIFhNTEhUVFBSZXF1ZXN0MiBvYmplY3RzLlxuICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCBhc3luYyk7XG5cbiAgfSBlbHNlIGlmICh0eXBlb2YgWERvbWFpblJlcXVlc3QgIT0gXCJ1bmRlZmluZWRcIikge1xuXG4gICAgLy8gT3RoZXJ3aXNlLCBjaGVjayBpZiBYRG9tYWluUmVxdWVzdC5cbiAgICAvLyBYRG9tYWluUmVxdWVzdCBvbmx5IGV4aXN0cyBpbiBJRSwgYW5kIGlzIElFJ3Mgd2F5IG9mIG1ha2luZyBDT1JTIHJlcXVlc3RzLlxuICAgIHhociA9IG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsKTtcblxuICB9IGVsc2Uge1xuXG4gICAgLy8gT3RoZXJ3aXNlLCBDT1JTIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIuXG4gICAgeGhyID0gbnVsbDtcblxuICB9XG4gIHJldHVybiB4aHI7XG59XG5cblxuZnVuY3Rpb24gc2VuZF9hamF4KHRhcmdldF91cmwsbWV0aG9kLHN1Y2Nlc3NfY2FsbGJhY2ssZm9ybWRhdGEsZXJyb3JfY2FsbGJhY2ssYnVzeV9jYWxsYmFjayxhc3luYywgaGVhZGVycywgcmVzcG9uc2VUeXBlKXtcbiAgaWYoIXRhcmdldF91cmx8fCFtZXRob2R8fCFzdWNjZXNzX2NhbGxiYWNrKXtyZXR1cm47fVxuICBpZighKChtZXRob2Q9PVwiR0VUXCIpfHwobWV0aG9kPT1cIlBPU1RcIikpKXtyZXR1cm47fVxuICB2YXIgYXN5bmM9IGFzeW5jPT1mYWxzZT8gZmFsc2UgOiB0cnVlO1xuICAvLyBjb25zb2xlLmxvZyhcImFzeW5jPVwiK1N0cmluZyhhc3luYykpO1xuXG4gIHZhciB4bWxodHRwID0gY3JlYXRlQ09SU1JlcXVlc3QobWV0aG9kLHRhcmdldF91cmwsYXN5bmMpO1xuXG4gIHhtbGh0dHAub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKClcbiAgICB7XG4gICAgICBpZih4bWxodHRwLnJlc3BvbnNlVHlwZSE9XCJkb2N1bWVudFwiKXtcbiAgICAgICAgaWYgKHhtbGh0dHAucmVhZHlTdGF0ZTw0KSB7XG4gICAgICAgICAgICBpZihidXN5X2NhbGxiYWNrIT11bmRlZmluZWQpe2J1c3lfY2FsbGJhY2sodHJ1ZSk7fVxuICAgICAgICAgIH1cblxuICAgICAgICBpZiAoeG1saHR0cC5yZWFkeVN0YXRlPT00KXtcblxuICAgICAgICAgIGlmKGJ1c3lfY2FsbGJhY2shPXVuZGVmaW5lZCl7YnVzeV9jYWxsYmFjayhmYWxzZSk7fVxuXG4gICAgICAgICAgaWYoeG1saHR0cC5zdGF0dXM9PTIwMClcbiAgICAgICAgICAgIHsgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0geG1saHR0cC5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICAgICAgc3VjY2Vzc19jYWxsYmFjayhyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgICAgdmFyIGVycm9yID0geG1saHR0cC5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICBlcnJvcl9jYWxsYmFjayhlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgeG1saHR0cC5vbmxvYWQgPSBmdW5jdGlvbihlKSB7XG4gICAgICBpZih4bWxodHRwLnJlc3BvbnNlVHlwZT09XCJkb2N1bWVudFwiKXtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGUudGFyZ2V0LnJlc3BvbnNlO1xuICAgICAgICBzdWNjZXNzX2NhbGxiYWNrKHJlc3VsdCk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIHhtbGh0dHAucmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlIHx8ICd0ZXh0JztcblxuICAgIHhtbGh0dHAub3BlbihtZXRob2QsdGFyZ2V0X3VybCxhc3luYyk7XG5cbiAgICBpZihoZWFkZXJzKXtcbiAgICAgIGZvcihrZXkgaW4gaGVhZGVycyl7XG4gICAgICAgIHhtbGh0dHAuc2V0UmVxdWVzdEhlYWRlcihrZXksIGhlYWRlcnNba2V5XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYobWV0aG9kPT1cIlBPU1RcIil7XG4gICAgICBpZighZm9ybWRhdGEpe3JldHVybjt9XG4gICAgICB2YXIgY3NyZnRva2VuID0gZ2V0Q29va2llKCdjc3JmdG9rZW4nKTtcbiAgICAgICAgICAgIHhtbGh0dHAuc2V0UmVxdWVzdEhlYWRlcihcIlgtQ1NSRlRva2VuXCIsIGNzcmZ0b2tlbik7XG4gICAgICB4bWxodHRwLnNlbmQoZm9ybWRhdGEpO1xuICAgIH1cblxuICAgIGlmKG1ldGhvZD09XCJHRVRcIil7XG4gICAgICB4bWxodHRwLnNlbmQoKTtcbiAgICB9XG59XG5cblxuZXhwb3J0IHtcbiAgcmFuZG9tU3RyaW5nLCBcbiAgdHJpZ2dlckN1c3RvbUV2ZW50LFxuICBzdHJpbmdUb0hUTUxGcmFnLFxuICBzdHJpbmdUb0RvY0ZyYWcsXG4gIHNlbmRfYWpheFxufSIsImltcG9ydCB7IHJhbmRvbVN0cmluZyB9IGZyb20gXCIuL3V0aWxzLmpzXCI7XG5cbmNsYXNzIERhdGFDaGFubmVsIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuXG5cdHN0YXRpYyBkb21FbE5hbWUgPSBcImRhdGEtY2hhbm5lbFwiO1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy51aWQgPSB0aGlzLnVpZCB8fCByYW5kb21TdHJpbmcoOCk7XG5cdFx0dGhpcy5fY29tcG9zZUFuY2Vzc3RyeSgpO1xuXHR9XG5cblx0Y29ubmVjdGVkQ2FsbGJhY2soKSB7XG5cdFx0Y29uc29sZS5sb2coXCJpbXA6XCIsXCJjb25zdHJ1Y3RpbmcgZGF0YS1jaGFubmVsID0gXCIsIHRoaXMuYXR0cmlidXRlcyk7XG5cdCAgICB0aGlzLmxhYmVsID0gdGhpcy5hdHRyaWJ1dGVzLmxhYmVsLnZhbHVlO1xuXHQgICAgdGhpcy5zb2NrZXQgPSB0aGlzLmF0dHJpYnV0ZXMuc29ja2V0LnZhbHVlO1xuXHQgICAgdGhpcy5fY21wID0gdGhpcy5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuXHQgICAgdGhpcy5fY21wLmNvbnN0cnVjdGVkRnJvbS5fX2luaXREYXRhU3JjSW50ZXJmYWNlKHRoaXMubGFiZWwsIHRoaXMuc29ja2V0KTtcblx0fVxuXG5cdF9jb21wb3NlQW5jZXNzdHJ5KCkge1xuXHRcdERPTUNvbXBvbmVudFJlZ2lzdHJ5LnVwZGF0ZSh0aGlzKTtcblx0ICAgXHRjb25zb2xlLmxvZyhcImNvbXBvc2VkIGFuY2Vzc3RyeSBcIiwgdGhpcy5kb21FbE5hbWUsIFwiLCBcIiwgdGhpcy51aWQpO1xuXHR9XG59XG5cbi8vIERhdGFDaGFubmVsLmNvbXBvc2VTZWxmID0gZnVuY3Rpb24oKXtcbi8vIFx0RE9NQ29tcG9uZW50UmVnaXN0cnkucmVnaXN0ZXIodGhpcy5wcm90b3R5cGUuY29uc3RydWN0b3IpO1xuLy8gfVxuXG5leHBvcnQge1xuXHREYXRhQ2hhbm5lbFxufSIsImNsYXNzIFBvc3RPZmZpY2UgZXh0ZW5kcyBPYmplY3Qge1xuXG5cdC8vIGNvbnN0cnVjdG9yKCkge1xuXHQvLyBcdHRoaXMucmVnaXN0cnkgPSBbXTtcblx0Ly8gfVxuXG5cdC8vIHN0YXRpYyBkZWZhdWx0U2NvcGUgPSBQb3N0T2ZmaWNlLmFkZFNvY2tldChFdmVudFRhcmdldCxcImdsb2JhbFwiKTtcblxuXHRzdGF0aWMgYWRkU29ja2V0KF9jb25zdHJ1Y3RvciwgbmFtZSwgX3VybCwgb3B0aW9ucykge1xuXHRcdFBvc3RPZmZpY2Uuc29ja2V0c1tuYW1lXSA9IG5ldyBQb3N0T2ZmaWNlLlNvY2tldChfY29uc3RydWN0b3IsIG5hbWUsIF91cmwsIG9wdGlvbnMpO1xuXHRcdHJldHVybiBQb3N0T2ZmaWNlLnNvY2tldHNbbmFtZV07XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlSW50ZXJmYWNlKG5hbWUsc3BlY3MsIG92ZXJyaWRlKSB7XG5cdFx0aWYoUG9zdE9mZmljZS5zb2NrZXRzW25hbWVdICYmICFvdmVycmlkZSl7XG5cdFx0XHRsZXQgZXJyID0gYEVycm9yOiBJbnRlcmZhY2Ugd2l0aCBuYW1lID0gJHtuYW1lfSBhbHJlYWR5IGV4aXN0cy5gO1xuXHRcdFx0dGhyb3cgRXJyb3IoZXJyKTtcblx0XHR9XG5cdFx0UG9zdE9mZmljZS5zb2NrZXRzW25hbWVdID0gbmV3IFBvc3RPZmZpY2UuU29ja2V0KEV2ZW50VGFyZ2V0LCBuYW1lKTtcblxuXHRcdGlmKHNwZWNzKXtcblx0XHRcdFBvc3RPZmZpY2Uuc29ja2V0c1tuYW1lXS5hZGRJbnRlcmZhY2VTcGVjKHNwZWNzKTtcblx0XHR9XG5cdFx0cmV0dXJuIFBvc3RPZmZpY2Uuc29ja2V0c1tuYW1lXTtcblx0fVxuXG5cdHN0YXRpYyBnZXRPckNyZWF0ZUludGVyZmFjZShuYW1lLHNwZWNzKSB7XG5cdFx0aWYoUG9zdE9mZmljZS5zb2NrZXRzW25hbWVdKXtcblx0XHRcdHJldHVybiBQb3N0T2ZmaWNlLnNvY2tldHNbbmFtZV07XG5cdFx0fVxuXHRcdFBvc3RPZmZpY2Uuc29ja2V0c1tuYW1lXSA9IG5ldyBQb3N0T2ZmaWNlLlNvY2tldChFdmVudFRhcmdldCwgbmFtZSk7XG5cblx0XHRpZihzcGVjcyl7XG5cdFx0XHRQb3N0T2ZmaWNlLnNvY2tldHNbbmFtZV0uYWRkSW50ZXJmYWNlU3BlYyhzcGVjcyk7XG5cdFx0fVxuXHRcdHJldHVybiBQb3N0T2ZmaWNlLnNvY2tldHNbbmFtZV07XG5cdH1cblxuXHRzdGF0aWMgcHVibGlzaFRvSW50ZXJmYWNlKHRhcmdldEludGVyZmFjZUFkZHIsIG1zZykge1xuXHRcdHZhciBbaW50ZXJmYWNlU29ja2V0TmFtZSwgaW50ZXJmYWNlT3BMYWJlbF0gPSB0YXJnZXRJbnRlcmZhY2VBZGRyLnNwbGl0KFwiOjo6XCIpO1xuXHRcdGNvbnNvbGUuZGVidWcoXCJwdWJsaXNoVG9JbnRlcmZhY2UgLSBcIiwgaW50ZXJmYWNlU29ja2V0TmFtZSwgaW50ZXJmYWNlT3BMYWJlbCwgbXNnKTtcblx0XHRsZXQgdGFyZ2V0U29ja2V0ID0gUG9zdE9mZmljZS5zb2NrZXRzW2ludGVyZmFjZVNvY2tldE5hbWVdO1xuXHRcdGlmKCF0YXJnZXRTb2NrZXQpe1xuXHRcdFx0bGV0IGVyciA9IGBFcnJvcjogTm8gc3VjaCBpbnRlcmZhY2UgLSAke2ludGVyZmFjZVNvY2tldE5hbWV9YDtcblx0XHRcdHRocm93IEVycm9yKGVycik7XG5cdFx0fVxuXHRcdHRhcmdldFNvY2tldC5wdWJsaXNoKGludGVyZmFjZU9wTGFiZWwsIG1zZyk7XG5cdH1cblxuXHRzdGF0aWMgX2dldFJlZ2lzdHJ5KCkge1xuXHRcdHJldHVybiBQb3N0T2ZmaWNlLnJlZ2lzdHJ5O1xuXHR9XG5cblx0c3RhdGljIF9hZGRUb1JlZ2lzdHJ5KF9icm9rZXIpIHtcblx0XHRQb3N0T2ZmaWNlLnJlZ2lzdHJ5LnB1c2goX2Jyb2tlcik7XG5cdH1cblxuXHRzdGF0aWMgX2RlbEZyb21SZWdpc3RyeShfYnJva2VyKSB7XG5cblx0fVxuXG5cdHN0YXRpYyBnZXREZWZhdWx0U2NvcGUgKCl7XG5cdFx0cmV0dXJuIFBvc3RPZmZpY2UuZGVmYXVsdFNjb3BlO1xuXHR9XG5cblx0c3RhdGljIF9nZXRCcm9rZXIgKGxhYmVsLCBzY29wZSkge1xuXHRcdHZhciBzY29wZSA9IHNjb3BlIHx8IFBvc3RPZmZpY2UuZ2V0RGVmYXVsdFNjb3BlKCk7XG5cdFx0cmV0dXJuIFBvc3RPZmZpY2UuX2dldFJlZ2lzdHJ5KCkuZmlsdGVyKChfYnJva2VyKSA9PiB7XG5cdFx0XHRyZXR1cm4gX2Jyb2tlci5sYWJlbCA9PSBsYWJlbCAmJiBfYnJva2VyLnNjb3BlID09IHNjb3BlO1xuXHRcdH0pWzBdO1xuXHR9XG5cblx0c3RhdGljIF9jcmVhdGVCcm9rZXIgKGxhYmVsLCBfY2IsIHNjb3BlKSB7XG5cdFx0dmFyIHNjb3BlID0gc2NvcGUgfHwgUG9zdE9mZmljZS5nZXREZWZhdWx0U2NvcGUoKTtcblx0XHR2YXIgX2Jyb2tlciA9IG5ldyBQb3N0T2ZmaWNlLkJyb2tlcihsYWJlbCwgX2NiLCBzY29wZSk7XG5cdFx0cmV0dXJuIF9icm9rZXI7XG5cdH1cblxuXHRzdGF0aWMgX2NyZWF0ZU9yVXBkYXRlQnJva2VyKGxhYmVsLCBfY2IsIHNjb3BlKXtcblx0XHR2YXIgX2Jyb2tlciA9IFBvc3RPZmZpY2UuX2dldEJyb2tlcihsYWJlbCwgc2NvcGUpO1xuXHRcdGlmKF9icm9rZXIpe1xuXHRcdFx0X2Jyb2tlci5hZGRDYWxsYmFjayhfY2IpXG5cdFx0fWVsc2V7XG5cdFx0XHRQb3N0T2ZmaWNlLl9hZGRUb1JlZ2lzdHJ5KFBvc3RPZmZpY2UuX2NyZWF0ZUJyb2tlcihsYWJlbCwgX2NiLCBzY29wZSkpO1xuXHRcdH1cblx0fVxuXG5cdC8vIHN0YXRpYyByZWdpc3RlckJyb2tlcihsYWJlbCxfY2Isc2NvcGUpeyAgLy9sZWdhY3kgY29kZSAtIGNvbW1lbnRzIGtlcHQgZm9yIHJlZmVyZWNlIGluIGNhc2UgYW55dGhpbmcgYnJlYWtzXG5cdC8vIFx0aWYoIWxhYmVsKXtyZXR1cm47fVxuXHQvLyBcdHZhciBzY29wZSA9IHNjb3BlIHx8IFBvc3RPZmZpY2UuZ2V0RGVmYXVsdFNjb3BlKCk7XG5cdC8vIFx0UG9zdE9mZmljZS5fY3JlYXRlT3JVcGRhdGVCcm9rZXIobGFiZWwsIF9jYiwgc2NvcGUpO1xuXHQvLyB9XG5cblx0c3RhdGljIGFkZEdsb2JhbExpc3RlbmVyKF9sYWJlbCxfY2IpeyAvL25ldyB2ZXJzaW9uIC0gcmVmZXIgdG8gb2xkZXIgdmVyc2lvbiBpbiBjYXNlIG9mIGZhbGxhY2llc1xuXHRcdHJldHVybiBQb3N0T2ZmaWNlLnNvY2tldHMuZ2xvYmFsLmFkZExpc3RlbmVyKF9sYWJlbCwgX2NiKTtcblx0fVxuXG5cdC8vIHN0YXRpYyBhZGRMaXN0ZW5lcihsYWJlbCxfY2Isc2NvcGUpe1xuXHQvLyBcdGlmKCFsYWJlbCl7cmV0dXJuO31cblx0Ly8gXHR2YXIgc2NvcGUgPSBzY29wZSB8fCBQb3N0T2ZmaWNlLmdldERlZmF1bHRTY29wZSgpO1xuXHQvLyBcdFBvc3RPZmZpY2UuX2NyZWF0ZU9yVXBkYXRlQnJva2VyKGxhYmVsLCBfY2IsIHNjb3BlKTtcblx0Ly8gfVxuXG5cblx0c3RhdGljIF9ydW5Ccm9rZXIgKGxhYmVsLCBtc2csIF9zY29wZSkge1xuXHRcdHZhciBfYnJva2VyID0gUG9zdE9mZmljZS5fZ2V0QnJva2VyKGxhYmVsLCBfc2NvcGUpO1xuXHRcdGlmKCFfYnJva2VyKXtcblx0XHRcdGNvbnNvbGUubG9nKFwibm8gYnJva2VyIHJlZ2lzdGVyZWQgZm9yIC0gXCIsIGxhYmVsKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0X2Jyb2tlci5leGVjdXRlKG1zZyk7XG5cdH1cblxuXHRzdGF0aWMgYnJvYWRjYXN0TXNnIChsYWJlbCwgbXNnLCBfc2NvcGUpe1xuXHRcdGlmKCFsYWJlbCl7cmV0dXJuO31cblx0XHR2YXIgX3Njb3BlID0gX3Njb3BlIHx8IFBvc3RPZmZpY2UuZ2V0RGVmYXVsdFNjb3BlKCk7XG5cdFx0dmFyIGV2bnQgPSBuZXcgQ3VzdG9tRXZlbnQobGFiZWwsIHtcblx0XHQgICAgZGV0YWlsOiBtc2dcblx0XHR9KTtcblx0XHRfc2NvcGUuZGlzcGF0Y2hFdmVudChldm50KTtcblx0XHRQb3N0T2ZmaWNlLl9ydW5Ccm9rZXIobGFiZWwsbXNnLCBfc2NvcGUpO1xuXHR9XG59XG5cblBvc3RPZmZpY2Uuc29ja2V0cyA9IHt9O1xuUG9zdE9mZmljZS5yZWdpc3RyeSA9IFtdO1xuXG5Qb3N0T2ZmaWNlLlNvY2tldCA9IGNsYXNzIFBvc3RPZmZpY2VTb2NrZXQge1xuXHRjb25zdHJ1Y3RvcihfY29uc3RydWN0b3IsIG5hbWUsIHVybCwgb3B0aW9ucykge1xuXHRcdHZhciBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0XHR0aGlzLmNvbnN0cnVjdGVkRnJvbSA9IF9jb25zdHJ1Y3RvciB8fCBXZWJTb2NrZXQ7XG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcblx0XHR0aGlzLnVybCA9IHVybDtcblx0XHR0aGlzLnNvY2tldCA9IG5ldyB0aGlzLmNvbnN0cnVjdGVkRnJvbSh1cmwpO1xuXHRcdHRoaXMuZGVmYXVsdFNjb3BlID0gbmV3IEV2ZW50VGFyZ2V0KCk7XG5cdFx0dGhpcy5saXN0ZW5lcnMgPSBbXTtcblx0XHR0aGlzLmF1dG9SZXRyeU9uQ2xvc2UgPSBvcHRpb25zLmF1dG9SZXRyeU9uQ2xvc2UgfHwgdHJ1ZTtcblx0XHR0aGlzLmF1dG9SZXRyeUludGVydmFsID0gb3B0aW9ucy5hdXRvUmV0cnlJbnRlcnZhbCB8fCA1O1xuXHRcdHRoaXMuYXV0b0luaXRMZXhpY29uU3Vic2NyaXB0aW9ucyA9IG9wdGlvbnMuYXV0b0luaXRMZXhpY29uU3Vic2NyaXB0aW9ucyB8fCB0cnVlO1xuXHRcdHRoaXMuX19pbml0X18oKTtcblx0fVxuXG5cdF9pbml0TGV4aWNvblN1YnNjcmlwdGlvbnMoKSB7XG5cdFx0Ly8gY29uc29sZS5kZWJ1ZyhcIlBvc3RPZmZpY2UgLS0tLSBfaW5pdExleGljb25TdWJzY3JpcHRpb25zIDogc3RhcnQgLS0tLS0tLS0tLS0tLS0tLVwiLCB0aGlzLklOVEVSRkFDRV9TUEVDKTtcblxuXHRcdGlmKHRoaXMuSU5URVJGQUNFX1NQRUMpe1xuXHRcdFx0Ly8gY29uc29sZS5kZWJ1ZyhcIlBvc3RPZmZpY2UgLS0tLSBfaW5pdExleGljb25TdWJzY3JpcHRpb25zIDogaW5pdGlhbGlzaW5nIExFWElDT04gU3Vic2NyaXB0aW9ucyAtLS0tLS0tLS0tLS0tLS0tXCIpO1xuXHRcdFx0Zm9yKHZhciBrZXkgaW4gdGhpcy5JTlRFUkZBQ0VfU1BFQyl7XG5cdFx0XHRcdGlmKHRoaXMuSU5URVJGQUNFX1NQRUNba2V5XSl7XG5cdFx0XHRcdFx0aWYodGhpcy5JTlRFUkZBQ0VfU1BFQ1trZXldLnNjaGVtYSAmJiB0aGlzLklOVEVSRkFDRV9TUEVDW2tleV0uc2NoZW1hLnN1YnNjcmliZSl7XG5cdFx0XHRcdFx0XHQvLyBsZXQgX2luZmxlY3Rpb24gPSBMRVhJQ09OLlJPUlN0YXRlU3Vic2NyaXB0aW9uUmVxdWVzdC5pbmZsZWN0KHt9KTtcblx0XHRcdFx0ICAgICAgICAvLyBjb25zb2xlLmRlYnVnKFwiLS0gU0VuZGluZyBNU2dcIiwgX2luZmxlY3Rpb24uZ2V0KCkpXG5cblx0XHRcdFx0ICAgICAgICBjb25zb2xlLmRlYnVnKGBQb3N0T2ZmaWNlOjo6X2luaXRMZXhpY29uU3Vic2NyaXB0aW9ucyBwdWJsaXNoaW5nICR7a2V5fWApO1xuXHRcdFx0XHQgICAgICAgIHRoaXMucHVibGlzaChgJHtrZXl9YCwge30pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKGBQb3N0T2ZmaWNlOjo6JHt0aGlzLm5hbWV9OiBfaW5pdExleGljb25TdWJzY3JpcHRpb25zIEtleSAtICR7a2V5fSBpbiBTcGVjIGhhcyB1bmRlZmluZWQgdmFsdWUuIChObyBsZXhlbWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXkpLmApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0X19pbml0X18oKSB7XG5cdFx0dmFyIF90aGlzID0gdGhpcztcblx0XHQvLyBQb3N0T2ZmaWNlLnNvY2tldHNbbmFtZV0gPSBuZXcgV2ViU29ja2V0KF91cmwpO1xuXHRcdC8vIFBvc3RPZmZpY2Uuc29ja2V0c1tuYW1lXS5wcm94eSA9IHt9O1xuXHRcdC8vIHRoaXMuc29ja2V0LlxuXHRcdGlmKHRoaXMuc29ja2V0IGluc3RhbmNlb2YgV2ViU29ja2V0KXtcblx0XHRcdHRoaXMuX2tlZXBBbGl2ZSgpO1xuXHRcdH1cblxuXHQgIFx0dGhpcy5zb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgKG1zZ0V2KT0+e1xuXHQgIFx0XHRfdGhpcy5faGFuZGxlU29ja2V0TXNnRXYuY2FsbChfdGhpcywgbXNnRXYpXG5cdCAgXHR9KTtcblxuXHQgIFx0dGhpcy5zb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcihcImNsb3NlXCIsIChldik9Pntcblx0ICBcdFx0X3RoaXMuX2hhbmRsZVNvY2tldENsb3NlRXYuY2FsbChfdGhpcywgZXYpO1xuXHQgIFx0fSk7XG5cblx0ICBcdHRoaXMuc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoXCJvcGVuXCIsIChldik9Pntcblx0ICBcdFx0X3RoaXMuX2hhbmRsZVNvY2tldE9wZW5Fdi5jYWxsKF90aGlzLCBldik7XG5cdCAgXHR9KTtcblxuXHQgIFx0dGhpcy5zb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIChldik9Pntcblx0ICBcdFx0X3RoaXMuX2hhbmRsZVNvY2tldEVycm9yRXYuY2FsbChfdGhpcywgZXYpO1xuXHQgIFx0fSk7XG5cblx0XHQvLyBpZih0aGlzLmF1dG9Jbml0TGV4aWNvblN1YnNjcmlwdGlvbnMpe1xuXHRcdC8vIFx0dGhpcy5faW5pdExleGljb25TdWJzY3JpcHRpb25zKCk7XG5cdFx0Ly8gfVxuXG5cdCAgXHR0aGlzLm9uID0gdGhpcy5hZGRMaXN0ZW5lcjtcblx0fVxuXG5cdF9rZWVwQWxpdmUoKSB7XG5cdFx0dmFyIF90aGlzID0gdGhpcztcblx0XHRjbGVhckludGVydmFsKHRoaXMuY29ubmVjdGlvbktlZXBBbGl2ZSk7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbktlZXBBbGl2ZSA9IHNldEludGVydmFsKCgpPT57XG4gICAgICAgIFx0aWYoX3RoaXMua2VlcEFsaXZlICE9IHRydWUpe3JldHVybjt9XG4gICAgICAgICAgICBfdGhpcy5zZW5kKFwicGluZ1wiKTtcbiAgICAgICAgfSw1OTAwMCk7XG5cdH1cblxuXHRvbm1lc3NhZ2Uoc29ja2V0TXNnRXYpIHsgLy9jdXN0b20gb25tZXNzYWdlIGZ1bmN0aW9ucyBjYW4gYmUgcHJvdmlkZWQgYnkgdGhlIGRldmVsb3Blci5cblx0XHR2YXIgX21zZ1N0ciA9IHNvY2tldE1zZ0V2LmRhdGE7XG5cdFx0aWYoX21zZ1N0cj09XCJwb25nXCIpe3JldHVybjt9IC8vcGluZy1wb25nIG1lc3NhZ2VzIGV4Y2hhbmdlZCBpbiBrZWVwQWxpdmVcblx0XHR2YXIgZXYgPSBudWxsO1xuXHRcdHRyeXtcbiAgXHRcdFx0dmFyIF9tc2cgPSBKU09OLnBhcnNlKF9tc2dTdHIpO1xuXHQgIFx0XHRldiA9IG5ldyBDdXN0b21FdmVudChfbXNnLmxhYmVsLCB7XG5cdFx0XHRcdGRldGFpbDogX21zZ1xuXHRcdFx0fSk7XG4gIFx0XHR9Y2F0Y2goZSl7IC8vbm90IHZhbGlkIG1zZ1xuICBcdFx0XHR2YXIgX21zZyA9IHtlcnJvcjogZSwgbGFiZWw6IGAke3RoaXMubmFtZX0tbWVzc2FnZS1lcnJvcmB9XG4gIFx0XHRcdGV2ID0gbmV3IEN1c3RvbUV2ZW50KF9tc2cubGFiZWwsIHtcbiAgXHRcdFx0XHRkZXRhaWw6IF9tc2dcbiAgXHRcdFx0fSk7XG4gIFx0XHR9XG4gIFx0XHRyZXR1cm4gZXY7IC8vbXVzdCByZXR1cm4gYW4gZXZlbnQgb2JqZWN0XG5cdH1cblxuXG5cdF9oYW5kbGVTb2NrZXRFcnJvckV2KGV2KSB7XG5cdFx0dGhpcy5kaXNwYXRjaE1lc3NhZ2UoZXYudHlwZSwgZXYpO1xuXHRcdGNvbnNvbGUuZXJyb3IoYFBvc3RPZmZpY2UuU29ja2V0Ojo6JHt0aGlzLm5hbWV9IGVycm9yZWRgKTtcblx0fVxuXG5cdF9oYW5kbGVTb2NrZXRPcGVuRXYoZXYpIHtcblx0XHR0aGlzLmRpc3BhdGNoTWVzc2FnZShldi50eXBlLCBldik7XG5cdFx0Y29uc29sZS5kZWJ1ZyhgUG9zdE9mZmljZS5Tb2NrZXQ6Ojoke3RoaXMubmFtZX0gb3BlbmVkIC0gYCwgZXYpO1xuXHR9XG5cblx0X2hhbmRsZVNvY2tldENsb3NlRXYoZXYpIHtcblx0XHR0aGlzLmRpc3BhdGNoTWVzc2FnZShldi50eXBlLCBldik7XG4gIFx0XHRjb25zb2xlLmRlYnVnKGBQb3N0T2ZmaWNlLlNvY2tldDo6OiR7dGhpcy5uYW1lfSBjbG9zZWRgKTtcbiAgXHRcdGlmKHRoaXMuYXV0b1JldHJ5T25DbG9zZSA9PSB0cnVlKXtcbiAgXHRcdFx0Y29uc29sZS5kZWJ1ZyhgUG9zdE9mZmljZS5Tb2NrZXQ6Ojoke3RoaXMubmFtZX0gcmV0cnlpbmcgY29ubmVjdGlvbiBpbiAke3RoaXMuYXV0b1JldHJ5SW50ZXJ2YWx9c2ApO1xuICBcdFx0XHRzZXRUaW1lb3V0KCgpPT57XG4gIFx0XHRcdFx0Y29uc29sZS5kZWJ1ZyhgUG9zdE9mZmljZS5Tb2NrZXQ6Ojoke3RoaXMubmFtZX0gYXR0ZW1wdGluZyB0byBjb25uZWN0IGFnYWluYCk7XG4gIFx0XHRcdFx0dGhpcy5zb2NrZXQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RlZEZyb20odGhpcy51cmwpO1xuICBcdFx0XHRcdHRoaXMuX19pbml0X18oKTtcbiAgXHRcdFx0fSwgdGhpcy5hdXRvUmV0cnlJbnRlcnZhbCoxMDAwKTtcbiAgXHRcdFx0cmV0dXJuO1xuICBcdFx0fVxuXHR9XG5cblx0X2hhbmRsZVNvY2tldE1zZ0V2KHNvY2tldE1zZ0V2KSB7XG5cdFx0Y29uc29sZS5kZWJ1ZyhgU29ja2V0Ojo6JHt0aGlzLm5hbWV9IChpbmNvbWluZykgcmVjZWl2ZWQgbXNnID0gYCwgc29ja2V0TXNnRXYpO1xuXHRcdHZhciBtc2dFdiA9IHRoaXMub25tZXNzYWdlKHNvY2tldE1zZ0V2KTtcblxuXHRcdGNvbnNvbGUuZGVidWcoYFNvY2tldDo6OiR7dGhpcy5uYW1lfSAocHJvY2Vzc2VkIG1zZ0V2KSA9IGAsIG1zZ0V2KTtcblx0XHRpZihtc2dFdil7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQobXNnRXYpO1xuXHRcdH1cblx0fVxuXG5cdHNlbmQobXNnKSB7XG5cdFx0dGhpcy5zb2NrZXQuc2VuZChtc2cpO1xuXHR9XG5cblxuXHRzZW5kTXNnKHtsZXhlbWVOYW1lLCBtc2d9KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+e1xuICAgICAgICBcdGNvbnNvbGUuZGVidWcoYERFQlVHOiAke3RoaXMubmFtZX06YCwgXCJzZW5kaW5nIG1lc3NhZ2UgPSBcIiwgbGV4ZW1lTmFtZSwgbXNnKTtcblxuICAgICAgICBcdHZhciBsZXhlbWUgPSB0aGlzLkxFWElDT05bbGV4ZW1lTmFtZV07XG5cbiAgICAgICAgXHRpZighbGV4ZW1lKXtcbiAgICAgICAgXHRcdGxldCBlcnIgPSBgRXJyb3I6IE5vIHN1Y2ggbGV4ZW1lIC0tPiAke2xleGVtZU5hbWV9YDtcblx0ICAgICAgICAgICAgcmVqZWN0KHtlcnJvcjogZXJyfSk7XG5cdCAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgXHR9XG5cblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICB2YXIgaW5mbGVjdGlvbiA9IGxleGVtZS5pbmZsZWN0KG1zZyk7XG5cdCAgICAgICAgICAgIGlmKCFpbmZsZWN0aW9uKXtcblx0ICAgICAgICAgICAgXHRsZXQgZXJyID0gYEVycm9yOiBJbnZhbGlkIG1zZyBmb3JtIGZvciAke2xleGVtZU5hbWV9IC0tPiAke2luZmxlY3Rpb259YDtcblx0ICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcblx0ICAgICAgICAgICAgICAgIHJlamVjdCh7ZXJyb3I6IGVycn0pXG5cdCAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjpcIiwgXCJlcnJvciBpbmZsZWN0aW5nIG1zZyBsZXhlbWU6IFwiLCBlKTtcblx0ICAgICAgICAgICAgcmVqZWN0KHtlcnJvcjogZX0pO1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgY29uc29sZS5kZWJ1ZyhgREVCVUc6ICR7dGhpcy5uYW1lfTogYCwgXCJJbmZsZWN0ZWQgRm9ybSA9IFwiLCBpbmZsZWN0aW9uLnN0cmluZ2lmeSgpKTtcblxuXHQgICAgICAgIGxldCBwYXlsb2FkSnNvblN0ciA9IGluZmxlY3Rpb24uc3RyaW5naWZ5KCk7XG5cdCAgICAgICAgLy8gcGF5bG9hZEpzb25TdHIgPSBwYXlsb2FkSnNvblN0ci5yZXBsYWNlKC9cXFxcbi9nLCAnJyk7XG5cdCAgICAgICAgdGhpcy5zb2NrZXQuc2VuZChwYXlsb2FkSnNvblN0cik7XG5cblx0ICAgICAgICBjb25zb2xlLmRlYnVnKGBERUJVRzogJHt0aGlzLm5hbWV9OmAsIFwibWVzc2FnZSBzZW50ID0gXCIsIHBheWxvYWRKc29uU3RyKTtcblxuXHQgICAgICAgIHJlc29sdmUoe2Vycm9yOiBudWxsfSk7XG4gICAgICAgIH0pOyBcbiAgICB9XG5cbiAgICBhZGRJbnRlcmZhY2VTcGVjKGludGVyZmFjZVNwZWMpIHtcbiAgICBcdC8vIGZvcih2YXIgayBpbiBsZXhpY29uTWFwKSB7XG4gICAgXHQvLyBcdGxleGljb25NYXBba11cdFxuICAgIFx0Ly8gfVxuXG4gICAgXHR0aGlzLklOVEVSRkFDRV9TUEVDID0gaW50ZXJmYWNlU3BlYztcblxuXG5cbiAgICBcdGlmKHRoaXMuYXV0b0luaXRMZXhpY29uU3Vic2NyaXB0aW9ucyl7XG4gICAgXHRcdC8vIGNvbnNvbGUuZGVidWcoXCJQb3N0T2ZmaWNlIC0tLS0gX2luaXRMZXhpY29uU3Vic2NyaXB0aW9ucyBfX3N0YXJ0X19fIC0gXCIsIHRoaXMuSU5URVJGQUNFX1NQRUMpO1xuXHRcdFx0dGhpcy5faW5pdExleGljb25TdWJzY3JpcHRpb25zKCk7XG5cdFx0fVxuICAgIH1cblxuICAgIHB1Ymxpc2goX2xhYmVsLCBfbXNnKSB7XG4gICAgXHRjb25zb2xlLmRlYnVnKGBERUJVRzogUG9zdE9mZmljZS5Tb2NrZXQ6Ojoke3RoaXMubmFtZX0gSW5mbGVjdGluZyAke0pTT04uc3RyaW5naWZ5KF9tc2cpfWApXG5cbiAgICBcdHZhciBsZXhlbWUgPSB0aGlzLklOVEVSRkFDRV9TUEVDW19sYWJlbF07XG5cbiAgICBcdGlmKCFsZXhlbWUpe1xuICAgIFx0XHRsZXQgZXJyID0gYEVycm9yOiBObyBzdWNoIGxleGVtZSAtLT4gJHtfbGFiZWx9YDtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgXHR9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBpbmZsZWN0aW9uID0gbGV4ZW1lLmluZmxlY3QoX21zZyk7XG4gICAgICAgICAgICBpZighaW5mbGVjdGlvbil7XG4gICAgICAgICAgICBcdGxldCBlcnIgPSBgRXJyb3I6IEludmFsaWQgbXNnIGZvcm0gZm9yICR7X2xhYmVsfSAtLT4gJHtpbmZsZWN0aW9ufWA7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGVycilcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjpcIiwgXCJlcnJvciBpbmZsZWN0aW5nIG1zZyBsZXhlbWU6IFwiLCBlKTtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmRlYnVnKGBERUJVRzogUG9zdE9mZmljZS5Tb2NrZXQ6Ojoke3RoaXMubmFtZX06Ojoke19sYWJlbH0gUHVibGlzaGluZyAke2luZmxlY3Rpb24uc3RyaW5naWZ5KCl9YCk7XG5cbiAgICAgICAgbGV0IGV2ID0gdGhpcy5fbXNnVG9FdihfbGFiZWwsIGluZmxlY3Rpb24uZ2V0KCkpO1xuXHRcdHRoaXMuZGVmYXVsdFNjb3BlLmRpc3BhdGNoRXZlbnQoZXYpO1xuICAgIH1cblxuXHRfbXNnVG9FdihfbGFiZWwsX21zZywgbGV4ZW1lTmFtZSkge1xuXHRcdGxldCBsYWJlbCA9IF9sYWJlbCB8fCBcImFub255bW91cy1ldmVudFwiO1xuXHRcdGlmKGxleGVtZU5hbWUpe1xuXHRcdFx0bGV0IGxleGVtZSA9IHRoaXMuTEVYSUNPTltsZXhlbWVOYW1lXTtcblx0XHRcdGlmKCFsZXhlbWUpe1xuICAgICAgICBcdFx0bGV0IGVyciA9IGBFcnJvcjogaW52YWxpZCBsZXhlbWUgcHJvdmlkZWQgLS0+ICR7bGV4ZW1lTmFtZX1gO1xuXHQgICAgICAgICAgICB0aHJvdyBFcnJvcihlcnIpO1xuICAgICAgICBcdH1cbiAgICAgICAgXHR2YXIgaW5mbGVjdGlvbjtcbiAgICAgICAgXHR0cnkge1xuXHQgICAgICAgICAgICBpbmZsZWN0aW9uID0gbGV4ZW1lLmluZmxlY3QoX21zZyk7XG5cdCAgICAgICAgICAgIGlmKCFpbmZsZWN0aW9uKXtcblx0ICAgICAgICAgICAgXHRsZXQgZXJyID0gYEVycm9yOiBJbnZhbGlkIG1zZyBmb3JtIGZvciAke2xleGVtZU5hbWV9IC0tPiAke2luZmxlY3Rpb259YDtcblx0ICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcblx0ICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGVycik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9Y2F0Y2ggKGUpIHtcblx0ICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yOlwiLCBcImVycm9yIGluZmxlY3RpbmcgbXNnIGxleGVtZTogXCIsIGUpO1xuXHQgICAgICAgICAgICB0aHJvdyBFcnJvcihlKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBfbXNnID0gaW5mbGVjdGlvbi5nZXQoKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5ldyBDdXN0b21FdmVudChfbGFiZWwsIHtcblx0XHRcdGRldGFpbDogX21zZ1xuXHRcdH0pO1xuXHR9XG5cblx0ZGlzcGF0Y2hNZXNzYWdlKGxhYmVsLCBtc2csIGxleGVtZU5hbWUpe1xuXHRcdGxldCBldiA9IHRoaXMuX21zZ1RvRXYobGFiZWwsIG1zZywgbGV4ZW1lTmFtZSk7XG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KGV2KTtcblx0fVxuXG5cdGJyb2FkY2FzdE1zZyAobGFiZWwsIG1zZywgX3Njb3BlKXtcblx0XHRpZighbGFiZWwpe3JldHVybjt9XG5cdFx0dmFyIGV2bnQgPSBuZXcgQ3VzdG9tRXZlbnQobGFiZWwsIHtcblx0XHQgICAgZGV0YWlsOiBtc2dcblx0XHR9KTtcblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoZXZudCk7XG5cdH1cblxuXHRkaXNwYXRjaEV2ZW50IChtc2dFdiwgX3Njb3BlKXsgLy9mb3IgZm9yd2FyZCBjb21wYXRcblx0XHR2YXIgX3Njb3BlID0gX3Njb3BlIHx8IHRoaXMuZGVmYXVsdFNjb3BlO1xuXHRcdHRoaXMuZGVmYXVsdFNjb3BlLmRpc3BhdGNoRXZlbnQobXNnRXYpO1xuXHRcdGNvbnNvbGUubG9nKFwiaW1wOlwiLFwiUG9zdE9mZmljZVNvY2tldDogXCIsIHRoaXMubmFtZSwgXCIgLSBkaXNwYXRjaGVkIGV2ZW50ID0gXCIsIG1zZ0V2LnR5cGUsIFwiLCB3aXRoIHBheWxvYWQgPSBcIiwgbXNnRXYuZGV0YWlsKTtcblx0fVxuXG5cdGFkZExpc3RlbmVyKGxhYmVsLCBjYikge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+e1xuXHRcdFx0dmFyIF9jYiA9IChldik9PiB7XG5cblx0XHRcdFx0dHJ5e1xuXHRcdFx0XHRcdHZhciByZXN1bHQgPSBjYihldi5kZXRhaWwpO1xuXHRcdFx0XHRcdHJlc29sdmUocmVzdWx0KTtcblx0XHRcdFx0fWNhdGNoKGUpe1xuXHRcdFx0XHRcdHJlamVjdChlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5kZWZhdWx0U2NvcGUuYWRkRXZlbnRMaXN0ZW5lcihsYWJlbCxfY2IpO1xuXHRcdFx0dGhpcy5saXN0ZW5lcnMucHVzaCh7bGFiZWw6bGFiZWwsY2I6Y2J9KTtcblx0XHR9KTtcblx0XHQvLyB0aGlzLmRlZmF1bHRTY29wZS5hZGRFdmVudExpc3RlbmVyKGxhYmVsLGNiKTtcblx0XHQvLyB0aGlzLmxpc3RlbmVycy5wdXNoKHtsYWJlbDpsYWJlbCxjYjpjYn0pO1xuXHR9XG59XG5cblBvc3RPZmZpY2UuQnJva2VyID0gY2xhc3MgUG9zdE9mZmljZUJyb2tlciB7XG5cdGNvbnN0cnVjdG9yKF9sYWJlbCwgX2NiLCBfc2NvcGUpIHtcblx0XHR0aGlzLmxhYmVsID0gX2xhYmVsO1xuXHRcdHRoaXMuc2NvcGUgPSBfc2NvcGU7XG5cdFx0dGhpcy5jYWxsYmFja3MgPSBbXTtcblx0XHR0aGlzLmFkZENhbGxiYWNrKF9jYik7XG5cdH1cblxuXHRfZ2V0U2NvcGUoKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5zY29wZSkgfHwgUG9zdE9mZmljZS5nZXREZWZhdWx0U2NvcGUoKTtcblx0fVxuXG5cdGFkZENhbGxiYWNrIChfY2IpIHtcblx0XHR2YXIgX3RoaXMgPSB0aGlzO1xuXHRcdHRoaXMuY2FsbGJhY2tzLnB1c2goX2NiKTtcblx0XHQvLyAodGhpcy5fZ2V0U2NvcGUoKSkuYWRkRXZlbnRMaXN0ZW5lcihfdGhpcy5sYWJlbCwgX3RoaXMuZXhlY3V0ZSk7XG5cdH1cblxuXHRleGVjdXRlIChtc2cpIHtcblx0XHR0aGlzLmNhbGxiYWNrcy5mb3JFYWNoKChfY2IsIGlkeCk9Pntcblx0XHRcdGNvbnNvbGUubG9nKFwiUG9zdE9mZmljZS5Ccm9rZXIgZXhlY3V0aW5nIGNhbGxiYWNrIC0gXCIsIGlkeCk7XG5cdFx0XHR0cnl7ICAvL3RvIHByZXZlbnQgYW4gZXJyb3IgY2F1c2luZyBjYiBibG9jayBleGVjdXRpb24gb2Ygb3RoZXIgY2JzXG5cdFx0XHRcdF9jYihtc2cpO1xuXHRcdFx0fWNhdGNoKGUpe1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcIlBvc3RPZmZpY2UuQnJva2VyIGVycm9yIGV4ZWN1dGluZyBjYWxsYmFjayAtIFwiLCBpZHgpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRjb25zb2xlLmxvZyhcIlBvc3RPZmZpY2UuQnJva2VyIHN1Y2Nlc3NmdWxseSBleGVjdXRlZCBjYWxsYmFjayAtIFwiLCBpZHgpO1xuXHRcdH0pO1xuXHR9XG59XG5cblxuUG9zdE9mZmljZS5NZXNzYWdlID0gY2xhc3MgUG9zdE9mZmljZU1lc3NhZ2Uge1xuXG4gICAgc3RhdGljIHNjaGVtYSA9IHt9O1xuXG4gICAgY29uc3RydWN0b3IobXNnKSB7XG4gICAgICAgIHRoaXMubXNnID0gey4uLnRoaXMuY29uc3RydWN0b3Iuc2NoZW1hLC4uLm1zZ31cbiAgICB9XG5cbiAgICBoYXNLZXkoa2V5KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBrZXlMaXN0ID0ga2V5LnNwbGl0KFwiLlwiKTtcbiAgICAgICAgaWYoa2V5TGlzdC5sZW5ndGggPT0gMSl7XG4gICAgICAgICAgICByZXR1cm4ga2V5IGluIHRoaXMubXNnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9tc2cgPSB0aGlzLm1zZztcbiAgICAgICAgdmFyIGtleUlkeCA9IDA7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9IHRydWU7ICAvL25lZWQgdG8gZmlndXJlIG91dCBhIHByb3BlciB3YXkgZm9yIHRoaXMgaW5pdGlhbCB2YWx1ZSB0byBiZSBmYWxzZSAoY3VycmVudGx5IGluc2VjdXJlKVxuICAgICAgICB3aGlsZSAoa2V5SWR4IDwga2V5TGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBfa2V5VG9UZXN0ID0ga2V5TGlzdFtrZXlJZHhdO1xuICAgICAgICAgICAgaWYoX2tleVRvVGVzdCBpbiBfbXNnKSB7XG4gICAgICAgICAgICAgICAgX21zZyA9IF9tc2dbX2tleVRvVGVzdF07XG4gICAgICAgICAgICAgICAgaSs9MTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBoYXNLZXlzKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTsgIC8vbmVlZCB0byBmaWd1cmUgb3V0IGEgcHJvcGVyIHdheSBmb3IgdGhpcyBpbml0aWFsIHZhbHVlIHRvIGJlIGZhbHNlIChjdXJyZW50bHkgaW5zZWN1cmUpXG4gICAgICAgIEFycmF5LmZyb20oYXJndW1lbnRzKS5mb3JFYWNoKChrZXkpPT57XG4gICAgICAgICAgICBpZighX3RoaXMuaGFzS2V5KGtleSkpe3ZhbGlkPWZhbHNlfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdXBkYXRlKG1zZykge1xuICAgICAgICB0aGlzLm1zZyA9IHsuLi50aGlzLm1zZywuLi5tc2d9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHN0cmluZ2lmeSgpIHtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLm1zZyk7XG4gICAgfVxufVxuXG5Qb3N0T2ZmaWNlLmRlZmF1bHRTY29wZSA9IFBvc3RPZmZpY2UuYWRkU29ja2V0KEV2ZW50VGFyZ2V0LFwiZ2xvYmFsXCIpO1xuUG9zdE9mZmljZS5zb2NrZXRzLmdsb2JhbC5vbm1lc3NhZ2UgPSAoZXYpPT57XG5cdHJldHVybiBldjtcbn1cblxuZXhwb3J0IHtcblx0UG9zdE9mZmljZVxufSIsImltcG9ydCB7IFBvc3RPZmZpY2UgfSBmcm9tIFwiLi9wb3N0X29mZmljZS5qc1wiO1xuXG5jbGFzcyBET01Db21wb25lbnRSZWdpc3RyeSB7XG5cdHN0YXRpYyBicm9rZXJMYWJlbCAoKXtyZXR1cm4gXCJOZXdDb21wb25lbnRSZWdpc3RyeVwiO31cblxuXHRzdGF0aWMgc3RhcnQoKSB7XG5cdFx0aWYoRE9NQ29tcG9uZW50UmVnaXN0cnkuc3RhcnRlZCl7XG5cdFx0XHRjb25zb2xlLmxvZyhcIkRPTUNvbXBvbmVudFJlZ2lzdHJ5IGFscmVhZHkgc3RhcnRlZFwiKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0UG9zdE9mZmljZS5hZGRHbG9iYWxMaXN0ZW5lcihET01Db21wb25lbnRSZWdpc3RyeS5icm9rZXJMYWJlbCgpLCAoZXYpPT4ge1xuXHRcdFx0Y29uc29sZS5sb2coXCJyZWdpc3RlcmluZyBuZXcgY29tcG9uZW50IC0gXCIsIGV2LmRldGFpbCk7XG5cdFx0XHQvLyBjdXN0b21FbGVtZW50cy5kZWZpbmUoZS5kZXRhaWwubmFtZSwgZS5kZXRhaWwuX2NvbnN0cnVjdG9yKTtcblx0XHR9KTtcblx0XHQvLyBjb25zb2xlLmxvZyhcImltcDpcIiwgXCJSRUdJU1RFUkVEIEJST0tFUiA9PT0gXCIsIERPTUNvbXBvbmVudFJlZ2lzdHJ5LmJyb2tlckxhYmVsKTtcblx0XHRET01Db21wb25lbnRSZWdpc3RyeS5zdGFydGVkID0gdHJ1ZTtcblx0fVxuXG5cdHN0YXRpYyBhZGQod2ViQ29tcCl7XG5cdFx0Ly8gY3VzdG9tRWxlbWVudHMuZGVmaW5lKHdlYkNvbXAuZG9tRWxOYW1lLCB3ZWJDb21wKTtcblx0XHRET01Db21wb25lbnRSZWdpc3RyeS5jb21wb25lbnRzLnB1c2goe25hbWU6d2ViQ29tcC5kb21FbE5hbWUsIGVycm9yOiB3ZWJDb21wLmVycm9yLCBpbnN0YW5jZXM6IFtdfSk7XG5cdFx0UG9zdE9mZmljZS5icm9hZGNhc3RNc2coRE9NQ29tcG9uZW50UmVnaXN0cnkuYnJva2VyTGFiZWwoKSx7bmFtZTogd2ViQ29tcC5kb21FbE5hbWV9LCBkb2N1bWVudCk7XG5cdH1cblx0c3RhdGljIGxpc3QoKXtcblx0XHRyZXR1cm4gdGhpcy5jb21wb25lbnRzO1xuXHR9XG5cblx0c3RhdGljIGZpbmRJbnN0YW5jZSh1aWQpIHtcblx0ICBcdHZhciBwYXJlbnQgPSBudWxsO1xuXHQgICAgdmFyIGVudHJ5ID0gRE9NQ29tcG9uZW50UmVnaXN0cnkubGlzdCgpLmZpbmQoX2VudHJ5ID0+IHtcblx0ICAgICAgcGFyZW50ID0gX2VudHJ5Lmluc3RhbmNlcy5maW5kKChfaW5zdGFuY2UpPT57XG5cdCAgICAgIFx0cmV0dXJuIF9pbnN0YW5jZS51aWQgPT0gdWlkO1xuXHQgICAgICB9KTtcblx0ICAgICAgcmV0dXJuIHBhcmVudDtcblx0ICAgIH0pO1xuXG5cdCAgICByZXR1cm4gcGFyZW50O1xuXHR9XG5cblx0c3RhdGljIGZpbmQoZG9tRWxOYW1lKXtcblx0XHRyZXR1cm4gRE9NQ29tcG9uZW50UmVnaXN0cnkubGlzdCgpLmZpbmQoKF9lbnRyeSk9Pntcblx0XHRcdHJldHVybiBfZW50cnkubmFtZSA9PSBkb21FbE5hbWU7XG5cdFx0fSlcblx0fVxuXG5cdHN0YXRpYyByZWdpc3Rlcih3ZWJDb21wKSB7XG5cdFx0aWYodHlwZW9mIHdlYkNvbXAuZG9tRWxOYW1lID09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHR2YXIgd2ViQ29tcERvbU5hbWUgPSB3ZWJDb21wLmRvbUVsTmFtZSgpO1xuXHRcdH1lbHNle1xuXHRcdFx0dmFyIHdlYkNvbXBEb21OYW1lID0gd2ViQ29tcC5kb21FbE5hbWU7XG5cdFx0fVxuXHRcdHRyeXtcblx0XHRcdGN1c3RvbUVsZW1lbnRzLmRlZmluZSh3ZWJDb21wRG9tTmFtZSwgd2ViQ29tcCk7XG5cdFx0fWNhdGNoKGUpe1xuXHRcdFx0d2ViQ29tcC5lcnJvciA9IGU7XG5cdFx0XHRjb25zb2xlLmxvZyhcImltcDpcIiwgZSk7XG5cdFx0fVxuXHRcdERPTUNvbXBvbmVudFJlZ2lzdHJ5LmFkZCh3ZWJDb21wKTtcblx0XHQvLyBpZih3ZWJDb21wLnJlZ2lzdGVyKXtcblx0XHQvLyBcdHdlYkNvbXAucmVnaXN0ZXIoKTtcblx0XHQvLyB9XG5cdH1cblxuXHRzdGF0aWMgYXN5bmMgdXBkYXRlKGluc3RhbmNlKSB7XG5cdFx0dmFyIF9lbnRyeSA9IERPTUNvbXBvbmVudFJlZ2lzdHJ5LmZpbmQoaW5zdGFuY2UuZG9tRWxOYW1lKTtcblxuXHRcdGlmKCFfZW50cnkpeyAvL3dhaXQgZm9yIDEgc2Vjb25kLiAvL2ZvciByb290IGNvbXBvbmVudHMgcmVnaXN0cnkgbWlnaHQgbm90IGJlIGF2YWlsYWJsZSBpbW1lZGlhdGVseSBkdXJpbmcgbG9hZC5cblx0ICAgIFx0IF9lbnRyeSA9IGF3YWl0IChuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+e1xuXHQgICAgXHQgXHRzZXRUaW1lb3V0KCgpPT57XG5cdFx0ICAgIFx0IFx0cmV0dXJuIHJlc29sdmUoRE9NQ29tcG9uZW50UmVnaXN0cnkuZmluZC5jYWxsKHRoaXMsIGluc3RhbmNlLmRvbUVsTmFtZSkpO1xuXHRcdCAgICBcdH0sMTAwMCk7XG5cdFx0ICAgIFx0c2V0VGltZW91dCgoKT0+e1xuXHRcdCAgICBcdCBcdHJldHVybiByZWplY3QobnVsbCk7XG5cdFx0ICAgIFx0fSwxNTAwKTtcblx0ICAgIFx0IH0pKVxuXHQgICAgfVxuXG5cdFx0aWYoX2VudHJ5KXtcblx0XHRcdF9lbnRyeS5pbnN0YW5jZXMucHVzaChpbnN0YW5jZSk7XG5cdFx0fVxuXHR9XG59XG5cbkRPTUNvbXBvbmVudFJlZ2lzdHJ5LmNvbXBvbmVudHMgPSBbXTtcblxuZXhwb3J0IHtcblx0RE9NQ29tcG9uZW50UmVnaXN0cnlcbn0iLCIvKiFcbiAgICBsb2NhbEZvcmFnZSAtLSBPZmZsaW5lIFN0b3JhZ2UsIEltcHJvdmVkXG4gICAgVmVyc2lvbiAxLjEwLjBcbiAgICBodHRwczovL2xvY2FsZm9yYWdlLmdpdGh1Yi5pby9sb2NhbEZvcmFnZVxuICAgIChjKSAyMDEzLTIwMTcgTW96aWxsYSwgQXBhY2hlIExpY2Vuc2UgMi4wXG4qL1xuKGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09XCJvYmplY3RcIiYmdHlwZW9mIG1vZHVsZSE9PVwidW5kZWZpbmVkXCIpe21vZHVsZS5leHBvcnRzPWYoKX1lbHNlIGlmKHR5cGVvZiBkZWZpbmU9PT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiKXtnPXdpbmRvd31lbHNlIGlmKHR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiKXtnPWdsb2JhbH1lbHNlIGlmKHR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcubG9jYWxmb3JhZ2UgPSBmKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiAoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgKGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIiwgZil9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSh7MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG52YXIgTXV0YXRpb24gPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcblxudmFyIHNjaGVkdWxlRHJhaW47XG5cbntcbiAgaWYgKE11dGF0aW9uKSB7XG4gICAgdmFyIGNhbGxlZCA9IDA7XG4gICAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uKG5leHRUaWNrKTtcbiAgICB2YXIgZWxlbWVudCA9IGdsb2JhbC5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50LCB7XG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gICAgfSk7XG4gICAgc2NoZWR1bGVEcmFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGVsZW1lbnQuZGF0YSA9IChjYWxsZWQgPSArK2NhbGxlZCAlIDIpO1xuICAgIH07XG4gIH0gZWxzZSBpZiAoIWdsb2JhbC5zZXRJbW1lZGlhdGUgJiYgdHlwZW9mIGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgY2hhbm5lbCA9IG5ldyBnbG9iYWwuTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IG5leHRUaWNrO1xuICAgIHNjaGVkdWxlRHJhaW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKDApO1xuICAgIH07XG4gIH0gZWxzZSBpZiAoJ2RvY3VtZW50JyBpbiBnbG9iYWwgJiYgJ29ucmVhZHlzdGF0ZWNoYW5nZScgaW4gZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKSB7XG4gICAgc2NoZWR1bGVEcmFpbiA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgdmFyIHNjcmlwdEVsID0gZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgc2NyaXB0RWwub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBuZXh0VGljaygpO1xuXG4gICAgICAgIHNjcmlwdEVsLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgIHNjcmlwdEVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0RWwpO1xuICAgICAgICBzY3JpcHRFbCA9IG51bGw7XG4gICAgICB9O1xuICAgICAgZ2xvYmFsLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChzY3JpcHRFbCk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBzY2hlZHVsZURyYWluID0gZnVuY3Rpb24gKCkge1xuICAgICAgc2V0VGltZW91dChuZXh0VGljaywgMCk7XG4gICAgfTtcbiAgfVxufVxuXG52YXIgZHJhaW5pbmc7XG52YXIgcXVldWUgPSBbXTtcbi8vbmFtZWQgbmV4dFRpY2sgZm9yIGxlc3MgY29uZnVzaW5nIHN0YWNrIHRyYWNlc1xuZnVuY3Rpb24gbmV4dFRpY2soKSB7XG4gIGRyYWluaW5nID0gdHJ1ZTtcbiAgdmFyIGksIG9sZFF1ZXVlO1xuICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAobGVuKSB7XG4gICAgb2xkUXVldWUgPSBxdWV1ZTtcbiAgICBxdWV1ZSA9IFtdO1xuICAgIGkgPSAtMTtcbiAgICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgICBvbGRRdWV1ZVtpXSgpO1xuICAgIH1cbiAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gIH1cbiAgZHJhaW5pbmcgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbW1lZGlhdGU7XG5mdW5jdGlvbiBpbW1lZGlhdGUodGFzaykge1xuICBpZiAocXVldWUucHVzaCh0YXNrKSA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICBzY2hlZHVsZURyYWluKCk7XG4gIH1cbn1cblxufSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG59LHt9XSwyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciBpbW1lZGlhdGUgPSBfZGVyZXFfKDEpO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gSU5URVJOQUwoKSB7fVxuXG52YXIgaGFuZGxlcnMgPSB7fTtcblxudmFyIFJFSkVDVEVEID0gWydSRUpFQ1RFRCddO1xudmFyIEZVTEZJTExFRCA9IFsnRlVMRklMTEVEJ107XG52YXIgUEVORElORyA9IFsnUEVORElORyddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG5cbmZ1bmN0aW9uIFByb21pc2UocmVzb2x2ZXIpIHtcbiAgaWYgKHR5cGVvZiByZXNvbHZlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Jlc29sdmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG4gIHRoaXMuc3RhdGUgPSBQRU5ESU5HO1xuICB0aGlzLnF1ZXVlID0gW107XG4gIHRoaXMub3V0Y29tZSA9IHZvaWQgMDtcbiAgaWYgKHJlc29sdmVyICE9PSBJTlRFUk5BTCkge1xuICAgIHNhZmVseVJlc29sdmVUaGVuYWJsZSh0aGlzLCByZXNvbHZlcik7XG4gIH1cbn1cblxuUHJvbWlzZS5wcm90b3R5cGVbXCJjYXRjaFwiXSA9IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gIHJldHVybiB0aGlzLnRoZW4obnVsbCwgb25SZWplY3RlZCk7XG59O1xuUHJvbWlzZS5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uIChvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICBpZiAodHlwZW9mIG9uRnVsZmlsbGVkICE9PSAnZnVuY3Rpb24nICYmIHRoaXMuc3RhdGUgPT09IEZVTEZJTExFRCB8fFxuICAgIHR5cGVvZiBvblJlamVjdGVkICE9PSAnZnVuY3Rpb24nICYmIHRoaXMuc3RhdGUgPT09IFJFSkVDVEVEKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgdmFyIHByb21pc2UgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihJTlRFUk5BTCk7XG4gIGlmICh0aGlzLnN0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgdmFyIHJlc29sdmVyID0gdGhpcy5zdGF0ZSA9PT0gRlVMRklMTEVEID8gb25GdWxmaWxsZWQgOiBvblJlamVjdGVkO1xuICAgIHVud3JhcChwcm9taXNlLCByZXNvbHZlciwgdGhpcy5vdXRjb21lKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnF1ZXVlLnB1c2gobmV3IFF1ZXVlSXRlbShwcm9taXNlLCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuZnVuY3Rpb24gUXVldWVJdGVtKHByb21pc2UsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gIGlmICh0eXBlb2Ygb25GdWxmaWxsZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLm9uRnVsZmlsbGVkID0gb25GdWxmaWxsZWQ7XG4gICAgdGhpcy5jYWxsRnVsZmlsbGVkID0gdGhpcy5vdGhlckNhbGxGdWxmaWxsZWQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBvblJlamVjdGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5vblJlamVjdGVkID0gb25SZWplY3RlZDtcbiAgICB0aGlzLmNhbGxSZWplY3RlZCA9IHRoaXMub3RoZXJDYWxsUmVqZWN0ZWQ7XG4gIH1cbn1cblF1ZXVlSXRlbS5wcm90b3R5cGUuY2FsbEZ1bGZpbGxlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICBoYW5kbGVycy5yZXNvbHZlKHRoaXMucHJvbWlzZSwgdmFsdWUpO1xufTtcblF1ZXVlSXRlbS5wcm90b3R5cGUub3RoZXJDYWxsRnVsZmlsbGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHVud3JhcCh0aGlzLnByb21pc2UsIHRoaXMub25GdWxmaWxsZWQsIHZhbHVlKTtcbn07XG5RdWV1ZUl0ZW0ucHJvdG90eXBlLmNhbGxSZWplY3RlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICBoYW5kbGVycy5yZWplY3QodGhpcy5wcm9taXNlLCB2YWx1ZSk7XG59O1xuUXVldWVJdGVtLnByb3RvdHlwZS5vdGhlckNhbGxSZWplY3RlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB1bndyYXAodGhpcy5wcm9taXNlLCB0aGlzLm9uUmVqZWN0ZWQsIHZhbHVlKTtcbn07XG5cbmZ1bmN0aW9uIHVud3JhcChwcm9taXNlLCBmdW5jLCB2YWx1ZSkge1xuICBpbW1lZGlhdGUoZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXR1cm5WYWx1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuVmFsdWUgPSBmdW5jKHZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gaGFuZGxlcnMucmVqZWN0KHByb21pc2UsIGUpO1xuICAgIH1cbiAgICBpZiAocmV0dXJuVmFsdWUgPT09IHByb21pc2UpIHtcbiAgICAgIGhhbmRsZXJzLnJlamVjdChwcm9taXNlLCBuZXcgVHlwZUVycm9yKCdDYW5ub3QgcmVzb2x2ZSBwcm9taXNlIHdpdGggaXRzZWxmJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGVycy5yZXNvbHZlKHByb21pc2UsIHJldHVyblZhbHVlKTtcbiAgICB9XG4gIH0pO1xufVxuXG5oYW5kbGVycy5yZXNvbHZlID0gZnVuY3Rpb24gKHNlbGYsIHZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSB0cnlDYXRjaChnZXRUaGVuLCB2YWx1ZSk7XG4gIGlmIChyZXN1bHQuc3RhdHVzID09PSAnZXJyb3InKSB7XG4gICAgcmV0dXJuIGhhbmRsZXJzLnJlamVjdChzZWxmLCByZXN1bHQudmFsdWUpO1xuICB9XG4gIHZhciB0aGVuYWJsZSA9IHJlc3VsdC52YWx1ZTtcblxuICBpZiAodGhlbmFibGUpIHtcbiAgICBzYWZlbHlSZXNvbHZlVGhlbmFibGUoc2VsZiwgdGhlbmFibGUpO1xuICB9IGVsc2Uge1xuICAgIHNlbGYuc3RhdGUgPSBGVUxGSUxMRUQ7XG4gICAgc2VsZi5vdXRjb21lID0gdmFsdWU7XG4gICAgdmFyIGkgPSAtMTtcbiAgICB2YXIgbGVuID0gc2VsZi5xdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgICAgc2VsZi5xdWV1ZVtpXS5jYWxsRnVsZmlsbGVkKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNlbGY7XG59O1xuaGFuZGxlcnMucmVqZWN0ID0gZnVuY3Rpb24gKHNlbGYsIGVycm9yKSB7XG4gIHNlbGYuc3RhdGUgPSBSRUpFQ1RFRDtcbiAgc2VsZi5vdXRjb21lID0gZXJyb3I7XG4gIHZhciBpID0gLTE7XG4gIHZhciBsZW4gPSBzZWxmLnF1ZXVlLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIHNlbGYucXVldWVbaV0uY2FsbFJlamVjdGVkKGVycm9yKTtcbiAgfVxuICByZXR1cm4gc2VsZjtcbn07XG5cbmZ1bmN0aW9uIGdldFRoZW4ob2JqKSB7XG4gIC8vIE1ha2Ugc3VyZSB3ZSBvbmx5IGFjY2VzcyB0aGUgYWNjZXNzb3Igb25jZSBhcyByZXF1aXJlZCBieSB0aGUgc3BlY1xuICB2YXIgdGhlbiA9IG9iaiAmJiBvYmoudGhlbjtcbiAgaWYgKG9iaiAmJiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykgJiYgdHlwZW9mIHRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gYXBweVRoZW4oKSB7XG4gICAgICB0aGVuLmFwcGx5KG9iaiwgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIHNhZmVseVJlc29sdmVUaGVuYWJsZShzZWxmLCB0aGVuYWJsZSkge1xuICAvLyBFaXRoZXIgZnVsZmlsbCwgcmVqZWN0IG9yIHJlamVjdCB3aXRoIGVycm9yXG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gb25FcnJvcih2YWx1ZSkge1xuICAgIGlmIChjYWxsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICBoYW5kbGVycy5yZWplY3Qoc2VsZiwgdmFsdWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25TdWNjZXNzKHZhbHVlKSB7XG4gICAgaWYgKGNhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIGhhbmRsZXJzLnJlc29sdmUoc2VsZiwgdmFsdWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJ5VG9VbndyYXAoKSB7XG4gICAgdGhlbmFibGUob25TdWNjZXNzLCBvbkVycm9yKTtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSB0cnlDYXRjaCh0cnlUb1Vud3JhcCk7XG4gIGlmIChyZXN1bHQuc3RhdHVzID09PSAnZXJyb3InKSB7XG4gICAgb25FcnJvcihyZXN1bHQudmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyeUNhdGNoKGZ1bmMsIHZhbHVlKSB7XG4gIHZhciBvdXQgPSB7fTtcbiAgdHJ5IHtcbiAgICBvdXQudmFsdWUgPSBmdW5jKHZhbHVlKTtcbiAgICBvdXQuc3RhdHVzID0gJ3N1Y2Nlc3MnO1xuICB9IGNhdGNoIChlKSB7XG4gICAgb3V0LnN0YXR1cyA9ICdlcnJvcic7XG4gICAgb3V0LnZhbHVlID0gZTtcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuXG5Qcm9taXNlLnJlc29sdmUgPSByZXNvbHZlO1xuZnVuY3Rpb24gcmVzb2x2ZSh2YWx1ZSkge1xuICBpZiAodmFsdWUgaW5zdGFuY2VvZiB0aGlzKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBoYW5kbGVycy5yZXNvbHZlKG5ldyB0aGlzKElOVEVSTkFMKSwgdmFsdWUpO1xufVxuXG5Qcm9taXNlLnJlamVjdCA9IHJlamVjdDtcbmZ1bmN0aW9uIHJlamVjdChyZWFzb24pIHtcbiAgdmFyIHByb21pc2UgPSBuZXcgdGhpcyhJTlRFUk5BTCk7XG4gIHJldHVybiBoYW5kbGVycy5yZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbn1cblxuUHJvbWlzZS5hbGwgPSBhbGw7XG5mdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXJhYmxlKSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgIHJldHVybiB0aGlzLnJlamVjdChuZXcgVHlwZUVycm9yKCdtdXN0IGJlIGFuIGFycmF5JykpO1xuICB9XG5cbiAgdmFyIGxlbiA9IGl0ZXJhYmxlLmxlbmd0aDtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICBpZiAoIWxlbikge1xuICAgIHJldHVybiB0aGlzLnJlc29sdmUoW10pO1xuICB9XG5cbiAgdmFyIHZhbHVlcyA9IG5ldyBBcnJheShsZW4pO1xuICB2YXIgcmVzb2x2ZWQgPSAwO1xuICB2YXIgaSA9IC0xO1xuICB2YXIgcHJvbWlzZSA9IG5ldyB0aGlzKElOVEVSTkFMKTtcblxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgYWxsUmVzb2x2ZXIoaXRlcmFibGVbaV0sIGkpO1xuICB9XG4gIHJldHVybiBwcm9taXNlO1xuICBmdW5jdGlvbiBhbGxSZXNvbHZlcih2YWx1ZSwgaSkge1xuICAgIHNlbGYucmVzb2x2ZSh2YWx1ZSkudGhlbihyZXNvbHZlRnJvbUFsbCwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICBoYW5kbGVycy5yZWplY3QocHJvbWlzZSwgZXJyb3IpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIHJlc29sdmVGcm9tQWxsKG91dFZhbHVlKSB7XG4gICAgICB2YWx1ZXNbaV0gPSBvdXRWYWx1ZTtcbiAgICAgIGlmICgrK3Jlc29sdmVkID09PSBsZW4gJiYgIWNhbGxlZCkge1xuICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICBoYW5kbGVycy5yZXNvbHZlKHByb21pc2UsIHZhbHVlcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblByb21pc2UucmFjZSA9IHJhY2U7XG5mdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyYWJsZSkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICByZXR1cm4gdGhpcy5yZWplY3QobmV3IFR5cGVFcnJvcignbXVzdCBiZSBhbiBhcnJheScpKTtcbiAgfVxuXG4gIHZhciBsZW4gPSBpdGVyYWJsZS5sZW5ndGg7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgaWYgKCFsZW4pIHtcbiAgICByZXR1cm4gdGhpcy5yZXNvbHZlKFtdKTtcbiAgfVxuXG4gIHZhciBpID0gLTE7XG4gIHZhciBwcm9taXNlID0gbmV3IHRoaXMoSU5URVJOQUwpO1xuXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICByZXNvbHZlcihpdGVyYWJsZVtpXSk7XG4gIH1cbiAgcmV0dXJuIHByb21pc2U7XG4gIGZ1bmN0aW9uIHJlc29sdmVyKHZhbHVlKSB7XG4gICAgc2VsZi5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgaGFuZGxlcnMucmVzb2x2ZShwcm9taXNlLCByZXNwb25zZSk7XG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICBoYW5kbGVycy5yZWplY3QocHJvbWlzZSwgZXJyb3IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbn0se1wiMVwiOjF9XSwzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAoZ2xvYmFsKXtcbid1c2Ugc3RyaWN0JztcbmlmICh0eXBlb2YgZ2xvYmFsLlByb21pc2UgIT09ICdmdW5jdGlvbicpIHtcbiAgZ2xvYmFsLlByb21pc2UgPSBfZGVyZXFfKDIpO1xufVxuXG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcbn0se1wiMlwiOjJ9XSw0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBnZXRJREIoKSB7XG4gICAgLyogZ2xvYmFsIGluZGV4ZWREQix3ZWJraXRJbmRleGVkREIsbW96SW5kZXhlZERCLE9JbmRleGVkREIsbXNJbmRleGVkREIgKi9cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGluZGV4ZWREQiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBpbmRleGVkREI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB3ZWJraXRJbmRleGVkREIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gd2Via2l0SW5kZXhlZERCO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbW96SW5kZXhlZERCICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIG1vekluZGV4ZWREQjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIE9JbmRleGVkREIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gT0luZGV4ZWREQjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG1zSW5kZXhlZERCICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIG1zSW5kZXhlZERCO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxufVxuXG52YXIgaWRiID0gZ2V0SURCKCk7XG5cbmZ1bmN0aW9uIGlzSW5kZXhlZERCVmFsaWQoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBJbmRleGVkREI7IGZhbGwgYmFjayB0byB2ZW5kb3ItcHJlZml4ZWQgdmVyc2lvbnNcbiAgICAgICAgLy8gaWYgbmVlZGVkLlxuICAgICAgICBpZiAoIWlkYiB8fCAhaWRiLm9wZW4pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBtaW1pYyBQb3VjaERCIGhlcmU7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIFdlIHRlc3QgZm9yIG9wZW5EYXRhYmFzZSBiZWNhdXNlIElFIE1vYmlsZSBpZGVudGlmaWVzIGl0c2VsZlxuICAgICAgICAvLyBhcyBTYWZhcmkuIE9oIHRoZSBsdWx6Li4uXG4gICAgICAgIHZhciBpc1NhZmFyaSA9IHR5cGVvZiBvcGVuRGF0YWJhc2UgIT09ICd1bmRlZmluZWQnICYmIC8oU2FmYXJpfGlQaG9uZXxpUGFkfGlQb2QpLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmICEvQ2hyb21lLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmICEvQmxhY2tCZXJyeS8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pO1xuXG4gICAgICAgIHZhciBoYXNGZXRjaCA9IHR5cGVvZiBmZXRjaCA9PT0gJ2Z1bmN0aW9uJyAmJiBmZXRjaC50b1N0cmluZygpLmluZGV4T2YoJ1tuYXRpdmUgY29kZScpICE9PSAtMTtcblxuICAgICAgICAvLyBTYWZhcmkgPDEwLjEgZG9lcyBub3QgbWVldCBvdXIgcmVxdWlyZW1lbnRzIGZvciBJREIgc3VwcG9ydFxuICAgICAgICAvLyAoc2VlOiBodHRwczovL2dpdGh1Yi5jb20vcG91Y2hkYi9wb3VjaGRiL2lzc3Vlcy81NTcyKS5cbiAgICAgICAgLy8gU2FmYXJpIDEwLjEgc2hpcHBlZCB3aXRoIGZldGNoLCB3ZSBjYW4gdXNlIHRoYXQgdG8gZGV0ZWN0IGl0LlxuICAgICAgICAvLyBOb3RlOiB0aGlzIGNyZWF0ZXMgaXNzdWVzIHdpdGggYHdpbmRvdy5mZXRjaGAgcG9seWZpbGxzIGFuZFxuICAgICAgICAvLyBvdmVycmlkZXM7IHNlZTpcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2xvY2FsRm9yYWdlL2xvY2FsRm9yYWdlL2lzc3Vlcy84NTZcbiAgICAgICAgcmV0dXJuICghaXNTYWZhcmkgfHwgaGFzRmV0Y2gpICYmIHR5cGVvZiBpbmRleGVkREIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIC8vIHNvbWUgb3V0ZGF0ZWQgaW1wbGVtZW50YXRpb25zIG9mIElEQiB0aGF0IGFwcGVhciBvbiBTYW1zdW5nXG4gICAgICAgIC8vIGFuZCBIVEMgQW5kcm9pZCBkZXZpY2VzIDw0LjQgYXJlIG1pc3NpbmcgSURCS2V5UmFuZ2VcbiAgICAgICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9sb2NhbEZvcmFnZS9pc3N1ZXMvMTI4XG4gICAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvbG9jYWxGb3JhZ2UvaXNzdWVzLzI3MlxuICAgICAgICB0eXBlb2YgSURCS2V5UmFuZ2UgIT09ICd1bmRlZmluZWQnO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuLy8gQWJzdHJhY3RzIGNvbnN0cnVjdGluZyBhIEJsb2Igb2JqZWN0LCBzbyBpdCBhbHNvIHdvcmtzIGluIG9sZGVyXG4vLyBicm93c2VycyB0aGF0IGRvbid0IHN1cHBvcnQgdGhlIG5hdGl2ZSBCbG9iIGNvbnN0cnVjdG9yLiAoaS5lLlxuLy8gb2xkIFF0V2ViS2l0IHZlcnNpb25zLCBhdCBsZWFzdCkuXG4vLyBBYnN0cmFjdHMgY29uc3RydWN0aW5nIGEgQmxvYiBvYmplY3QsIHNvIGl0IGFsc28gd29ya3MgaW4gb2xkZXJcbi8vIGJyb3dzZXJzIHRoYXQgZG9uJ3Qgc3VwcG9ydCB0aGUgbmF0aXZlIEJsb2IgY29uc3RydWN0b3IuIChpLmUuXG4vLyBvbGQgUXRXZWJLaXQgdmVyc2lvbnMsIGF0IGxlYXN0KS5cbmZ1bmN0aW9uIGNyZWF0ZUJsb2IocGFydHMsIHByb3BlcnRpZXMpIHtcbiAgICAvKiBnbG9iYWwgQmxvYkJ1aWxkZXIsTVNCbG9iQnVpbGRlcixNb3pCbG9iQnVpbGRlcixXZWJLaXRCbG9iQnVpbGRlciAqL1xuICAgIHBhcnRzID0gcGFydHMgfHwgW107XG4gICAgcHJvcGVydGllcyA9IHByb3BlcnRpZXMgfHwge307XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIG5ldyBCbG9iKHBhcnRzLCBwcm9wZXJ0aWVzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlLm5hbWUgIT09ICdUeXBlRXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBCdWlsZGVyID0gdHlwZW9mIEJsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IEJsb2JCdWlsZGVyIDogdHlwZW9mIE1TQmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnID8gTVNCbG9iQnVpbGRlciA6IHR5cGVvZiBNb3pCbG9iQnVpbGRlciAhPT0gJ3VuZGVmaW5lZCcgPyBNb3pCbG9iQnVpbGRlciA6IFdlYktpdEJsb2JCdWlsZGVyO1xuICAgICAgICB2YXIgYnVpbGRlciA9IG5ldyBCdWlsZGVyKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGJ1aWxkZXIuYXBwZW5kKHBhcnRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnVpbGRlci5nZXRCbG9iKHByb3BlcnRpZXMudHlwZSk7XG4gICAgfVxufVxuXG4vLyBUaGlzIGlzIENvbW1vbkpTIGJlY2F1c2UgbGllIGlzIGFuIGV4dGVybmFsIGRlcGVuZGVuY3ksIHNvIFJvbGx1cFxuLy8gY2FuIGp1c3QgaWdub3JlIGl0LlxuaWYgKHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEluIHRoZSBcIm5vcHJvbWlzZXNcIiBidWlsZCB0aGlzIHdpbGwganVzdCB0aHJvdyBpZiB5b3UgZG9uJ3QgaGF2ZVxuICAgIC8vIGEgZ2xvYmFsIHByb21pc2Ugb2JqZWN0LCBidXQgaXQgd291bGQgdGhyb3cgYW55d2F5IGxhdGVyLlxuICAgIF9kZXJlcV8oMyk7XG59XG52YXIgUHJvbWlzZSQxID0gUHJvbWlzZTtcblxuZnVuY3Rpb24gZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKSB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBleGVjdXRlVHdvQ2FsbGJhY2tzKHByb21pc2UsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm9taXNlLnRoZW4oY2FsbGJhY2spO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZXJyb3JDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm9taXNlW1wiY2F0Y2hcIl0oZXJyb3JDYWxsYmFjayk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVLZXkoa2V5KSB7XG4gICAgLy8gQ2FzdCB0aGUga2V5IHRvIGEgc3RyaW5nLCBhcyB0aGF0J3MgYWxsIHdlIGNhbiBzZXQgYXMgYSBrZXkuXG4gICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihrZXkgKyAnIHVzZWQgYXMgYSBrZXksIGJ1dCBpdCBpcyBub3QgYSBzdHJpbmcuJyk7XG4gICAgICAgIGtleSA9IFN0cmluZyhrZXkpO1xuICAgIH1cblxuICAgIHJldHVybiBrZXk7XG59XG5cbmZ1bmN0aW9uIGdldENhbGxiYWNrKCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICYmIHR5cGVvZiBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xuICAgIH1cbn1cblxuLy8gU29tZSBjb2RlIG9yaWdpbmFsbHkgZnJvbSBhc3luY19zdG9yYWdlLmpzIGluXG4vLyBbR2FpYV0oaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEtYjJnL2dhaWEpLlxuXG52YXIgREVURUNUX0JMT0JfU1VQUE9SVF9TVE9SRSA9ICdsb2NhbC1mb3JhZ2UtZGV0ZWN0LWJsb2Itc3VwcG9ydCc7XG52YXIgc3VwcG9ydHNCbG9icyA9IHZvaWQgMDtcbnZhciBkYkNvbnRleHRzID0ge307XG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vLyBUcmFuc2FjdGlvbiBNb2Rlc1xudmFyIFJFQURfT05MWSA9ICdyZWFkb25seSc7XG52YXIgUkVBRF9XUklURSA9ICdyZWFkd3JpdGUnO1xuXG4vLyBUcmFuc2Zvcm0gYSBiaW5hcnkgc3RyaW5nIHRvIGFuIGFycmF5IGJ1ZmZlciwgYmVjYXVzZSBvdGhlcndpc2Vcbi8vIHdlaXJkIHN0dWZmIGhhcHBlbnMgd2hlbiB5b3UgdHJ5IHRvIHdvcmsgd2l0aCB0aGUgYmluYXJ5IHN0cmluZyBkaXJlY3RseS5cbi8vIEl0IGlzIGtub3duLlxuLy8gRnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE0OTY3NjQ3LyAoY29udGludWVzIG9uIG5leHQgbGluZSlcbi8vIGVuY29kZS1kZWNvZGUtaW1hZ2Utd2l0aC1iYXNlNjQtYnJlYWtzLWltYWdlICgyMDEzLTA0LTIxKVxuZnVuY3Rpb24gX2JpblN0cmluZ1RvQXJyYXlCdWZmZXIoYmluKSB7XG4gICAgdmFyIGxlbmd0aCA9IGJpbi5sZW5ndGg7XG4gICAgdmFyIGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihsZW5ndGgpO1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShidWYpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJyW2ldID0gYmluLmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuICAgIHJldHVybiBidWY7XG59XG5cbi8vXG4vLyBCbG9icyBhcmUgbm90IHN1cHBvcnRlZCBpbiBhbGwgdmVyc2lvbnMgb2YgSW5kZXhlZERCLCBub3RhYmx5XG4vLyBDaHJvbWUgPDM3IGFuZCBBbmRyb2lkIDw1LiBJbiB0aG9zZSB2ZXJzaW9ucywgc3RvcmluZyBhIGJsb2Igd2lsbCB0aHJvdy5cbi8vXG4vLyBWYXJpb3VzIG90aGVyIGJsb2IgYnVncyBleGlzdCBpbiBDaHJvbWUgdjM3LTQyIChpbmNsdXNpdmUpLlxuLy8gRGV0ZWN0aW5nIHRoZW0gaXMgZXhwZW5zaXZlIGFuZCBjb25mdXNpbmcgdG8gdXNlcnMsIGFuZCBDaHJvbWUgMzctNDJcbi8vIGlzIGF0IHZlcnkgbG93IHVzYWdlIHdvcmxkd2lkZSwgc28gd2UgZG8gYSBoYWNreSB1c2VyQWdlbnQgY2hlY2sgaW5zdGVhZC5cbi8vXG4vLyBjb250ZW50LXR5cGUgYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDA4MTIwXG4vLyA0MDQgYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ3OTE2XG4vLyBGaWxlUmVhZGVyIGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0NzgzNlxuLy9cbi8vIENvZGUgYm9ycm93ZWQgZnJvbSBQb3VjaERCLiBTZWU6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vcG91Y2hkYi9wb3VjaGRiL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL25vZGVfbW9kdWxlcy9wb3VjaGRiLWFkYXB0ZXItaWRiL3NyYy9ibG9iU3VwcG9ydC5qc1xuLy9cbmZ1bmN0aW9uIF9jaGVja0Jsb2JTdXBwb3J0V2l0aG91dENhY2hpbmcoaWRiKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgdmFyIHR4biA9IGlkYi50cmFuc2FjdGlvbihERVRFQ1RfQkxPQl9TVVBQT1JUX1NUT1JFLCBSRUFEX1dSSVRFKTtcbiAgICAgICAgdmFyIGJsb2IgPSBjcmVhdGVCbG9iKFsnJ10pO1xuICAgICAgICB0eG4ub2JqZWN0U3RvcmUoREVURUNUX0JMT0JfU1VQUE9SVF9TVE9SRSkucHV0KGJsb2IsICdrZXknKTtcblxuICAgICAgICB0eG4ub25hYm9ydCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgdHJhbnNhY3Rpb24gYWJvcnRzIG5vdyBpdHMgZHVlIHRvIG5vdCBiZWluZyBhYmxlIHRvXG4gICAgICAgICAgICAvLyB3cml0ZSB0byB0aGUgZGF0YWJhc2UsIGxpa2VseSBkdWUgdG8gdGhlIGRpc2sgYmVpbmcgZnVsbFxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHR4bi5vbmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG1hdGNoZWRDaHJvbWUgPSBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKTtcbiAgICAgICAgICAgIHZhciBtYXRjaGVkRWRnZSA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0VkZ2VcXC8vKTtcbiAgICAgICAgICAgIC8vIE1TIEVkZ2UgcHJldGVuZHMgdG8gYmUgQ2hyb21lIDQyOlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9oaDg2OTMwMSUyOHY9dnMuODUlMjkuYXNweFxuICAgICAgICAgICAgcmVzb2x2ZShtYXRjaGVkRWRnZSB8fCAhbWF0Y2hlZENocm9tZSB8fCBwYXJzZUludChtYXRjaGVkQ2hyb21lWzFdLCAxMCkgPj0gNDMpO1xuICAgICAgICB9O1xuICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIGVycm9yLCBzbyBhc3N1bWUgdW5zdXBwb3J0ZWRcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gX2NoZWNrQmxvYlN1cHBvcnQoaWRiKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBwb3J0c0Jsb2JzID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UkMS5yZXNvbHZlKHN1cHBvcnRzQmxvYnMpO1xuICAgIH1cbiAgICByZXR1cm4gX2NoZWNrQmxvYlN1cHBvcnRXaXRob3V0Q2FjaGluZyhpZGIpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHN1cHBvcnRzQmxvYnMgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHN1cHBvcnRzQmxvYnM7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIF9kZWZlclJlYWRpbmVzcyhkYkluZm8pIHtcbiAgICB2YXIgZGJDb250ZXh0ID0gZGJDb250ZXh0c1tkYkluZm8ubmFtZV07XG5cbiAgICAvLyBDcmVhdGUgYSBkZWZlcnJlZCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IGRhdGFiYXNlIG9wZXJhdGlvbi5cbiAgICB2YXIgZGVmZXJyZWRPcGVyYXRpb24gPSB7fTtcblxuICAgIGRlZmVycmVkT3BlcmF0aW9uLnByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZGVmZXJyZWRPcGVyYXRpb24ucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgIGRlZmVycmVkT3BlcmF0aW9uLnJlamVjdCA9IHJlamVjdDtcbiAgICB9KTtcblxuICAgIC8vIEVucXVldWUgdGhlIGRlZmVycmVkIG9wZXJhdGlvbi5cbiAgICBkYkNvbnRleHQuZGVmZXJyZWRPcGVyYXRpb25zLnB1c2goZGVmZXJyZWRPcGVyYXRpb24pO1xuXG4gICAgLy8gQ2hhaW4gaXRzIHByb21pc2UgdG8gdGhlIGRhdGFiYXNlIHJlYWRpbmVzcy5cbiAgICBpZiAoIWRiQ29udGV4dC5kYlJlYWR5KSB7XG4gICAgICAgIGRiQ29udGV4dC5kYlJlYWR5ID0gZGVmZXJyZWRPcGVyYXRpb24ucHJvbWlzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkYkNvbnRleHQuZGJSZWFkeSA9IGRiQ29udGV4dC5kYlJlYWR5LnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkT3BlcmF0aW9uLnByb21pc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX2FkdmFuY2VSZWFkaW5lc3MoZGJJbmZvKSB7XG4gICAgdmFyIGRiQ29udGV4dCA9IGRiQ29udGV4dHNbZGJJbmZvLm5hbWVdO1xuXG4gICAgLy8gRGVxdWV1ZSBhIGRlZmVycmVkIG9wZXJhdGlvbi5cbiAgICB2YXIgZGVmZXJyZWRPcGVyYXRpb24gPSBkYkNvbnRleHQuZGVmZXJyZWRPcGVyYXRpb25zLnBvcCgpO1xuXG4gICAgLy8gUmVzb2x2ZSBpdHMgcHJvbWlzZSAod2hpY2ggaXMgcGFydCBvZiB0aGUgZGF0YWJhc2UgcmVhZGluZXNzXG4gICAgLy8gY2hhaW4gb2YgcHJvbWlzZXMpLlxuICAgIGlmIChkZWZlcnJlZE9wZXJhdGlvbikge1xuICAgICAgICBkZWZlcnJlZE9wZXJhdGlvbi5yZXNvbHZlKCk7XG4gICAgICAgIHJldHVybiBkZWZlcnJlZE9wZXJhdGlvbi5wcm9taXNlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX3JlamVjdFJlYWRpbmVzcyhkYkluZm8sIGVycikge1xuICAgIHZhciBkYkNvbnRleHQgPSBkYkNvbnRleHRzW2RiSW5mby5uYW1lXTtcblxuICAgIC8vIERlcXVldWUgYSBkZWZlcnJlZCBvcGVyYXRpb24uXG4gICAgdmFyIGRlZmVycmVkT3BlcmF0aW9uID0gZGJDb250ZXh0LmRlZmVycmVkT3BlcmF0aW9ucy5wb3AoKTtcblxuICAgIC8vIFJlamVjdCBpdHMgcHJvbWlzZSAod2hpY2ggaXMgcGFydCBvZiB0aGUgZGF0YWJhc2UgcmVhZGluZXNzXG4gICAgLy8gY2hhaW4gb2YgcHJvbWlzZXMpLlxuICAgIGlmIChkZWZlcnJlZE9wZXJhdGlvbikge1xuICAgICAgICBkZWZlcnJlZE9wZXJhdGlvbi5yZWplY3QoZXJyKTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkT3BlcmF0aW9uLnByb21pc2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfZ2V0Q29ubmVjdGlvbihkYkluZm8sIHVwZ3JhZGVOZWVkZWQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGRiQ29udGV4dHNbZGJJbmZvLm5hbWVdID0gZGJDb250ZXh0c1tkYkluZm8ubmFtZV0gfHwgY3JlYXRlRGJDb250ZXh0KCk7XG5cbiAgICAgICAgaWYgKGRiSW5mby5kYikge1xuICAgICAgICAgICAgaWYgKHVwZ3JhZGVOZWVkZWQpIHtcbiAgICAgICAgICAgICAgICBfZGVmZXJSZWFkaW5lc3MoZGJJbmZvKTtcbiAgICAgICAgICAgICAgICBkYkluZm8uZGIuY2xvc2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZGJJbmZvLmRiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkYkFyZ3MgPSBbZGJJbmZvLm5hbWVdO1xuXG4gICAgICAgIGlmICh1cGdyYWRlTmVlZGVkKSB7XG4gICAgICAgICAgICBkYkFyZ3MucHVzaChkYkluZm8udmVyc2lvbik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3BlbnJlcSA9IGlkYi5vcGVuLmFwcGx5KGlkYiwgZGJBcmdzKTtcblxuICAgICAgICBpZiAodXBncmFkZU5lZWRlZCkge1xuICAgICAgICAgICAgb3BlbnJlcS5vbnVwZ3JhZGVuZWVkZWQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciBkYiA9IG9wZW5yZXEucmVzdWx0O1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKGRiSW5mby5zdG9yZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5vbGRWZXJzaW9uIDw9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZGVkIHdoZW4gc3VwcG9ydCBmb3IgYmxvYiBzaGltcyB3YXMgYWRkZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKERFVEVDVF9CTE9CX1NVUFBPUlRfU1RPUkUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4Lm5hbWUgPT09ICdDb25zdHJhaW50RXJyb3InKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1RoZSBkYXRhYmFzZSBcIicgKyBkYkluZm8ubmFtZSArICdcIicgKyAnIGhhcyBiZWVuIHVwZ3JhZGVkIGZyb20gdmVyc2lvbiAnICsgZS5vbGRWZXJzaW9uICsgJyB0byB2ZXJzaW9uICcgKyBlLm5ld1ZlcnNpb24gKyAnLCBidXQgdGhlIHN0b3JhZ2UgXCInICsgZGJJbmZvLnN0b3JlTmFtZSArICdcIiBhbHJlYWR5IGV4aXN0cy4nKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGV4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wZW5yZXEub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICByZWplY3Qob3BlbnJlcS5lcnJvcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgb3BlbnJlcS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZGIgPSBvcGVucmVxLnJlc3VsdDtcbiAgICAgICAgICAgIGRiLm9udmVyc2lvbmNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gVHJpZ2dlcmVkIHdoZW4gdGhlIGRhdGFiYXNlIGlzIG1vZGlmaWVkIChlLmcuIGFkZGluZyBhbiBvYmplY3RTdG9yZSkgb3JcbiAgICAgICAgICAgICAgICAvLyBkZWxldGVkIChldmVuIHdoZW4gaW5pdGlhdGVkIGJ5IG90aGVyIHNlc3Npb25zIGluIGRpZmZlcmVudCB0YWJzKS5cbiAgICAgICAgICAgICAgICAvLyBDbG9zaW5nIHRoZSBjb25uZWN0aW9uIGhlcmUgcHJldmVudHMgdGhvc2Ugb3BlcmF0aW9ucyBmcm9tIGJlaW5nIGJsb2NrZWQuXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGRhdGFiYXNlIGlzIGFjY2Vzc2VkIGFnYWluIGxhdGVyIGJ5IHRoaXMgaW5zdGFuY2UsIHRoZSBjb25uZWN0aW9uXG4gICAgICAgICAgICAgICAgLy8gd2lsbCBiZSByZW9wZW5lZCBvciB0aGUgZGF0YWJhc2UgcmVjcmVhdGVkIGFzIG5lZWRlZC5cbiAgICAgICAgICAgICAgICBlLnRhcmdldC5jbG9zZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlc29sdmUoZGIpO1xuICAgICAgICAgICAgX2FkdmFuY2VSZWFkaW5lc3MoZGJJbmZvKTtcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gX2dldE9yaWdpbmFsQ29ubmVjdGlvbihkYkluZm8pIHtcbiAgICByZXR1cm4gX2dldENvbm5lY3Rpb24oZGJJbmZvLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIF9nZXRVcGdyYWRlZENvbm5lY3Rpb24oZGJJbmZvKSB7XG4gICAgcmV0dXJuIF9nZXRDb25uZWN0aW9uKGRiSW5mbywgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIF9pc1VwZ3JhZGVOZWVkZWQoZGJJbmZvLCBkZWZhdWx0VmVyc2lvbikge1xuICAgIGlmICghZGJJbmZvLmRiKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBpc05ld1N0b3JlID0gIWRiSW5mby5kYi5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKGRiSW5mby5zdG9yZU5hbWUpO1xuICAgIHZhciBpc0Rvd25ncmFkZSA9IGRiSW5mby52ZXJzaW9uIDwgZGJJbmZvLmRiLnZlcnNpb247XG4gICAgdmFyIGlzVXBncmFkZSA9IGRiSW5mby52ZXJzaW9uID4gZGJJbmZvLmRiLnZlcnNpb247XG5cbiAgICBpZiAoaXNEb3duZ3JhZGUpIHtcbiAgICAgICAgLy8gSWYgdGhlIHZlcnNpb24gaXMgbm90IHRoZSBkZWZhdWx0IG9uZVxuICAgICAgICAvLyB0aGVuIHdhcm4gZm9yIGltcG9zc2libGUgZG93bmdyYWRlLlxuICAgICAgICBpZiAoZGJJbmZvLnZlcnNpb24gIT09IGRlZmF1bHRWZXJzaW9uKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1RoZSBkYXRhYmFzZSBcIicgKyBkYkluZm8ubmFtZSArICdcIicgKyBcIiBjYW4ndCBiZSBkb3duZ3JhZGVkIGZyb20gdmVyc2lvbiBcIiArIGRiSW5mby5kYi52ZXJzaW9uICsgJyB0byB2ZXJzaW9uICcgKyBkYkluZm8udmVyc2lvbiArICcuJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWxpZ24gdGhlIHZlcnNpb25zIHRvIHByZXZlbnQgZXJyb3JzLlxuICAgICAgICBkYkluZm8udmVyc2lvbiA9IGRiSW5mby5kYi52ZXJzaW9uO1xuICAgIH1cblxuICAgIGlmIChpc1VwZ3JhZGUgfHwgaXNOZXdTdG9yZSkge1xuICAgICAgICAvLyBJZiB0aGUgc3RvcmUgaXMgbmV3IHRoZW4gaW5jcmVtZW50IHRoZSB2ZXJzaW9uIChpZiBuZWVkZWQpLlxuICAgICAgICAvLyBUaGlzIHdpbGwgdHJpZ2dlciBhbiBcInVwZ3JhZGVuZWVkZWRcIiBldmVudCB3aGljaCBpcyByZXF1aXJlZFxuICAgICAgICAvLyBmb3IgY3JlYXRpbmcgYSBzdG9yZS5cbiAgICAgICAgaWYgKGlzTmV3U3RvcmUpIHtcbiAgICAgICAgICAgIHZhciBpbmNWZXJzaW9uID0gZGJJbmZvLmRiLnZlcnNpb24gKyAxO1xuICAgICAgICAgICAgaWYgKGluY1ZlcnNpb24gPiBkYkluZm8udmVyc2lvbikge1xuICAgICAgICAgICAgICAgIGRiSW5mby52ZXJzaW9uID0gaW5jVmVyc2lvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLy8gZW5jb2RlIGEgYmxvYiBmb3IgaW5kZXhlZGRiIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0IGJsb2JzXG5mdW5jdGlvbiBfZW5jb2RlQmxvYihibG9iKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgcmVhZGVyLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgIHJlYWRlci5vbmxvYWRlbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdmFyIGJhc2U2NCA9IGJ0b2EoZS50YXJnZXQucmVzdWx0IHx8ICcnKTtcbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgIF9fbG9jYWxfZm9yYWdlX2VuY29kZWRfYmxvYjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBkYXRhOiBiYXNlNjQsXG4gICAgICAgICAgICAgICAgdHlwZTogYmxvYi50eXBlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmVhZGVyLnJlYWRBc0JpbmFyeVN0cmluZyhibG9iKTtcbiAgICB9KTtcbn1cblxuLy8gZGVjb2RlIGFuIGVuY29kZWQgYmxvYlxuZnVuY3Rpb24gX2RlY29kZUJsb2IoZW5jb2RlZEJsb2IpIHtcbiAgICB2YXIgYXJyYXlCdWZmID0gX2JpblN0cmluZ1RvQXJyYXlCdWZmZXIoYXRvYihlbmNvZGVkQmxvYi5kYXRhKSk7XG4gICAgcmV0dXJuIGNyZWF0ZUJsb2IoW2FycmF5QnVmZl0sIHsgdHlwZTogZW5jb2RlZEJsb2IudHlwZSB9KTtcbn1cblxuLy8gaXMgdGhpcyBvbmUgb2Ygb3VyIGZhbmN5IGVuY29kZWQgYmxvYnM/XG5mdW5jdGlvbiBfaXNFbmNvZGVkQmxvYih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB2YWx1ZS5fX2xvY2FsX2ZvcmFnZV9lbmNvZGVkX2Jsb2I7XG59XG5cbi8vIFNwZWNpYWxpemUgdGhlIGRlZmF1bHQgYHJlYWR5KClgIGZ1bmN0aW9uIGJ5IG1ha2luZyBpdCBkZXBlbmRlbnRcbi8vIG9uIHRoZSBjdXJyZW50IGRhdGFiYXNlIG9wZXJhdGlvbnMuIFRodXMsIHRoZSBkcml2ZXIgd2lsbCBiZSBhY3R1YWxseVxuLy8gcmVhZHkgd2hlbiBpdCdzIGJlZW4gaW5pdGlhbGl6ZWQgKGRlZmF1bHQpICphbmQqIHRoZXJlIGFyZSBubyBwZW5kaW5nXG4vLyBvcGVyYXRpb25zIG9uIHRoZSBkYXRhYmFzZSAoaW5pdGlhdGVkIGJ5IHNvbWUgb3RoZXIgaW5zdGFuY2VzKS5cbmZ1bmN0aW9uIF9mdWxseVJlYWR5KGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHByb21pc2UgPSBzZWxmLl9pbml0UmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRiQ29udGV4dCA9IGRiQ29udGV4dHNbc2VsZi5fZGJJbmZvLm5hbWVdO1xuXG4gICAgICAgIGlmIChkYkNvbnRleHQgJiYgZGJDb250ZXh0LmRiUmVhZHkpIHtcbiAgICAgICAgICAgIHJldHVybiBkYkNvbnRleHQuZGJSZWFkeTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgZXhlY3V0ZVR3b0NhbGxiYWNrcyhwcm9taXNlLCBjYWxsYmFjaywgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG4vLyBUcnkgdG8gZXN0YWJsaXNoIGEgbmV3IGRiIGNvbm5lY3Rpb24gdG8gcmVwbGFjZSB0aGVcbi8vIGN1cnJlbnQgb25lIHdoaWNoIGlzIGJyb2tlbiAoaS5lLiBleHBlcmllbmNpbmdcbi8vIEludmFsaWRTdGF0ZUVycm9yIHdoaWxlIGNyZWF0aW5nIGEgdHJhbnNhY3Rpb24pLlxuZnVuY3Rpb24gX3RyeVJlY29ubmVjdChkYkluZm8pIHtcbiAgICBfZGVmZXJSZWFkaW5lc3MoZGJJbmZvKTtcblxuICAgIHZhciBkYkNvbnRleHQgPSBkYkNvbnRleHRzW2RiSW5mby5uYW1lXTtcbiAgICB2YXIgZm9yYWdlcyA9IGRiQ29udGV4dC5mb3JhZ2VzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmb3JhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBmb3JhZ2UgPSBmb3JhZ2VzW2ldO1xuICAgICAgICBpZiAoZm9yYWdlLl9kYkluZm8uZGIpIHtcbiAgICAgICAgICAgIGZvcmFnZS5fZGJJbmZvLmRiLmNsb3NlKCk7XG4gICAgICAgICAgICBmb3JhZ2UuX2RiSW5mby5kYiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGJJbmZvLmRiID0gbnVsbDtcblxuICAgIHJldHVybiBfZ2V0T3JpZ2luYWxDb25uZWN0aW9uKGRiSW5mbykudGhlbihmdW5jdGlvbiAoZGIpIHtcbiAgICAgICAgZGJJbmZvLmRiID0gZGI7XG4gICAgICAgIGlmIChfaXNVcGdyYWRlTmVlZGVkKGRiSW5mbykpIHtcbiAgICAgICAgICAgIC8vIFJlb3BlbiB0aGUgZGF0YWJhc2UgZm9yIHVwZ3JhZGluZy5cbiAgICAgICAgICAgIHJldHVybiBfZ2V0VXBncmFkZWRDb25uZWN0aW9uKGRiSW5mbyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRiO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKGRiKSB7XG4gICAgICAgIC8vIHN0b3JlIHRoZSBsYXRlc3QgZGIgcmVmZXJlbmNlXG4gICAgICAgIC8vIGluIGNhc2UgdGhlIGRiIHdhcyB1cGdyYWRlZFxuICAgICAgICBkYkluZm8uZGIgPSBkYkNvbnRleHQuZGIgPSBkYjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmb3JhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBmb3JhZ2VzW2ldLl9kYkluZm8uZGIgPSBkYjtcbiAgICAgICAgfVxuICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICBfcmVqZWN0UmVhZGluZXNzKGRiSW5mbywgZXJyKTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgIH0pO1xufVxuXG4vLyBGRiBkb2Vzbid0IGxpa2UgUHJvbWlzZXMgKG1pY3JvLXRhc2tzKSBhbmQgSUREQiBzdG9yZSBvcGVyYXRpb25zLFxuLy8gc28gd2UgaGF2ZSB0byBkbyBpdCB3aXRoIGNhbGxiYWNrc1xuZnVuY3Rpb24gY3JlYXRlVHJhbnNhY3Rpb24oZGJJbmZvLCBtb2RlLCBjYWxsYmFjaywgcmV0cmllcykge1xuICAgIGlmIChyZXRyaWVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0cmllcyA9IDE7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIHR4ID0gZGJJbmZvLmRiLnRyYW5zYWN0aW9uKGRiSW5mby5zdG9yZU5hbWUsIG1vZGUpO1xuICAgICAgICBjYWxsYmFjayhudWxsLCB0eCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChyZXRyaWVzID4gMCAmJiAoIWRiSW5mby5kYiB8fCBlcnIubmFtZSA9PT0gJ0ludmFsaWRTdGF0ZUVycm9yJyB8fCBlcnIubmFtZSA9PT0gJ05vdEZvdW5kRXJyb3InKSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UkMS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFkYkluZm8uZGIgfHwgZXJyLm5hbWUgPT09ICdOb3RGb3VuZEVycm9yJyAmJiAhZGJJbmZvLmRiLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoZGJJbmZvLnN0b3JlTmFtZSkgJiYgZGJJbmZvLnZlcnNpb24gPD0gZGJJbmZvLmRiLnZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5jcmVhc2UgdGhlIGRiIHZlcnNpb24sIHRvIGNyZWF0ZSB0aGUgbmV3IE9iamVjdFN0b3JlXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYkluZm8uZGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRiSW5mby52ZXJzaW9uID0gZGJJbmZvLmRiLnZlcnNpb24gKyAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlb3BlbiB0aGUgZGF0YWJhc2UgZm9yIHVwZ3JhZGluZy5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9nZXRVcGdyYWRlZENvbm5lY3Rpb24oZGJJbmZvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RyeVJlY29ubmVjdChkYkluZm8pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVUcmFuc2FjdGlvbihkYkluZm8sIG1vZGUsIGNhbGxiYWNrLCByZXRyaWVzIC0gMSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVtcImNhdGNoXCJdKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEYkNvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gUnVubmluZyBsb2NhbEZvcmFnZXMgc2hhcmluZyBhIGRhdGFiYXNlLlxuICAgICAgICBmb3JhZ2VzOiBbXSxcbiAgICAgICAgLy8gU2hhcmVkIGRhdGFiYXNlLlxuICAgICAgICBkYjogbnVsbCxcbiAgICAgICAgLy8gRGF0YWJhc2UgcmVhZGluZXNzIChwcm9taXNlKS5cbiAgICAgICAgZGJSZWFkeTogbnVsbCxcbiAgICAgICAgLy8gRGVmZXJyZWQgb3BlcmF0aW9ucyBvbiB0aGUgZGF0YWJhc2UuXG4gICAgICAgIGRlZmVycmVkT3BlcmF0aW9uczogW11cbiAgICB9O1xufVxuXG4vLyBPcGVuIHRoZSBJbmRleGVkREIgZGF0YWJhc2UgKGF1dG9tYXRpY2FsbHkgY3JlYXRlcyBvbmUgaWYgb25lIGRpZG4ndFxuLy8gcHJldmlvdXNseSBleGlzdCksIHVzaW5nIGFueSBvcHRpb25zIHNldCBpbiB0aGUgY29uZmlnLlxuZnVuY3Rpb24gX2luaXRTdG9yYWdlKG9wdGlvbnMpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGRiSW5mbyA9IHtcbiAgICAgICAgZGI6IG51bGxcbiAgICB9O1xuXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBkYkluZm9baV0gPSBvcHRpb25zW2ldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gR2V0IHRoZSBjdXJyZW50IGNvbnRleHQgb2YgdGhlIGRhdGFiYXNlO1xuICAgIHZhciBkYkNvbnRleHQgPSBkYkNvbnRleHRzW2RiSW5mby5uYW1lXTtcblxuICAgIC8vIC4uLm9yIGNyZWF0ZSBhIG5ldyBjb250ZXh0LlxuICAgIGlmICghZGJDb250ZXh0KSB7XG4gICAgICAgIGRiQ29udGV4dCA9IGNyZWF0ZURiQ29udGV4dCgpO1xuICAgICAgICAvLyBSZWdpc3RlciB0aGUgbmV3IGNvbnRleHQgaW4gdGhlIGdsb2JhbCBjb250YWluZXIuXG4gICAgICAgIGRiQ29udGV4dHNbZGJJbmZvLm5hbWVdID0gZGJDb250ZXh0O1xuICAgIH1cblxuICAgIC8vIFJlZ2lzdGVyIGl0c2VsZiBhcyBhIHJ1bm5pbmcgbG9jYWxGb3JhZ2UgaW4gdGhlIGN1cnJlbnQgY29udGV4dC5cbiAgICBkYkNvbnRleHQuZm9yYWdlcy5wdXNoKHNlbGYpO1xuXG4gICAgLy8gUmVwbGFjZSB0aGUgZGVmYXVsdCBgcmVhZHkoKWAgZnVuY3Rpb24gd2l0aCB0aGUgc3BlY2lhbGl6ZWQgb25lLlxuICAgIGlmICghc2VsZi5faW5pdFJlYWR5KSB7XG4gICAgICAgIHNlbGYuX2luaXRSZWFkeSA9IHNlbGYucmVhZHk7XG4gICAgICAgIHNlbGYucmVhZHkgPSBfZnVsbHlSZWFkeTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgYW4gYXJyYXkgb2YgaW5pdGlhbGl6YXRpb24gc3RhdGVzIG9mIHRoZSByZWxhdGVkIGxvY2FsRm9yYWdlcy5cbiAgICB2YXIgaW5pdFByb21pc2VzID0gW107XG5cbiAgICBmdW5jdGlvbiBpZ25vcmVFcnJvcnMoKSB7XG4gICAgICAgIC8vIERvbid0IGhhbmRsZSBlcnJvcnMgaGVyZSxcbiAgICAgICAgLy8ganVzdCBtYWtlcyBzdXJlIHJlbGF0ZWQgbG9jYWxGb3JhZ2VzIGFyZW4ndCBwZW5kaW5nLlxuICAgICAgICByZXR1cm4gUHJvbWlzZSQxLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRiQ29udGV4dC5mb3JhZ2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHZhciBmb3JhZ2UgPSBkYkNvbnRleHQuZm9yYWdlc1tqXTtcbiAgICAgICAgaWYgKGZvcmFnZSAhPT0gc2VsZikge1xuICAgICAgICAgICAgLy8gRG9uJ3Qgd2FpdCBmb3IgaXRzZWxmLi4uXG4gICAgICAgICAgICBpbml0UHJvbWlzZXMucHVzaChmb3JhZ2UuX2luaXRSZWFkeSgpW1wiY2F0Y2hcIl0oaWdub3JlRXJyb3JzKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUYWtlIGEgc25hcHNob3Qgb2YgdGhlIHJlbGF0ZWQgbG9jYWxGb3JhZ2VzLlxuICAgIHZhciBmb3JhZ2VzID0gZGJDb250ZXh0LmZvcmFnZXMuc2xpY2UoMCk7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBjb25uZWN0aW9uIHByb2Nlc3Mgb25seSB3aGVuXG4gICAgLy8gYWxsIHRoZSByZWxhdGVkIGxvY2FsRm9yYWdlcyBhcmVuJ3QgcGVuZGluZy5cbiAgICByZXR1cm4gUHJvbWlzZSQxLmFsbChpbml0UHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBkYkluZm8uZGIgPSBkYkNvbnRleHQuZGI7XG4gICAgICAgIC8vIEdldCB0aGUgY29ubmVjdGlvbiBvciBvcGVuIGEgbmV3IG9uZSB3aXRob3V0IHVwZ3JhZGUuXG4gICAgICAgIHJldHVybiBfZ2V0T3JpZ2luYWxDb25uZWN0aW9uKGRiSW5mbyk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoZGIpIHtcbiAgICAgICAgZGJJbmZvLmRiID0gZGI7XG4gICAgICAgIGlmIChfaXNVcGdyYWRlTmVlZGVkKGRiSW5mbywgc2VsZi5fZGVmYXVsdENvbmZpZy52ZXJzaW9uKSkge1xuICAgICAgICAgICAgLy8gUmVvcGVuIHRoZSBkYXRhYmFzZSBmb3IgdXBncmFkaW5nLlxuICAgICAgICAgICAgcmV0dXJuIF9nZXRVcGdyYWRlZENvbm5lY3Rpb24oZGJJbmZvKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGI7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoZGIpIHtcbiAgICAgICAgZGJJbmZvLmRiID0gZGJDb250ZXh0LmRiID0gZGI7XG4gICAgICAgIHNlbGYuX2RiSW5mbyA9IGRiSW5mbztcbiAgICAgICAgLy8gU2hhcmUgdGhlIGZpbmFsIGNvbm5lY3Rpb24gYW1vbmdzdCByZWxhdGVkIGxvY2FsRm9yYWdlcy5cbiAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBmb3JhZ2VzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICB2YXIgZm9yYWdlID0gZm9yYWdlc1trXTtcbiAgICAgICAgICAgIGlmIChmb3JhZ2UgIT09IHNlbGYpIHtcbiAgICAgICAgICAgICAgICAvLyBTZWxmIGlzIGFscmVhZHkgdXAtdG8tZGF0ZS5cbiAgICAgICAgICAgICAgICBmb3JhZ2UuX2RiSW5mby5kYiA9IGRiSW5mby5kYjtcbiAgICAgICAgICAgICAgICBmb3JhZ2UuX2RiSW5mby52ZXJzaW9uID0gZGJJbmZvLnZlcnNpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0SXRlbShrZXksIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAga2V5ID0gbm9ybWFsaXplS2V5KGtleSk7XG5cbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjcmVhdGVUcmFuc2FjdGlvbihzZWxmLl9kYkluZm8sIFJFQURfT05MWSwgZnVuY3Rpb24gKGVyciwgdHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShzZWxmLl9kYkluZm8uc3RvcmVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcSA9IHN0b3JlLmdldChrZXkpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlcS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSByZXEucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzRW5jb2RlZEJsb2IodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBfZGVjb2RlQmxvYih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICByZXEub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXEuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVtcImNhdGNoXCJdKHJlamVjdCk7XG4gICAgfSk7XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG4vLyBJdGVyYXRlIG92ZXIgYWxsIGl0ZW1zIHN0b3JlZCBpbiBkYXRhYmFzZS5cbmZ1bmN0aW9uIGl0ZXJhdGUoaXRlcmF0b3IsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY3JlYXRlVHJhbnNhY3Rpb24oc2VsZi5fZGJJbmZvLCBSRUFEX09OTFksIGZ1bmN0aW9uIChlcnIsIHRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoc2VsZi5fZGJJbmZvLnN0b3JlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXEgPSBzdG9yZS5vcGVuQ3Vyc29yKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVyYXRpb25OdW1iZXIgPSAxO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlcS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3Vyc29yID0gcmVxLnJlc3VsdDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnNvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGN1cnNvci52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzRW5jb2RlZEJsb2IodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gX2RlY29kZUJsb2IodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gaXRlcmF0b3IodmFsdWUsIGN1cnNvci5rZXksIGl0ZXJhdGlvbk51bWJlcisrKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGl0ZXJhdG9yIGNhbGxiYWNrIHJldHVybnMgYW55XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKG5vbi1gdW5kZWZpbmVkYCkgdmFsdWUsIHRoZW4gd2Ugc3RvcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBpdGVyYXRpb24gaW1tZWRpYXRlbHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcltcImNvbnRpbnVlXCJdKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVxLmVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcblxuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBzZXRJdGVtKGtleSwgdmFsdWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAga2V5ID0gbm9ybWFsaXplS2V5KGtleSk7XG5cbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgZGJJbmZvO1xuICAgICAgICBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkYkluZm8gPSBzZWxmLl9kYkluZm87XG4gICAgICAgICAgICBpZiAodG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEJsb2JdJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBfY2hlY2tCbG9iU3VwcG9ydChkYkluZm8uZGIpLnRoZW4oZnVuY3Rpb24gKGJsb2JTdXBwb3J0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChibG9iU3VwcG9ydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfZW5jb2RlQmxvYih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBjcmVhdGVUcmFuc2FjdGlvbihzZWxmLl9kYkluZm8sIFJFQURfV1JJVEUsIGZ1bmN0aW9uIChlcnIsIHRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoc2VsZi5fZGJJbmZvLnN0b3JlTmFtZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJlYXNvbiB3ZSBkb24ndCBfc2F2ZV8gbnVsbCBpcyBiZWNhdXNlIElFIDEwIGRvZXNcbiAgICAgICAgICAgICAgICAgICAgLy8gbm90IHN1cHBvcnQgc2F2aW5nIHRoZSBgbnVsbGAgdHlwZSBpbiBJbmRleGVkREIuIEhvd1xuICAgICAgICAgICAgICAgICAgICAvLyBpcm9uaWMsIGdpdmVuIHRoZSBidWcgYmVsb3chXG4gICAgICAgICAgICAgICAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvbG9jYWxGb3JhZ2UvaXNzdWVzLzE2MVxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcSA9IHN0b3JlLnB1dCh2YWx1ZSwga2V5KTtcblxuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbi5vbmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FzdCB0byB1bmRlZmluZWQgc28gdGhlIHZhbHVlIHBhc3NlZCB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbGJhY2svcHJvbWlzZSBpcyB0aGUgc2FtZSBhcyB3aGF0IG9uZSB3b3VsZCBnZXQgb3V0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvZiBgZ2V0SXRlbSgpYCBsYXRlci4gVGhpcyBsZWFkcyB0byBzb21lIHdlaXJkbmVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gKHNldEl0ZW0oJ2ZvbycsIHVuZGVmaW5lZCkgd2lsbCByZXR1cm4gYG51bGxgKSwgYnV0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIG5vdCBteSBmYXVsdCBsb2NhbFN0b3JhZ2UgaXMgb3VyIGJhc2VsaW5lIGFuZCB0aGF0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIHdlaXJkLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbi5vbmFib3J0ID0gdHJhbnNhY3Rpb24ub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnIgPSByZXEuZXJyb3IgPyByZXEuZXJyb3IgOiByZXEudHJhbnNhY3Rpb24uZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlSXRlbShrZXksIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAga2V5ID0gbm9ybWFsaXplS2V5KGtleSk7XG5cbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjcmVhdGVUcmFuc2FjdGlvbihzZWxmLl9kYkluZm8sIFJFQURfV1JJVEUsIGZ1bmN0aW9uIChlcnIsIHRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoc2VsZi5fZGJJbmZvLnN0b3JlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIHVzZSBhIEdydW50IHRhc2sgdG8gbWFrZSB0aGlzIHNhZmUgZm9yIElFIGFuZCBzb21lXG4gICAgICAgICAgICAgICAgICAgIC8vIHZlcnNpb25zIG9mIEFuZHJvaWQgKGluY2x1ZGluZyB0aG9zZSB1c2VkIGJ5IENvcmRvdmEpLlxuICAgICAgICAgICAgICAgICAgICAvLyBOb3JtYWxseSBJRSB3b24ndCBsaWtlIGAuZGVsZXRlKClgIGFuZCB3aWxsIGluc2lzdCBvblxuICAgICAgICAgICAgICAgICAgICAvLyB1c2luZyBgWydkZWxldGUnXSgpYCwgYnV0IHdlIGhhdmUgYSBidWlsZCBzdGVwIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgLy8gZml4ZXMgdGhpcyBmb3IgdXMgbm93LlxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVxID0gc3RvcmVbXCJkZWxldGVcIl0oa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24ub25jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbi5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlcS5lcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJlcXVlc3Qgd2lsbCBiZSBhbHNvIGJlIGFib3J0ZWQgaWYgd2UndmUgZXhjZWVkZWQgb3VyIHN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgICAgLy8gc3BhY2UuXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLm9uYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyID0gcmVxLmVycm9yID8gcmVxLmVycm9yIDogcmVxLnRyYW5zYWN0aW9uLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0ocmVqZWN0KTtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIGNsZWFyKGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY3JlYXRlVHJhbnNhY3Rpb24oc2VsZi5fZGJJbmZvLCBSRUFEX1dSSVRFLCBmdW5jdGlvbiAoZXJyLCB0cmFuc2FjdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHNlbGYuX2RiSW5mby5zdG9yZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVxID0gc3RvcmUuY2xlYXIoKTtcblxuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbi5vbmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLm9uYWJvcnQgPSB0cmFuc2FjdGlvbi5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVyciA9IHJlcS5lcnJvciA/IHJlcS5lcnJvciA6IHJlcS50cmFuc2FjdGlvbi5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVtcImNhdGNoXCJdKHJlamVjdCk7XG4gICAgfSk7XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBsZW5ndGgoY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjcmVhdGVUcmFuc2FjdGlvbihzZWxmLl9kYkluZm8sIFJFQURfT05MWSwgZnVuY3Rpb24gKGVyciwgdHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShzZWxmLl9kYkluZm8uc3RvcmVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcSA9IHN0b3JlLmNvdW50KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxLm9uc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVxLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVxLmVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24ga2V5KG4sIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgaWYgKG4gPCAwKSB7XG4gICAgICAgICAgICByZXNvbHZlKG51bGwpO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjcmVhdGVUcmFuc2FjdGlvbihzZWxmLl9kYkluZm8sIFJFQURfT05MWSwgZnVuY3Rpb24gKGVyciwgdHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShzZWxmLl9kYkluZm8uc3RvcmVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFkdmFuY2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXEgPSBzdG9yZS5vcGVuS2V5Q3Vyc29yKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxLm9uc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJzb3IgPSByZXEucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXJzb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIG1lYW5zIHRoZXJlIHdlcmVuJ3QgZW5vdWdoIGtleXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgdGhlIGZpcnN0IGtleSwgcmV0dXJuIGl0IGlmIHRoYXQncyB3aGF0IHRoZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3YW50ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShjdXJzb3Iua2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhZHZhbmNlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIGFzayB0aGUgY3Vyc29yIHRvIHNraXAgYWhlYWQgblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZWNvcmRzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZHZhbmNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvci5hZHZhbmNlKG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gd2UgZ2V0IGhlcmUsIHdlJ3ZlIGdvdCB0aGUgbnRoIGtleS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShjdXJzb3Iua2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVxLmVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24ga2V5cyhjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHNlbGYucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNyZWF0ZVRyYW5zYWN0aW9uKHNlbGYuX2RiSW5mbywgUkVBRF9PTkxZLCBmdW5jdGlvbiAoZXJyLCB0cmFuc2FjdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHNlbGYuX2RiSW5mby5zdG9yZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVxID0gc3RvcmUub3BlbktleUN1cnNvcigpO1xuICAgICAgICAgICAgICAgICAgICB2YXIga2V5cyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlcS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3Vyc29yID0gcmVxLnJlc3VsdDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXJzb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGtleXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAga2V5cy5wdXNoKGN1cnNvci5rZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yW1wiY29udGludWVcIl0oKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICByZXEub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXEuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVtcImNhdGNoXCJdKHJlamVjdCk7XG4gICAgfSk7XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBkcm9wSW5zdGFuY2Uob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9IGdldENhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICB2YXIgY3VycmVudENvbmZpZyA9IHRoaXMuY29uZmlnKCk7XG4gICAgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zICE9PSAnZnVuY3Rpb24nICYmIG9wdGlvbnMgfHwge307XG4gICAgaWYgKCFvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5uYW1lID0gb3B0aW9ucy5uYW1lIHx8IGN1cnJlbnRDb25maWcubmFtZTtcbiAgICAgICAgb3B0aW9ucy5zdG9yZU5hbWUgPSBvcHRpb25zLnN0b3JlTmFtZSB8fCBjdXJyZW50Q29uZmlnLnN0b3JlTmFtZTtcbiAgICB9XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHByb21pc2U7XG4gICAgaWYgKCFvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgcHJvbWlzZSA9IFByb21pc2UkMS5yZWplY3QoJ0ludmFsaWQgYXJndW1lbnRzJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGlzQ3VycmVudERiID0gb3B0aW9ucy5uYW1lID09PSBjdXJyZW50Q29uZmlnLm5hbWUgJiYgc2VsZi5fZGJJbmZvLmRiO1xuXG4gICAgICAgIHZhciBkYlByb21pc2UgPSBpc0N1cnJlbnREYiA/IFByb21pc2UkMS5yZXNvbHZlKHNlbGYuX2RiSW5mby5kYikgOiBfZ2V0T3JpZ2luYWxDb25uZWN0aW9uKG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKGRiKSB7XG4gICAgICAgICAgICB2YXIgZGJDb250ZXh0ID0gZGJDb250ZXh0c1tvcHRpb25zLm5hbWVdO1xuICAgICAgICAgICAgdmFyIGZvcmFnZXMgPSBkYkNvbnRleHQuZm9yYWdlcztcbiAgICAgICAgICAgIGRiQ29udGV4dC5kYiA9IGRiO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmb3JhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZm9yYWdlc1tpXS5fZGJJbmZvLmRiID0gZGI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghb3B0aW9ucy5zdG9yZU5hbWUpIHtcbiAgICAgICAgICAgIHByb21pc2UgPSBkYlByb21pc2UudGhlbihmdW5jdGlvbiAoZGIpIHtcbiAgICAgICAgICAgICAgICBfZGVmZXJSZWFkaW5lc3Mob3B0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgZGJDb250ZXh0ID0gZGJDb250ZXh0c1tvcHRpb25zLm5hbWVdO1xuICAgICAgICAgICAgICAgIHZhciBmb3JhZ2VzID0gZGJDb250ZXh0LmZvcmFnZXM7XG5cbiAgICAgICAgICAgICAgICBkYi5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9yYWdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm9yYWdlID0gZm9yYWdlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yYWdlLl9kYkluZm8uZGIgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBkcm9wREJQcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXEgPSBpZGIuZGVsZXRlRGF0YWJhc2Uob3B0aW9ucy5uYW1lKTtcblxuICAgICAgICAgICAgICAgICAgICByZXEub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYiA9IHJlcS5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYi5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlcS5lcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxLm9uYmxvY2tlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENsb3NpbmcgYWxsIG9wZW4gY29ubmVjdGlvbnMgaW4gb252ZXJzaW9uY2hhbmdlIGhhbmRsZXIgc2hvdWxkIHByZXZlbnQgdGhpcyBzaXR1YXRpb24sIGJ1dCBpZlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgZG8gZ2V0IGhlcmUsIGl0IGp1c3QgbWVhbnMgdGhlIHJlcXVlc3QgcmVtYWlucyBwZW5kaW5nIC0gZXZlbnR1YWxseSBpdCB3aWxsIHN1Y2NlZWQgb3IgZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignZHJvcEluc3RhbmNlIGJsb2NrZWQgZm9yIGRhdGFiYXNlIFwiJyArIG9wdGlvbnMubmFtZSArICdcIiB1bnRpbCBhbGwgb3BlbiBjb25uZWN0aW9ucyBhcmUgY2xvc2VkJyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxLm9uc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYiA9IHJlcS5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYi5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYik7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZHJvcERCUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYikge1xuICAgICAgICAgICAgICAgICAgICBkYkNvbnRleHQuZGIgPSBkYjtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmb3JhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2ZvcmFnZSA9IGZvcmFnZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBfYWR2YW5jZVJlYWRpbmVzcyhfZm9yYWdlLl9kYkluZm8pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIChfcmVqZWN0UmVhZGluZXNzKG9wdGlvbnMsIGVycikgfHwgUHJvbWlzZSQxLnJlc29sdmUoKSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoKSB7fSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvbWlzZSA9IGRiUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYikge1xuICAgICAgICAgICAgICAgIGlmICghZGIub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyhvcHRpb25zLnN0b3JlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBuZXdWZXJzaW9uID0gZGIudmVyc2lvbiArIDE7XG5cbiAgICAgICAgICAgICAgICBfZGVmZXJSZWFkaW5lc3Mob3B0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgZGJDb250ZXh0ID0gZGJDb250ZXh0c1tvcHRpb25zLm5hbWVdO1xuICAgICAgICAgICAgICAgIHZhciBmb3JhZ2VzID0gZGJDb250ZXh0LmZvcmFnZXM7XG5cbiAgICAgICAgICAgICAgICBkYi5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9yYWdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm9yYWdlID0gZm9yYWdlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yYWdlLl9kYkluZm8uZGIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBmb3JhZ2UuX2RiSW5mby52ZXJzaW9uID0gbmV3VmVyc2lvbjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgZHJvcE9iamVjdFByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcSA9IGlkYi5vcGVuKG9wdGlvbnMubmFtZSwgbmV3VmVyc2lvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGIgPSByZXEucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgZGIuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHJlcS5vbnVwZ3JhZGVuZWVkZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGIgPSByZXEucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgZGIuZGVsZXRlT2JqZWN0U3RvcmUob3B0aW9ucy5zdG9yZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHJlcS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGIgPSByZXEucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgZGIuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGIpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRyb3BPYmplY3RQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRiKSB7XG4gICAgICAgICAgICAgICAgICAgIGRiQ29udGV4dC5kYiA9IGRiO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGZvcmFnZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfZm9yYWdlMiA9IGZvcmFnZXNbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBfZm9yYWdlMi5fZGJJbmZvLmRiID0gZGI7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYWR2YW5jZVJlYWRpbmVzcyhfZm9yYWdlMi5fZGJJbmZvKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAoX3JlamVjdFJlYWRpbmVzcyhvcHRpb25zLCBlcnIpIHx8IFByb21pc2UkMS5yZXNvbHZlKCkpW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKCkge30pO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbnZhciBhc3luY1N0b3JhZ2UgPSB7XG4gICAgX2RyaXZlcjogJ2FzeW5jU3RvcmFnZScsXG4gICAgX2luaXRTdG9yYWdlOiBfaW5pdFN0b3JhZ2UsXG4gICAgX3N1cHBvcnQ6IGlzSW5kZXhlZERCVmFsaWQoKSxcbiAgICBpdGVyYXRlOiBpdGVyYXRlLFxuICAgIGdldEl0ZW06IGdldEl0ZW0sXG4gICAgc2V0SXRlbTogc2V0SXRlbSxcbiAgICByZW1vdmVJdGVtOiByZW1vdmVJdGVtLFxuICAgIGNsZWFyOiBjbGVhcixcbiAgICBsZW5ndGg6IGxlbmd0aCxcbiAgICBrZXk6IGtleSxcbiAgICBrZXlzOiBrZXlzLFxuICAgIGRyb3BJbnN0YW5jZTogZHJvcEluc3RhbmNlXG59O1xuXG5mdW5jdGlvbiBpc1dlYlNRTFZhbGlkKCkge1xuICAgIHJldHVybiB0eXBlb2Ygb3BlbkRhdGFiYXNlID09PSAnZnVuY3Rpb24nO1xufVxuXG4vLyBTYWRseSwgdGhlIGJlc3Qgd2F5IHRvIHNhdmUgYmluYXJ5IGRhdGEgaW4gV2ViU1FML2xvY2FsU3RvcmFnZSBpcyBzZXJpYWxpemluZ1xuLy8gaXQgdG8gQmFzZTY0LCBzbyB0aGlzIGlzIGhvdyB3ZSBzdG9yZSBpdCB0byBwcmV2ZW50IHZlcnkgc3RyYW5nZSBlcnJvcnMgd2l0aCBsZXNzXG4vLyB2ZXJib3NlIHdheXMgb2YgYmluYXJ5IDwtPiBzdHJpbmcgZGF0YSBzdG9yYWdlLlxudmFyIEJBU0VfQ0hBUlMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7XG5cbnZhciBCTE9CX1RZUEVfUFJFRklYID0gJ35+bG9jYWxfZm9yYWdlX3R5cGV+JztcbnZhciBCTE9CX1RZUEVfUFJFRklYX1JFR0VYID0gL15+fmxvY2FsX2ZvcmFnZV90eXBlfihbXn5dKyl+LztcblxudmFyIFNFUklBTElaRURfTUFSS0VSID0gJ19fbGZzY19fOic7XG52YXIgU0VSSUFMSVpFRF9NQVJLRVJfTEVOR1RIID0gU0VSSUFMSVpFRF9NQVJLRVIubGVuZ3RoO1xuXG4vLyBPTUcgdGhlIHNlcmlhbGl6YXRpb25zIVxudmFyIFRZUEVfQVJSQVlCVUZGRVIgPSAnYXJiZic7XG52YXIgVFlQRV9CTE9CID0gJ2Jsb2InO1xudmFyIFRZUEVfSU5UOEFSUkFZID0gJ3NpMDgnO1xudmFyIFRZUEVfVUlOVDhBUlJBWSA9ICd1aTA4JztcbnZhciBUWVBFX1VJTlQ4Q0xBTVBFREFSUkFZID0gJ3VpYzgnO1xudmFyIFRZUEVfSU5UMTZBUlJBWSA9ICdzaTE2JztcbnZhciBUWVBFX0lOVDMyQVJSQVkgPSAnc2kzMic7XG52YXIgVFlQRV9VSU5UMTZBUlJBWSA9ICd1cjE2JztcbnZhciBUWVBFX1VJTlQzMkFSUkFZID0gJ3VpMzInO1xudmFyIFRZUEVfRkxPQVQzMkFSUkFZID0gJ2ZsMzInO1xudmFyIFRZUEVfRkxPQVQ2NEFSUkFZID0gJ2ZsNjQnO1xudmFyIFRZUEVfU0VSSUFMSVpFRF9NQVJLRVJfTEVOR1RIID0gU0VSSUFMSVpFRF9NQVJLRVJfTEVOR1RIICsgVFlQRV9BUlJBWUJVRkZFUi5sZW5ndGg7XG5cbnZhciB0b1N0cmluZyQxID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gc3RyaW5nVG9CdWZmZXIoc2VyaWFsaXplZFN0cmluZykge1xuICAgIC8vIEZpbGwgdGhlIHN0cmluZyBpbnRvIGEgQXJyYXlCdWZmZXIuXG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IHNlcmlhbGl6ZWRTdHJpbmcubGVuZ3RoICogMC43NTtcbiAgICB2YXIgbGVuID0gc2VyaWFsaXplZFN0cmluZy5sZW5ndGg7XG4gICAgdmFyIGk7XG4gICAgdmFyIHAgPSAwO1xuICAgIHZhciBlbmNvZGVkMSwgZW5jb2RlZDIsIGVuY29kZWQzLCBlbmNvZGVkNDtcblxuICAgIGlmIChzZXJpYWxpemVkU3RyaW5nW3NlcmlhbGl6ZWRTdHJpbmcubGVuZ3RoIC0gMV0gPT09ICc9Jykge1xuICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgICAgaWYgKHNlcmlhbGl6ZWRTdHJpbmdbc2VyaWFsaXplZFN0cmluZy5sZW5ndGggLSAyXSA9PT0gJz0nKSB7XG4gICAgICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyTGVuZ3RoKTtcbiAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgICAgIGVuY29kZWQxID0gQkFTRV9DSEFSUy5pbmRleE9mKHNlcmlhbGl6ZWRTdHJpbmdbaV0pO1xuICAgICAgICBlbmNvZGVkMiA9IEJBU0VfQ0hBUlMuaW5kZXhPZihzZXJpYWxpemVkU3RyaW5nW2kgKyAxXSk7XG4gICAgICAgIGVuY29kZWQzID0gQkFTRV9DSEFSUy5pbmRleE9mKHNlcmlhbGl6ZWRTdHJpbmdbaSArIDJdKTtcbiAgICAgICAgZW5jb2RlZDQgPSBCQVNFX0NIQVJTLmluZGV4T2Yoc2VyaWFsaXplZFN0cmluZ1tpICsgM10pO1xuXG4gICAgICAgIC8qanNsaW50IGJpdHdpc2U6IHRydWUgKi9cbiAgICAgICAgYnl0ZXNbcCsrXSA9IGVuY29kZWQxIDw8IDIgfCBlbmNvZGVkMiA+PiA0O1xuICAgICAgICBieXRlc1twKytdID0gKGVuY29kZWQyICYgMTUpIDw8IDQgfCBlbmNvZGVkMyA+PiAyO1xuICAgICAgICBieXRlc1twKytdID0gKGVuY29kZWQzICYgMykgPDwgNiB8IGVuY29kZWQ0ICYgNjM7XG4gICAgfVxuICAgIHJldHVybiBidWZmZXI7XG59XG5cbi8vIENvbnZlcnRzIGEgYnVmZmVyIHRvIGEgc3RyaW5nIHRvIHN0b3JlLCBzZXJpYWxpemVkLCBpbiB0aGUgYmFja2VuZFxuLy8gc3RvcmFnZSBsaWJyYXJ5LlxuZnVuY3Rpb24gYnVmZmVyVG9TdHJpbmcoYnVmZmVyKSB7XG4gICAgLy8gYmFzZTY0LWFycmF5YnVmZmVyXG4gICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICB2YXIgYmFzZTY0U3RyaW5nID0gJyc7XG4gICAgdmFyIGk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgLypqc2xpbnQgYml0d2lzZTogdHJ1ZSAqL1xuICAgICAgICBiYXNlNjRTdHJpbmcgKz0gQkFTRV9DSEFSU1tieXRlc1tpXSA+PiAyXTtcbiAgICAgICAgYmFzZTY0U3RyaW5nICs9IEJBU0VfQ0hBUlNbKGJ5dGVzW2ldICYgMykgPDwgNCB8IGJ5dGVzW2kgKyAxXSA+PiA0XTtcbiAgICAgICAgYmFzZTY0U3RyaW5nICs9IEJBU0VfQ0hBUlNbKGJ5dGVzW2kgKyAxXSAmIDE1KSA8PCAyIHwgYnl0ZXNbaSArIDJdID4+IDZdO1xuICAgICAgICBiYXNlNjRTdHJpbmcgKz0gQkFTRV9DSEFSU1tieXRlc1tpICsgMl0gJiA2M107XG4gICAgfVxuXG4gICAgaWYgKGJ5dGVzLmxlbmd0aCAlIDMgPT09IDIpIHtcbiAgICAgICAgYmFzZTY0U3RyaW5nID0gYmFzZTY0U3RyaW5nLnN1YnN0cmluZygwLCBiYXNlNjRTdHJpbmcubGVuZ3RoIC0gMSkgKyAnPSc7XG4gICAgfSBlbHNlIGlmIChieXRlcy5sZW5ndGggJSAzID09PSAxKSB7XG4gICAgICAgIGJhc2U2NFN0cmluZyA9IGJhc2U2NFN0cmluZy5zdWJzdHJpbmcoMCwgYmFzZTY0U3RyaW5nLmxlbmd0aCAtIDIpICsgJz09JztcbiAgICB9XG5cbiAgICByZXR1cm4gYmFzZTY0U3RyaW5nO1xufVxuXG4vLyBTZXJpYWxpemUgYSB2YWx1ZSwgYWZ0ZXJ3YXJkcyBleGVjdXRpbmcgYSBjYWxsYmFjayAod2hpY2ggdXN1YWxseVxuLy8gaW5zdHJ1Y3RzIHRoZSBgc2V0SXRlbSgpYCBjYWxsYmFjay9wcm9taXNlIHRvIGJlIGV4ZWN1dGVkKS4gVGhpcyBpcyBob3dcbi8vIHdlIHN0b3JlIGJpbmFyeSBkYXRhIHdpdGggbG9jYWxTdG9yYWdlLlxuZnVuY3Rpb24gc2VyaWFsaXplKHZhbHVlLCBjYWxsYmFjaykge1xuICAgIHZhciB2YWx1ZVR5cGUgPSAnJztcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFsdWVUeXBlID0gdG9TdHJpbmckMS5jYWxsKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBDYW5ub3QgdXNlIGB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyYCBvciBzdWNoIGhlcmUsIGFzIHRoZXNlXG4gICAgLy8gY2hlY2tzIGZhaWwgd2hlbiBydW5uaW5nIHRoZSB0ZXN0cyB1c2luZyBjYXNwZXIuanMuLi5cbiAgICAvL1xuICAgIC8vIFRPRE86IFNlZSB3aHkgdGhvc2UgdGVzdHMgZmFpbCBhbmQgdXNlIGEgYmV0dGVyIHNvbHV0aW9uLlxuICAgIGlmICh2YWx1ZSAmJiAodmFsdWVUeXBlID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nIHx8IHZhbHVlLmJ1ZmZlciAmJiB0b1N0cmluZyQxLmNhbGwodmFsdWUuYnVmZmVyKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJykpIHtcbiAgICAgICAgLy8gQ29udmVydCBiaW5hcnkgYXJyYXlzIHRvIGEgc3RyaW5nIGFuZCBwcmVmaXggdGhlIHN0cmluZyB3aXRoXG4gICAgICAgIC8vIGEgc3BlY2lhbCBtYXJrZXIuXG4gICAgICAgIHZhciBidWZmZXI7XG4gICAgICAgIHZhciBtYXJrZXIgPSBTRVJJQUxJWkVEX01BUktFUjtcblxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICAgICAgYnVmZmVyID0gdmFsdWU7XG4gICAgICAgICAgICBtYXJrZXIgKz0gVFlQRV9BUlJBWUJVRkZFUjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IHZhbHVlLmJ1ZmZlcjtcblxuICAgICAgICAgICAgaWYgKHZhbHVlVHlwZSA9PT0gJ1tvYmplY3QgSW50OEFycmF5XScpIHtcbiAgICAgICAgICAgICAgICBtYXJrZXIgKz0gVFlQRV9JTlQ4QVJSQVk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlVHlwZSA9PT0gJ1tvYmplY3QgVWludDhBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyICs9IFRZUEVfVUlOVDhBUlJBWTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWVUeXBlID09PSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyICs9IFRZUEVfVUlOVDhDTEFNUEVEQVJSQVk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlVHlwZSA9PT0gJ1tvYmplY3QgSW50MTZBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyICs9IFRZUEVfSU5UMTZBUlJBWTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWVUeXBlID09PSAnW29iamVjdCBVaW50MTZBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyICs9IFRZUEVfVUlOVDE2QVJSQVk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlVHlwZSA9PT0gJ1tvYmplY3QgSW50MzJBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyICs9IFRZUEVfSU5UMzJBUlJBWTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWVUeXBlID09PSAnW29iamVjdCBVaW50MzJBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyICs9IFRZUEVfVUlOVDMyQVJSQVk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlVHlwZSA9PT0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScpIHtcbiAgICAgICAgICAgICAgICBtYXJrZXIgKz0gVFlQRV9GTE9BVDMyQVJSQVk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlVHlwZSA9PT0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScpIHtcbiAgICAgICAgICAgICAgICBtYXJrZXIgKz0gVFlQRV9GTE9BVDY0QVJSQVk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcignRmFpbGVkIHRvIGdldCB0eXBlIGZvciBCaW5hcnlBcnJheScpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrKG1hcmtlciArIGJ1ZmZlclRvU3RyaW5nKGJ1ZmZlcikpO1xuICAgIH0gZWxzZSBpZiAodmFsdWVUeXBlID09PSAnW29iamVjdCBCbG9iXScpIHtcbiAgICAgICAgLy8gQ29udmVyIHRoZSBibG9iIHRvIGEgYmluYXJ5QXJyYXkgYW5kIHRoZW4gdG8gYSBzdHJpbmcuXG4gICAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIEJhY2t3YXJkcy1jb21wYXRpYmxlIHByZWZpeCBmb3IgdGhlIGJsb2IgdHlwZS5cbiAgICAgICAgICAgIHZhciBzdHIgPSBCTE9CX1RZUEVfUFJFRklYICsgdmFsdWUudHlwZSArICd+JyArIGJ1ZmZlclRvU3RyaW5nKHRoaXMucmVzdWx0KTtcblxuICAgICAgICAgICAgY2FsbGJhY2soU0VSSUFMSVpFRF9NQVJLRVIgKyBUWVBFX0JMT0IgKyBzdHIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjYWxsYmFjayhKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQ291bGRuJ3QgY29udmVydCB2YWx1ZSBpbnRvIGEgSlNPTiBzdHJpbmc6IFwiLCB2YWx1ZSk7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBEZXNlcmlhbGl6ZSBkYXRhIHdlJ3ZlIGluc2VydGVkIGludG8gYSB2YWx1ZSBjb2x1bW4vZmllbGQuIFdlIHBsYWNlXG4vLyBzcGVjaWFsIG1hcmtlcnMgaW50byBvdXIgc3RyaW5ncyB0byBtYXJrIHRoZW0gYXMgZW5jb2RlZDsgdGhpcyBpc24ndFxuLy8gYXMgbmljZSBhcyBhIG1ldGEgZmllbGQsIGJ1dCBpdCdzIHRoZSBvbmx5IHNhbmUgdGhpbmcgd2UgY2FuIGRvIHdoaWxzdFxuLy8ga2VlcGluZyBsb2NhbFN0b3JhZ2Ugc3VwcG9ydCBpbnRhY3QuXG4vL1xuLy8gT2Z0ZW50aW1lcyB0aGlzIHdpbGwganVzdCBkZXNlcmlhbGl6ZSBKU09OIGNvbnRlbnQsIGJ1dCBpZiB3ZSBoYXZlIGFcbi8vIHNwZWNpYWwgbWFya2VyIChTRVJJQUxJWkVEX01BUktFUiwgZGVmaW5lZCBhYm92ZSksIHdlIHdpbGwgZXh0cmFjdFxuLy8gc29tZSBraW5kIG9mIGFycmF5YnVmZmVyL2JpbmFyeSBkYXRhL3R5cGVkIGFycmF5IG91dCBvZiB0aGUgc3RyaW5nLlxuZnVuY3Rpb24gZGVzZXJpYWxpemUodmFsdWUpIHtcbiAgICAvLyBJZiB3ZSBoYXZlbid0IG1hcmtlZCB0aGlzIHN0cmluZyBhcyBiZWluZyBzcGVjaWFsbHkgc2VyaWFsaXplZCAoaS5lLlxuICAgIC8vIHNvbWV0aGluZyBvdGhlciB0aGFuIHNlcmlhbGl6ZWQgSlNPTiksIHdlIGNhbiBqdXN0IHJldHVybiBpdCBhbmQgYmVcbiAgICAvLyBkb25lIHdpdGggaXQuXG4gICAgaWYgKHZhbHVlLnN1YnN0cmluZygwLCBTRVJJQUxJWkVEX01BUktFUl9MRU5HVEgpICE9PSBTRVJJQUxJWkVEX01BUktFUikge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gVGhlIGZvbGxvd2luZyBjb2RlIGRlYWxzIHdpdGggZGVzZXJpYWxpemluZyBzb21lIGtpbmQgb2YgQmxvYiBvclxuICAgIC8vIFR5cGVkQXJyYXkuIEZpcnN0IHdlIHNlcGFyYXRlIG91dCB0aGUgdHlwZSBvZiBkYXRhIHdlJ3JlIGRlYWxpbmdcbiAgICAvLyB3aXRoIGZyb20gdGhlIGRhdGEgaXRzZWxmLlxuICAgIHZhciBzZXJpYWxpemVkU3RyaW5nID0gdmFsdWUuc3Vic3RyaW5nKFRZUEVfU0VSSUFMSVpFRF9NQVJLRVJfTEVOR1RIKTtcbiAgICB2YXIgdHlwZSA9IHZhbHVlLnN1YnN0cmluZyhTRVJJQUxJWkVEX01BUktFUl9MRU5HVEgsIFRZUEVfU0VSSUFMSVpFRF9NQVJLRVJfTEVOR1RIKTtcblxuICAgIHZhciBibG9iVHlwZTtcbiAgICAvLyBCYWNrd2FyZHMtY29tcGF0aWJsZSBibG9iIHR5cGUgc2VyaWFsaXphdGlvbiBzdHJhdGVneS5cbiAgICAvLyBEQnMgY3JlYXRlZCB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIGxvY2FsRm9yYWdlIHdpbGwgc2ltcGx5IG5vdCBoYXZlIHRoZSBibG9iIHR5cGUuXG4gICAgaWYgKHR5cGUgPT09IFRZUEVfQkxPQiAmJiBCTE9CX1RZUEVfUFJFRklYX1JFR0VYLnRlc3Qoc2VyaWFsaXplZFN0cmluZykpIHtcbiAgICAgICAgdmFyIG1hdGNoZXIgPSBzZXJpYWxpemVkU3RyaW5nLm1hdGNoKEJMT0JfVFlQRV9QUkVGSVhfUkVHRVgpO1xuICAgICAgICBibG9iVHlwZSA9IG1hdGNoZXJbMV07XG4gICAgICAgIHNlcmlhbGl6ZWRTdHJpbmcgPSBzZXJpYWxpemVkU3RyaW5nLnN1YnN0cmluZyhtYXRjaGVyWzBdLmxlbmd0aCk7XG4gICAgfVxuICAgIHZhciBidWZmZXIgPSBzdHJpbmdUb0J1ZmZlcihzZXJpYWxpemVkU3RyaW5nKTtcblxuICAgIC8vIFJldHVybiB0aGUgcmlnaHQgdHlwZSBiYXNlZCBvbiB0aGUgY29kZS90eXBlIHNldCBkdXJpbmdcbiAgICAvLyBzZXJpYWxpemF0aW9uLlxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFRZUEVfQVJSQVlCVUZGRVI6XG4gICAgICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgICAgICBjYXNlIFRZUEVfQkxPQjpcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVCbG9iKFtidWZmZXJdLCB7IHR5cGU6IGJsb2JUeXBlIH0pO1xuICAgICAgICBjYXNlIFRZUEVfSU5UOEFSUkFZOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICAgICAgY2FzZSBUWVBFX1VJTlQ4QVJSQVk6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICAgICAgY2FzZSBUWVBFX1VJTlQ4Q0xBTVBFREFSUkFZOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OENsYW1wZWRBcnJheShidWZmZXIpO1xuICAgICAgICBjYXNlIFRZUEVfSU5UMTZBUlJBWTpcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW50MTZBcnJheShidWZmZXIpO1xuICAgICAgICBjYXNlIFRZUEVfVUlOVDE2QVJSQVk6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQxNkFycmF5KGJ1ZmZlcik7XG4gICAgICAgIGNhc2UgVFlQRV9JTlQzMkFSUkFZOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KGJ1ZmZlcik7XG4gICAgICAgIGNhc2UgVFlQRV9VSU5UMzJBUlJBWTpcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDMyQXJyYXkoYnVmZmVyKTtcbiAgICAgICAgY2FzZSBUWVBFX0ZMT0FUMzJBUlJBWTpcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlcik7XG4gICAgICAgIGNhc2UgVFlQRV9GTE9BVDY0QVJSQVk6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0NjRBcnJheShidWZmZXIpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtvd24gdHlwZTogJyArIHR5cGUpO1xuICAgIH1cbn1cblxudmFyIGxvY2FsZm9yYWdlU2VyaWFsaXplciA9IHtcbiAgICBzZXJpYWxpemU6IHNlcmlhbGl6ZSxcbiAgICBkZXNlcmlhbGl6ZTogZGVzZXJpYWxpemUsXG4gICAgc3RyaW5nVG9CdWZmZXI6IHN0cmluZ1RvQnVmZmVyLFxuICAgIGJ1ZmZlclRvU3RyaW5nOiBidWZmZXJUb1N0cmluZ1xufTtcblxuLypcbiAqIEluY2x1ZGVzIGNvZGUgZnJvbTpcbiAqXG4gKiBiYXNlNjQtYXJyYXlidWZmZXJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9uaWtsYXN2aC9iYXNlNjQtYXJyYXlidWZmZXJcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgTmlrbGFzIHZvbiBIZXJ0emVuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRGJUYWJsZSh0LCBkYkluZm8sIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgdC5leGVjdXRlU3FsKCdDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyAnICsgZGJJbmZvLnN0b3JlTmFtZSArICcgJyArICcoaWQgSU5URUdFUiBQUklNQVJZIEtFWSwga2V5IHVuaXF1ZSwgdmFsdWUpJywgW10sIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbn1cblxuLy8gT3BlbiB0aGUgV2ViU1FMIGRhdGFiYXNlIChhdXRvbWF0aWNhbGx5IGNyZWF0ZXMgb25lIGlmIG9uZSBkaWRuJ3Rcbi8vIHByZXZpb3VzbHkgZXhpc3QpLCB1c2luZyBhbnkgb3B0aW9ucyBzZXQgaW4gdGhlIGNvbmZpZy5cbmZ1bmN0aW9uIF9pbml0U3RvcmFnZSQxKG9wdGlvbnMpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGRiSW5mbyA9IHtcbiAgICAgICAgZGI6IG51bGxcbiAgICB9O1xuXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBkYkluZm9baV0gPSB0eXBlb2Ygb3B0aW9uc1tpXSAhPT0gJ3N0cmluZycgPyBvcHRpb25zW2ldLnRvU3RyaW5nKCkgOiBvcHRpb25zW2ldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRiSW5mb1Byb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgLy8gT3BlbiB0aGUgZGF0YWJhc2U7IHRoZSBvcGVuRGF0YWJhc2UgQVBJIHdpbGwgYXV0b21hdGljYWxseVxuICAgICAgICAvLyBjcmVhdGUgaXQgZm9yIHVzIGlmIGl0IGRvZXNuJ3QgZXhpc3QuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkYkluZm8uZGIgPSBvcGVuRGF0YWJhc2UoZGJJbmZvLm5hbWUsIFN0cmluZyhkYkluZm8udmVyc2lvbiksIGRiSW5mby5kZXNjcmlwdGlvbiwgZGJJbmZvLnNpemUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIG91ciBrZXkvdmFsdWUgdGFibGUgaWYgaXQgZG9lc24ndCBleGlzdC5cbiAgICAgICAgZGJJbmZvLmRiLnRyYW5zYWN0aW9uKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICBjcmVhdGVEYlRhYmxlKHQsIGRiSW5mbywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuX2RiSW5mbyA9IGRiSW5mbztcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAodCwgZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgfSk7XG5cbiAgICBkYkluZm8uc2VyaWFsaXplciA9IGxvY2FsZm9yYWdlU2VyaWFsaXplcjtcbiAgICByZXR1cm4gZGJJbmZvUHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gdHJ5RXhlY3V0ZVNxbCh0LCBkYkluZm8sIHNxbFN0YXRlbWVudCwgYXJncywgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICB0LmV4ZWN1dGVTcWwoc3FsU3RhdGVtZW50LCBhcmdzLCBjYWxsYmFjaywgZnVuY3Rpb24gKHQsIGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvci5jb2RlID09PSBlcnJvci5TWU5UQVhfRVJSKSB7XG4gICAgICAgICAgICB0LmV4ZWN1dGVTcWwoJ1NFTEVDVCBuYW1lIEZST00gc3FsaXRlX21hc3RlciAnICsgXCJXSEVSRSB0eXBlPSd0YWJsZScgQU5EIG5hbWUgPSA/XCIsIFtkYkluZm8uc3RvcmVOYW1lXSwgZnVuY3Rpb24gKHQsIHJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdHMucm93cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHRhYmxlIGlzIG1pc3NpbmcgKHdhcyBkZWxldGVkKVxuICAgICAgICAgICAgICAgICAgICAvLyByZS1jcmVhdGUgaXQgdGFibGUgYW5kIHJldHJ5XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZURiVGFibGUodCwgZGJJbmZvLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0LmV4ZWN1dGVTcWwoc3FsU3RhdGVtZW50LCBhcmdzLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGVycm9yQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2sodCwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGVycm9yQ2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXJyb3JDYWxsYmFjayh0LCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9LCBlcnJvckNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gZ2V0SXRlbSQxKGtleSwgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBrZXkgPSBub3JtYWxpemVLZXkoa2V5KTtcblxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHNlbGYucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBkYkluZm8gPSBzZWxmLl9kYkluZm87XG4gICAgICAgICAgICBkYkluZm8uZGIudHJhbnNhY3Rpb24oZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB0cnlFeGVjdXRlU3FsKHQsIGRiSW5mbywgJ1NFTEVDVCAqIEZST00gJyArIGRiSW5mby5zdG9yZU5hbWUgKyAnIFdIRVJFIGtleSA9ID8gTElNSVQgMScsIFtrZXldLCBmdW5jdGlvbiAodCwgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gcmVzdWx0cy5yb3dzLmxlbmd0aCA/IHJlc3VsdHMucm93cy5pdGVtKDApLnZhbHVlIDogbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgdGhpcyBpcyBzZXJpYWxpemVkIGNvbnRlbnQgd2UgbmVlZCB0b1xuICAgICAgICAgICAgICAgICAgICAvLyB1bnBhY2suXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGRiSW5mby5zZXJpYWxpemVyLmRlc2VyaWFsaXplKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHQsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gaXRlcmF0ZSQxKGl0ZXJhdG9yLCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHNlbGYucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBkYkluZm8gPSBzZWxmLl9kYkluZm87XG5cbiAgICAgICAgICAgIGRiSW5mby5kYi50cmFuc2FjdGlvbihmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHRyeUV4ZWN1dGVTcWwodCwgZGJJbmZvLCAnU0VMRUNUICogRlJPTSAnICsgZGJJbmZvLnN0b3JlTmFtZSwgW10sIGZ1bmN0aW9uICh0LCByZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3dzID0gcmVzdWx0cy5yb3dzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gcm93cy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSByb3dzLml0ZW0oaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gaXRlbS52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoaXMgaXMgc2VyaWFsaXplZCBjb250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIHVucGFjay5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBkYkluZm8uc2VyaWFsaXplci5kZXNlcmlhbGl6ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBpdGVyYXRvcihyZXN1bHQsIGl0ZW0ua2V5LCBpICsgMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZvaWQoMCkgcHJldmVudHMgcHJvYmxlbXMgd2l0aCByZWRlZmluaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9mIGB1bmRlZmluZWRgLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAodCwgZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVtcImNhdGNoXCJdKHJlamVjdCk7XG4gICAgfSk7XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBfc2V0SXRlbShrZXksIHZhbHVlLCBjYWxsYmFjaywgcmV0cmllc0xlZnQpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBrZXkgPSBub3JtYWxpemVLZXkoa2V5KTtcblxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHNlbGYucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIFRoZSBsb2NhbFN0b3JhZ2UgQVBJIGRvZXNuJ3QgcmV0dXJuIHVuZGVmaW5lZCB2YWx1ZXMgaW4gYW5cbiAgICAgICAgICAgIC8vIFwiZXhwZWN0ZWRcIiB3YXksIHNvIHVuZGVmaW5lZCBpcyBhbHdheXMgY2FzdCB0byBudWxsIGluIGFsbFxuICAgICAgICAgICAgLy8gZHJpdmVycy4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9sb2NhbEZvcmFnZS9wdWxsLzQyXG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2F2ZSB0aGUgb3JpZ2luYWwgdmFsdWUgdG8gcGFzcyB0byB0aGUgY2FsbGJhY2suXG4gICAgICAgICAgICB2YXIgb3JpZ2luYWxWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgICAgICB2YXIgZGJJbmZvID0gc2VsZi5fZGJJbmZvO1xuICAgICAgICAgICAgZGJJbmZvLnNlcmlhbGl6ZXIuc2VyaWFsaXplKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGJJbmZvLmRiLnRyYW5zYWN0aW9uKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnlFeGVjdXRlU3FsKHQsIGRiSW5mbywgJ0lOU0VSVCBPUiBSRVBMQUNFIElOVE8gJyArIGRiSW5mby5zdG9yZU5hbWUgKyAnICcgKyAnKGtleSwgdmFsdWUpIFZBTFVFUyAoPywgPyknLCBba2V5LCB2YWx1ZV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG9yaWdpbmFsVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHQsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoc3FsRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSB0cmFuc2FjdGlvbiBmYWlsZWQ7IGNoZWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBzZWUgaWYgaXQncyBhIHF1b3RhIGVycm9yLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNxbEVycm9yLmNvZGUgPT09IHNxbEVycm9yLlFVT1RBX0VSUikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIHJlamVjdCB0aGUgY2FsbGJhY2sgb3V0cmlnaHQgZm9yIG5vdywgYnV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXQncyB3b3J0aCB0cnlpbmcgdG8gcmUtcnVuIHRoZSB0cmFuc2FjdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFdmVuIGlmIHRoZSB1c2VyIGFjY2VwdHMgdGhlIHByb21wdCB0byB1c2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtb3JlIHN0b3JhZ2Ugb24gU2FmYXJpLCB0aGlzIGVycm9yIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBiZSBjYWxsZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUcnkgdG8gcmUtcnVuIHRoZSB0cmFuc2FjdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0cmllc0xlZnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoX3NldEl0ZW0uYXBwbHkoc2VsZiwgW2tleSwgb3JpZ2luYWxWYWx1ZSwgY2FsbGJhY2ssIHJldHJpZXNMZWZ0IC0gMV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3Qoc3FsRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gc2V0SXRlbSQxKGtleSwgdmFsdWUsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIF9zZXRJdGVtLmFwcGx5KHRoaXMsIFtrZXksIHZhbHVlLCBjYWxsYmFjaywgMV0pO1xufVxuXG5mdW5jdGlvbiByZW1vdmVJdGVtJDEoa2V5LCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIGtleSA9IG5vcm1hbGl6ZUtleShrZXkpO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGRiSW5mbyA9IHNlbGYuX2RiSW5mbztcbiAgICAgICAgICAgIGRiSW5mby5kYi50cmFuc2FjdGlvbihmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHRyeUV4ZWN1dGVTcWwodCwgZGJJbmZvLCAnREVMRVRFIEZST00gJyArIGRiSW5mby5zdG9yZU5hbWUgKyAnIFdIRVJFIGtleSA9ID8nLCBba2V5XSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHQsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuLy8gRGVsZXRlcyBldmVyeSBpdGVtIGluIHRoZSB0YWJsZS5cbi8vIFRPRE86IEZpbmQgb3V0IGlmIHRoaXMgcmVzZXRzIHRoZSBBVVRPX0lOQ1JFTUVOVCBudW1iZXIuXG5mdW5jdGlvbiBjbGVhciQxKGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGRiSW5mbyA9IHNlbGYuX2RiSW5mbztcbiAgICAgICAgICAgIGRiSW5mby5kYi50cmFuc2FjdGlvbihmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHRyeUV4ZWN1dGVTcWwodCwgZGJJbmZvLCAnREVMRVRFIEZST00gJyArIGRiSW5mby5zdG9yZU5hbWUsIFtdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAodCwgZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVtcImNhdGNoXCJdKHJlamVjdCk7XG4gICAgfSk7XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG4vLyBEb2VzIGEgc2ltcGxlIGBDT1VOVChrZXkpYCB0byBnZXQgdGhlIG51bWJlciBvZiBpdGVtcyBzdG9yZWQgaW5cbi8vIGxvY2FsRm9yYWdlLlxuZnVuY3Rpb24gbGVuZ3RoJDEoY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZGJJbmZvID0gc2VsZi5fZGJJbmZvO1xuICAgICAgICAgICAgZGJJbmZvLmRiLnRyYW5zYWN0aW9uKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgLy8gQWhoaCwgU1FMIG1ha2VzIHRoaXMgb25lIHNvb29vb28gZWFzeS5cbiAgICAgICAgICAgICAgICB0cnlFeGVjdXRlU3FsKHQsIGRiSW5mbywgJ1NFTEVDVCBDT1VOVChrZXkpIGFzIGMgRlJPTSAnICsgZGJJbmZvLnN0b3JlTmFtZSwgW10sIGZ1bmN0aW9uICh0LCByZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSByZXN1bHRzLnJvd3MuaXRlbSgwKS5jO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHQsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuLy8gUmV0dXJuIHRoZSBrZXkgbG9jYXRlZCBhdCBrZXkgaW5kZXggWDsgZXNzZW50aWFsbHkgZ2V0cyB0aGUga2V5IGZyb20gYVxuLy8gYFdIRVJFIGlkID0gP2AuIFRoaXMgaXMgdGhlIG1vc3QgZWZmaWNpZW50IHdheSBJIGNhbiB0aGluayB0byBpbXBsZW1lbnRcbi8vIHRoaXMgcmFyZWx5LXVzZWQgKGluIG15IGV4cGVyaWVuY2UpIHBhcnQgb2YgdGhlIEFQSSwgYnV0IGl0IGNhbiBzZWVtXG4vLyBpbmNvbnNpc3RlbnQsIGJlY2F1c2Ugd2UgZG8gYElOU0VSVCBPUiBSRVBMQUNFIElOVE9gIG9uIGBzZXRJdGVtKClgLCBzb1xuLy8gdGhlIElEIG9mIGVhY2gga2V5IHdpbGwgY2hhbmdlIGV2ZXJ5IHRpbWUgaXQncyB1cGRhdGVkLiBQZXJoYXBzIGEgc3RvcmVkXG4vLyBwcm9jZWR1cmUgZm9yIHRoZSBgc2V0SXRlbSgpYCBTUUwgd291bGQgc29sdmUgdGhpcyBwcm9ibGVtP1xuLy8gVE9ETzogRG9uJ3QgY2hhbmdlIElEIG9uIGBzZXRJdGVtKClgLlxuZnVuY3Rpb24ga2V5JDEobiwgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZGJJbmZvID0gc2VsZi5fZGJJbmZvO1xuICAgICAgICAgICAgZGJJbmZvLmRiLnRyYW5zYWN0aW9uKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdHJ5RXhlY3V0ZVNxbCh0LCBkYkluZm8sICdTRUxFQ1Qga2V5IEZST00gJyArIGRiSW5mby5zdG9yZU5hbWUgKyAnIFdIRVJFIGlkID0gPyBMSU1JVCAxJywgW24gKyAxXSwgZnVuY3Rpb24gKHQsIHJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHJlc3VsdHMucm93cy5sZW5ndGggPyByZXN1bHRzLnJvd3MuaXRlbSgwKS5rZXkgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHQsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24ga2V5cyQxKGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGRiSW5mbyA9IHNlbGYuX2RiSW5mbztcbiAgICAgICAgICAgIGRiSW5mby5kYi50cmFuc2FjdGlvbihmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHRyeUV4ZWN1dGVTcWwodCwgZGJJbmZvLCAnU0VMRUNUIGtleSBGUk9NICcgKyBkYkluZm8uc3RvcmVOYW1lLCBbXSwgZnVuY3Rpb24gKHQsIHJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleXMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMucm93cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5cy5wdXNoKHJlc3VsdHMucm93cy5pdGVtKGkpLmtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGtleXMpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICh0LCBlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0ocmVqZWN0KTtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJkYXRhYmFzZS8jZGF0YWJhc2VzXG4vLyA+IFRoZXJlIGlzIG5vIHdheSB0byBlbnVtZXJhdGUgb3IgZGVsZXRlIHRoZSBkYXRhYmFzZXMgYXZhaWxhYmxlIGZvciBhbiBvcmlnaW4gZnJvbSB0aGlzIEFQSS5cbmZ1bmN0aW9uIGdldEFsbFN0b3JlTmFtZXMoZGIpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGRiLnRyYW5zYWN0aW9uKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB0LmV4ZWN1dGVTcWwoJ1NFTEVDVCBuYW1lIEZST00gc3FsaXRlX21hc3RlciAnICsgXCJXSEVSRSB0eXBlPSd0YWJsZScgQU5EIG5hbWUgPD4gJ19fV2ViS2l0RGF0YWJhc2VJbmZvVGFibGVfXydcIiwgW10sIGZ1bmN0aW9uICh0LCByZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0b3JlTmFtZXMgPSBbXTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5yb3dzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0b3JlTmFtZXMucHVzaChyZXN1bHRzLnJvd3MuaXRlbShpKS5uYW1lKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgICAgICAgZGI6IGRiLFxuICAgICAgICAgICAgICAgICAgICBzdG9yZU5hbWVzOiBzdG9yZU5hbWVzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAodCwgZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChzcWxFcnJvcikge1xuICAgICAgICAgICAgcmVqZWN0KHNxbEVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGRyb3BJbnN0YW5jZSQxKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2sgPSBnZXRDYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgdmFyIGN1cnJlbnRDb25maWcgPSB0aGlzLmNvbmZpZygpO1xuICAgIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyAhPT0gJ2Z1bmN0aW9uJyAmJiBvcHRpb25zIHx8IHt9O1xuICAgIGlmICghb3B0aW9ucy5uYW1lKSB7XG4gICAgICAgIG9wdGlvbnMubmFtZSA9IG9wdGlvbnMubmFtZSB8fCBjdXJyZW50Q29uZmlnLm5hbWU7XG4gICAgICAgIG9wdGlvbnMuc3RvcmVOYW1lID0gb3B0aW9ucy5zdG9yZU5hbWUgfHwgY3VycmVudENvbmZpZy5zdG9yZU5hbWU7XG4gICAgfVxuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBwcm9taXNlO1xuICAgIGlmICghb3B0aW9ucy5uYW1lKSB7XG4gICAgICAgIHByb21pc2UgPSBQcm9taXNlJDEucmVqZWN0KCdJbnZhbGlkIGFyZ3VtZW50cycpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICB2YXIgZGI7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5uYW1lID09PSBjdXJyZW50Q29uZmlnLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAvLyB1c2UgdGhlIGRiIHJlZmVyZW5jZSBvZiB0aGUgY3VycmVudCBpbnN0YW5jZVxuICAgICAgICAgICAgICAgIGRiID0gc2VsZi5fZGJJbmZvLmRiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYiA9IG9wZW5EYXRhYmFzZShvcHRpb25zLm5hbWUsICcnLCAnJywgMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5zdG9yZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBkcm9wIGFsbCBkYXRhYmFzZSB0YWJsZXNcbiAgICAgICAgICAgICAgICByZXNvbHZlKGdldEFsbFN0b3JlTmFtZXMoZGIpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgIGRiOiBkYixcbiAgICAgICAgICAgICAgICAgICAgc3RvcmVOYW1lczogW29wdGlvbnMuc3RvcmVOYW1lXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChvcGVyYXRpb25JbmZvKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uSW5mby5kYi50cmFuc2FjdGlvbihmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkcm9wVGFibGUoc3RvcmVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5leGVjdXRlU3FsKCdEUk9QIFRBQkxFIElGIEVYSVNUUyAnICsgc3RvcmVOYW1lLCBbXSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHQsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBvcGVyYXRpb25zID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBvcGVyYXRpb25JbmZvLnN0b3JlTmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbnMucHVzaChkcm9wVGFibGUob3BlcmF0aW9uSW5mby5zdG9yZU5hbWVzW2ldKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBQcm9taXNlJDEuYWxsKG9wZXJhdGlvbnMpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChzcWxFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3Qoc3FsRXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbnZhciB3ZWJTUUxTdG9yYWdlID0ge1xuICAgIF9kcml2ZXI6ICd3ZWJTUUxTdG9yYWdlJyxcbiAgICBfaW5pdFN0b3JhZ2U6IF9pbml0U3RvcmFnZSQxLFxuICAgIF9zdXBwb3J0OiBpc1dlYlNRTFZhbGlkKCksXG4gICAgaXRlcmF0ZTogaXRlcmF0ZSQxLFxuICAgIGdldEl0ZW06IGdldEl0ZW0kMSxcbiAgICBzZXRJdGVtOiBzZXRJdGVtJDEsXG4gICAgcmVtb3ZlSXRlbTogcmVtb3ZlSXRlbSQxLFxuICAgIGNsZWFyOiBjbGVhciQxLFxuICAgIGxlbmd0aDogbGVuZ3RoJDEsXG4gICAga2V5OiBrZXkkMSxcbiAgICBrZXlzOiBrZXlzJDEsXG4gICAgZHJvcEluc3RhbmNlOiBkcm9wSW5zdGFuY2UkMVxufTtcblxuZnVuY3Rpb24gaXNMb2NhbFN0b3JhZ2VWYWxpZCgpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGxvY2FsU3RvcmFnZSAhPT0gJ3VuZGVmaW5lZCcgJiYgJ3NldEl0ZW0nIGluIGxvY2FsU3RvcmFnZSAmJlxuICAgICAgICAvLyBpbiBJRTggdHlwZW9mIGxvY2FsU3RvcmFnZS5zZXRJdGVtID09PSAnb2JqZWN0J1xuICAgICAgICAhIWxvY2FsU3RvcmFnZS5zZXRJdGVtO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX2dldEtleVByZWZpeChvcHRpb25zLCBkZWZhdWx0Q29uZmlnKSB7XG4gICAgdmFyIGtleVByZWZpeCA9IG9wdGlvbnMubmFtZSArICcvJztcblxuICAgIGlmIChvcHRpb25zLnN0b3JlTmFtZSAhPT0gZGVmYXVsdENvbmZpZy5zdG9yZU5hbWUpIHtcbiAgICAgICAga2V5UHJlZml4ICs9IG9wdGlvbnMuc3RvcmVOYW1lICsgJy8nO1xuICAgIH1cbiAgICByZXR1cm4ga2V5UHJlZml4O1xufVxuXG4vLyBDaGVjayBpZiBsb2NhbFN0b3JhZ2UgdGhyb3dzIHdoZW4gc2F2aW5nIGFuIGl0ZW1cbmZ1bmN0aW9uIGNoZWNrSWZMb2NhbFN0b3JhZ2VUaHJvd3MoKSB7XG4gICAgdmFyIGxvY2FsU3RvcmFnZVRlc3RLZXkgPSAnX2xvY2FsZm9yYWdlX3N1cHBvcnRfdGVzdCc7XG5cbiAgICB0cnkge1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShsb2NhbFN0b3JhZ2VUZXN0S2V5LCB0cnVlKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0obG9jYWxTdG9yYWdlVGVzdEtleSk7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuXG4vLyBDaGVjayBpZiBsb2NhbFN0b3JhZ2UgaXMgdXNhYmxlIGFuZCBhbGxvd3MgdG8gc2F2ZSBhbiBpdGVtXG4vLyBUaGlzIG1ldGhvZCBjaGVja3MgaWYgbG9jYWxTdG9yYWdlIGlzIHVzYWJsZSBpbiBTYWZhcmkgUHJpdmF0ZSBCcm93c2luZ1xuLy8gbW9kZSwgb3IgaW4gYW55IG90aGVyIGNhc2Ugd2hlcmUgdGhlIGF2YWlsYWJsZSBxdW90YSBmb3IgbG9jYWxTdG9yYWdlXG4vLyBpcyAwIGFuZCB0aGVyZSB3YXNuJ3QgYW55IHNhdmVkIGl0ZW1zIHlldC5cbmZ1bmN0aW9uIF9pc0xvY2FsU3RvcmFnZVVzYWJsZSgpIHtcbiAgICByZXR1cm4gIWNoZWNrSWZMb2NhbFN0b3JhZ2VUaHJvd3MoKSB8fCBsb2NhbFN0b3JhZ2UubGVuZ3RoID4gMDtcbn1cblxuLy8gQ29uZmlnIHRoZSBsb2NhbFN0b3JhZ2UgYmFja2VuZCwgdXNpbmcgb3B0aW9ucyBzZXQgaW4gdGhlIGNvbmZpZy5cbmZ1bmN0aW9uIF9pbml0U3RvcmFnZSQyKG9wdGlvbnMpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGRiSW5mbyA9IHt9O1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGZvciAodmFyIGkgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgZGJJbmZvW2ldID0gb3B0aW9uc1tpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRiSW5mby5rZXlQcmVmaXggPSBfZ2V0S2V5UHJlZml4KG9wdGlvbnMsIHNlbGYuX2RlZmF1bHRDb25maWcpO1xuXG4gICAgaWYgKCFfaXNMb2NhbFN0b3JhZ2VVc2FibGUoKSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZSQxLnJlamVjdCgpO1xuICAgIH1cblxuICAgIHNlbGYuX2RiSW5mbyA9IGRiSW5mbztcbiAgICBkYkluZm8uc2VyaWFsaXplciA9IGxvY2FsZm9yYWdlU2VyaWFsaXplcjtcblxuICAgIHJldHVybiBQcm9taXNlJDEucmVzb2x2ZSgpO1xufVxuXG4vLyBSZW1vdmUgYWxsIGtleXMgZnJvbSB0aGUgZGF0YXN0b3JlLCBlZmZlY3RpdmVseSBkZXN0cm95aW5nIGFsbCBkYXRhIGluXG4vLyB0aGUgYXBwJ3Mga2V5L3ZhbHVlIHN0b3JlIVxuZnVuY3Rpb24gY2xlYXIkMihjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgcHJvbWlzZSA9IHNlbGYucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGtleVByZWZpeCA9IHNlbGYuX2RiSW5mby5rZXlQcmVmaXg7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IGxvY2FsU3RvcmFnZS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGxvY2FsU3RvcmFnZS5rZXkoaSk7XG5cbiAgICAgICAgICAgIGlmIChrZXkuaW5kZXhPZihrZXlQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuLy8gUmV0cmlldmUgYW4gaXRlbSBmcm9tIHRoZSBzdG9yZS4gVW5saWtlIHRoZSBvcmlnaW5hbCBhc3luY19zdG9yYWdlXG4vLyBsaWJyYXJ5IGluIEdhaWEsIHdlIGRvbid0IG1vZGlmeSByZXR1cm4gdmFsdWVzIGF0IGFsbC4gSWYgYSBrZXkncyB2YWx1ZVxuLy8gaXMgYHVuZGVmaW5lZGAsIHdlIHBhc3MgdGhhdCB2YWx1ZSB0byB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXG5mdW5jdGlvbiBnZXRJdGVtJDIoa2V5LCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIGtleSA9IG5vcm1hbGl6ZUtleShrZXkpO1xuXG4gICAgdmFyIHByb21pc2UgPSBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYkluZm8gPSBzZWxmLl9kYkluZm87XG4gICAgICAgIHZhciByZXN1bHQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShkYkluZm8ua2V5UHJlZml4ICsga2V5KTtcblxuICAgICAgICAvLyBJZiBhIHJlc3VsdCB3YXMgZm91bmQsIHBhcnNlIGl0IGZyb20gdGhlIHNlcmlhbGl6ZWRcbiAgICAgICAgLy8gc3RyaW5nIGludG8gYSBKUyBvYmplY3QuIElmIHJlc3VsdCBpc24ndCB0cnV0aHksIHRoZSBrZXlcbiAgICAgICAgLy8gaXMgbGlrZWx5IHVuZGVmaW5lZCBhbmQgd2UnbGwgcGFzcyBpdCBzdHJhaWdodCB0byB0aGVcbiAgICAgICAgLy8gY2FsbGJhY2suXG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGRiSW5mby5zZXJpYWxpemVyLmRlc2VyaWFsaXplKHJlc3VsdCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuLy8gSXRlcmF0ZSBvdmVyIGFsbCBpdGVtcyBpbiB0aGUgc3RvcmUuXG5mdW5jdGlvbiBpdGVyYXRlJDIoaXRlcmF0b3IsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHByb21pc2UgPSBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYkluZm8gPSBzZWxmLl9kYkluZm87XG4gICAgICAgIHZhciBrZXlQcmVmaXggPSBkYkluZm8ua2V5UHJlZml4O1xuICAgICAgICB2YXIga2V5UHJlZml4TGVuZ3RoID0ga2V5UHJlZml4Lmxlbmd0aDtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGxvY2FsU3RvcmFnZS5sZW5ndGg7XG5cbiAgICAgICAgLy8gV2UgdXNlIGEgZGVkaWNhdGVkIGl0ZXJhdG9yIGluc3RlYWQgb2YgdGhlIGBpYCB2YXJpYWJsZSBiZWxvd1xuICAgICAgICAvLyBzbyBvdGhlciBrZXlzIHdlIGZldGNoIGluIGxvY2FsU3RvcmFnZSBhcmVuJ3QgY291bnRlZCBpblxuICAgICAgICAvLyB0aGUgYGl0ZXJhdGlvbk51bWJlcmAgYXJndW1lbnQgcGFzc2VkIHRvIHRoZSBgaXRlcmF0ZSgpYFxuICAgICAgICAvLyBjYWxsYmFjay5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gU2VlOiBnaXRodWIuY29tL21vemlsbGEvbG9jYWxGb3JhZ2UvcHVsbC80MzUjZGlzY3Vzc2lvbl9yMzgwNjE1MzBcbiAgICAgICAgdmFyIGl0ZXJhdGlvbk51bWJlciA9IDE7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGtleSA9IGxvY2FsU3RvcmFnZS5rZXkoaSk7XG4gICAgICAgICAgICBpZiAoa2V5LmluZGV4T2Yoa2V5UHJlZml4KSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcblxuICAgICAgICAgICAgLy8gSWYgYSByZXN1bHQgd2FzIGZvdW5kLCBwYXJzZSBpdCBmcm9tIHRoZSBzZXJpYWxpemVkXG4gICAgICAgICAgICAvLyBzdHJpbmcgaW50byBhIEpTIG9iamVjdC4gSWYgcmVzdWx0IGlzbid0IHRydXRoeSwgdGhlXG4gICAgICAgICAgICAvLyBrZXkgaXMgbGlrZWx5IHVuZGVmaW5lZCBhbmQgd2UnbGwgcGFzcyBpdCBzdHJhaWdodFxuICAgICAgICAgICAgLy8gdG8gdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBkYkluZm8uc2VyaWFsaXplci5kZXNlcmlhbGl6ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhbHVlID0gaXRlcmF0b3IodmFsdWUsIGtleS5zdWJzdHJpbmcoa2V5UHJlZml4TGVuZ3RoKSwgaXRlcmF0aW9uTnVtYmVyKyspO1xuXG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuLy8gU2FtZSBhcyBsb2NhbFN0b3JhZ2UncyBrZXkoKSBtZXRob2QsIGV4Y2VwdCB0YWtlcyBhIGNhbGxiYWNrLlxuZnVuY3Rpb24ga2V5JDIobiwgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHByb21pc2UgPSBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYkluZm8gPSBzZWxmLl9kYkluZm87XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSBsb2NhbFN0b3JhZ2Uua2V5KG4pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgcHJlZml4IGZyb20gdGhlIGtleSwgaWYgYSBrZXkgaXMgZm91bmQuXG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zdWJzdHJpbmcoZGJJbmZvLmtleVByZWZpeC5sZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIGtleXMkMihjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgcHJvbWlzZSA9IHNlbGYucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRiSW5mbyA9IHNlbGYuX2RiSW5mbztcbiAgICAgICAgdmFyIGxlbmd0aCA9IGxvY2FsU3RvcmFnZS5sZW5ndGg7XG4gICAgICAgIHZhciBrZXlzID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW1LZXkgPSBsb2NhbFN0b3JhZ2Uua2V5KGkpO1xuICAgICAgICAgICAgaWYgKGl0ZW1LZXkuaW5kZXhPZihkYkluZm8ua2V5UHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGtleXMucHVzaChpdGVtS2V5LnN1YnN0cmluZyhkYkluZm8ua2V5UHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgfSk7XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG4vLyBTdXBwbHkgdGhlIG51bWJlciBvZiBrZXlzIGluIHRoZSBkYXRhc3RvcmUgdG8gdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuZnVuY3Rpb24gbGVuZ3RoJDIoY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHByb21pc2UgPSBzZWxmLmtleXMoKS50aGVuKGZ1bmN0aW9uIChrZXlzKSB7XG4gICAgICAgIHJldHVybiBrZXlzLmxlbmd0aDtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbi8vIFJlbW92ZSBhbiBpdGVtIGZyb20gdGhlIHN0b3JlLCBuaWNlIGFuZCBzaW1wbGUuXG5mdW5jdGlvbiByZW1vdmVJdGVtJDIoa2V5LCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIGtleSA9IG5vcm1hbGl6ZUtleShrZXkpO1xuXG4gICAgdmFyIHByb21pc2UgPSBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYkluZm8gPSBzZWxmLl9kYkluZm87XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGRiSW5mby5rZXlQcmVmaXggKyBrZXkpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuLy8gU2V0IGEga2V5J3MgdmFsdWUgYW5kIHJ1biBhbiBvcHRpb25hbCBjYWxsYmFjayBvbmNlIHRoZSB2YWx1ZSBpcyBzZXQuXG4vLyBVbmxpa2UgR2FpYSdzIGltcGxlbWVudGF0aW9uLCB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gaXMgcGFzc2VkIHRoZSB2YWx1ZSxcbi8vIGluIGNhc2UgeW91IHdhbnQgdG8gb3BlcmF0ZSBvbiB0aGF0IHZhbHVlIG9ubHkgYWZ0ZXIgeW91J3JlIHN1cmUgaXRcbi8vIHNhdmVkLCBvciBzb21ldGhpbmcgbGlrZSB0aGF0LlxuZnVuY3Rpb24gc2V0SXRlbSQyKGtleSwgdmFsdWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAga2V5ID0gbm9ybWFsaXplS2V5KGtleSk7XG5cbiAgICB2YXIgcHJvbWlzZSA9IHNlbGYucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gQ29udmVydCB1bmRlZmluZWQgdmFsdWVzIHRvIG51bGwuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL2xvY2FsRm9yYWdlL3B1bGwvNDJcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhbHVlID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNhdmUgdGhlIG9yaWdpbmFsIHZhbHVlIHRvIHBhc3MgdG8gdGhlIGNhbGxiYWNrLlxuICAgICAgICB2YXIgb3JpZ2luYWxWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBkYkluZm8gPSBzZWxmLl9kYkluZm87XG4gICAgICAgICAgICBkYkluZm8uc2VyaWFsaXplci5zZXJpYWxpemUodmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oZGJJbmZvLmtleVByZWZpeCArIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShvcmlnaW5hbFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbG9jYWxTdG9yYWdlIGNhcGFjaXR5IGV4Y2VlZGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogTWFrZSB0aGlzIGEgc3BlY2lmaWMgZXJyb3IvZXZlbnQuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5uYW1lID09PSAnUXVvdGFFeGNlZWRlZEVycm9yJyB8fCBlLm5hbWUgPT09ICdOU19FUlJPUl9ET01fUVVPVEFfUkVBQ0hFRCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBkcm9wSW5zdGFuY2UkMihvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0gZ2V0Q2FsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyAhPT0gJ2Z1bmN0aW9uJyAmJiBvcHRpb25zIHx8IHt9O1xuICAgIGlmICghb3B0aW9ucy5uYW1lKSB7XG4gICAgICAgIHZhciBjdXJyZW50Q29uZmlnID0gdGhpcy5jb25maWcoKTtcbiAgICAgICAgb3B0aW9ucy5uYW1lID0gb3B0aW9ucy5uYW1lIHx8IGN1cnJlbnRDb25maWcubmFtZTtcbiAgICAgICAgb3B0aW9ucy5zdG9yZU5hbWUgPSBvcHRpb25zLnN0b3JlTmFtZSB8fCBjdXJyZW50Q29uZmlnLnN0b3JlTmFtZTtcbiAgICB9XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHByb21pc2U7XG4gICAgaWYgKCFvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgcHJvbWlzZSA9IFByb21pc2UkMS5yZWplY3QoJ0ludmFsaWQgYXJndW1lbnRzJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5zdG9yZU5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKG9wdGlvbnMubmFtZSArICcvJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoX2dldEtleVByZWZpeChvcHRpb25zLCBzZWxmLl9kZWZhdWx0Q29uZmlnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGtleVByZWZpeCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IGxvY2FsU3RvcmFnZS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBsb2NhbFN0b3JhZ2Uua2V5KGkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGtleS5pbmRleE9mKGtleVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbnZhciBsb2NhbFN0b3JhZ2VXcmFwcGVyID0ge1xuICAgIF9kcml2ZXI6ICdsb2NhbFN0b3JhZ2VXcmFwcGVyJyxcbiAgICBfaW5pdFN0b3JhZ2U6IF9pbml0U3RvcmFnZSQyLFxuICAgIF9zdXBwb3J0OiBpc0xvY2FsU3RvcmFnZVZhbGlkKCksXG4gICAgaXRlcmF0ZTogaXRlcmF0ZSQyLFxuICAgIGdldEl0ZW06IGdldEl0ZW0kMixcbiAgICBzZXRJdGVtOiBzZXRJdGVtJDIsXG4gICAgcmVtb3ZlSXRlbTogcmVtb3ZlSXRlbSQyLFxuICAgIGNsZWFyOiBjbGVhciQyLFxuICAgIGxlbmd0aDogbGVuZ3RoJDIsXG4gICAga2V5OiBrZXkkMixcbiAgICBrZXlzOiBrZXlzJDIsXG4gICAgZHJvcEluc3RhbmNlOiBkcm9wSW5zdGFuY2UkMlxufTtcblxudmFyIHNhbWVWYWx1ZSA9IGZ1bmN0aW9uIHNhbWVWYWx1ZSh4LCB5KSB7XG4gICAgcmV0dXJuIHggPT09IHkgfHwgdHlwZW9mIHggPT09ICdudW1iZXInICYmIHR5cGVvZiB5ID09PSAnbnVtYmVyJyAmJiBpc05hTih4KSAmJiBpc05hTih5KTtcbn07XG5cbnZhciBpbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzKGFycmF5LCBzZWFyY2hFbGVtZW50KSB7XG4gICAgdmFyIGxlbiA9IGFycmF5Lmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgaWYgKHNhbWVWYWx1ZShhcnJheVtpXSwgc2VhcmNoRWxlbWVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFyZykge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbi8vIERyaXZlcnMgYXJlIHN0b3JlZCBoZXJlIHdoZW4gYGRlZmluZURyaXZlcigpYCBpcyBjYWxsZWQuXG4vLyBUaGV5IGFyZSBzaGFyZWQgYWNyb3NzIGFsbCBpbnN0YW5jZXMgb2YgbG9jYWxGb3JhZ2UuXG52YXIgRGVmaW5lZERyaXZlcnMgPSB7fTtcblxudmFyIERyaXZlclN1cHBvcnQgPSB7fTtcblxudmFyIERlZmF1bHREcml2ZXJzID0ge1xuICAgIElOREVYRUREQjogYXN5bmNTdG9yYWdlLFxuICAgIFdFQlNRTDogd2ViU1FMU3RvcmFnZSxcbiAgICBMT0NBTFNUT1JBR0U6IGxvY2FsU3RvcmFnZVdyYXBwZXJcbn07XG5cbnZhciBEZWZhdWx0RHJpdmVyT3JkZXIgPSBbRGVmYXVsdERyaXZlcnMuSU5ERVhFRERCLl9kcml2ZXIsIERlZmF1bHREcml2ZXJzLldFQlNRTC5fZHJpdmVyLCBEZWZhdWx0RHJpdmVycy5MT0NBTFNUT1JBR0UuX2RyaXZlcl07XG5cbnZhciBPcHRpb25hbERyaXZlck1ldGhvZHMgPSBbJ2Ryb3BJbnN0YW5jZSddO1xuXG52YXIgTGlicmFyeU1ldGhvZHMgPSBbJ2NsZWFyJywgJ2dldEl0ZW0nLCAnaXRlcmF0ZScsICdrZXknLCAna2V5cycsICdsZW5ndGgnLCAncmVtb3ZlSXRlbScsICdzZXRJdGVtJ10uY29uY2F0KE9wdGlvbmFsRHJpdmVyTWV0aG9kcyk7XG5cbnZhciBEZWZhdWx0Q29uZmlnID0ge1xuICAgIGRlc2NyaXB0aW9uOiAnJyxcbiAgICBkcml2ZXI6IERlZmF1bHREcml2ZXJPcmRlci5zbGljZSgpLFxuICAgIG5hbWU6ICdsb2NhbGZvcmFnZScsXG4gICAgLy8gRGVmYXVsdCBEQiBzaXplIGlzIF9KVVNUIFVOREVSXyA1TUIsIGFzIGl0J3MgdGhlIGhpZ2hlc3Qgc2l6ZVxuICAgIC8vIHdlIGNhbiB1c2Ugd2l0aG91dCBhIHByb21wdC5cbiAgICBzaXplOiA0OTgwNzM2LFxuICAgIHN0b3JlTmFtZTogJ2tleXZhbHVlcGFpcnMnLFxuICAgIHZlcnNpb246IDEuMFxufTtcblxuZnVuY3Rpb24gY2FsbFdoZW5SZWFkeShsb2NhbEZvcmFnZUluc3RhbmNlLCBsaWJyYXJ5TWV0aG9kKSB7XG4gICAgbG9jYWxGb3JhZ2VJbnN0YW5jZVtsaWJyYXJ5TWV0aG9kXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hcmdzID0gYXJndW1lbnRzO1xuICAgICAgICByZXR1cm4gbG9jYWxGb3JhZ2VJbnN0YW5jZS5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsRm9yYWdlSW5zdGFuY2VbbGlicmFyeU1ldGhvZF0uYXBwbHkobG9jYWxGb3JhZ2VJbnN0YW5jZSwgX2FyZ3MpO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBleHRlbmQoKSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgICBpZiAoYXJnKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfa2V5IGluIGFyZykge1xuICAgICAgICAgICAgICAgIGlmIChhcmcuaGFzT3duUHJvcGVydHkoX2tleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQXJyYXkoYXJnW19rZXldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzWzBdW19rZXldID0gYXJnW19rZXldLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHNbMF1bX2tleV0gPSBhcmdbX2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xufVxuXG52YXIgTG9jYWxGb3JhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTG9jYWxGb3JhZ2Uob3B0aW9ucykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9jYWxGb3JhZ2UpO1xuXG4gICAgICAgIGZvciAodmFyIGRyaXZlclR5cGVLZXkgaW4gRGVmYXVsdERyaXZlcnMpIHtcbiAgICAgICAgICAgIGlmIChEZWZhdWx0RHJpdmVycy5oYXNPd25Qcm9wZXJ0eShkcml2ZXJUeXBlS2V5KSkge1xuICAgICAgICAgICAgICAgIHZhciBkcml2ZXIgPSBEZWZhdWx0RHJpdmVyc1tkcml2ZXJUeXBlS2V5XTtcbiAgICAgICAgICAgICAgICB2YXIgZHJpdmVyTmFtZSA9IGRyaXZlci5fZHJpdmVyO1xuICAgICAgICAgICAgICAgIHRoaXNbZHJpdmVyVHlwZUtleV0gPSBkcml2ZXJOYW1lO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFEZWZpbmVkRHJpdmVyc1tkcml2ZXJOYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAvLyB3ZSBkb24ndCBuZWVkIHRvIHdhaXQgZm9yIHRoZSBwcm9taXNlLFxuICAgICAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCBkcml2ZXJzIGNhbiBiZSBkZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgIC8vIGluIGEgYmxvY2tpbmcgbWFubmVyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVmaW5lRHJpdmVyKGRyaXZlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZGVmYXVsdENvbmZpZyA9IGV4dGVuZCh7fSwgRGVmYXVsdENvbmZpZyk7XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IGV4dGVuZCh7fSwgdGhpcy5fZGVmYXVsdENvbmZpZywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2RyaXZlclNldCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2luaXREcml2ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9yZWFkeSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9kYkluZm8gPSBudWxsO1xuXG4gICAgICAgIHRoaXMuX3dyYXBMaWJyYXJ5TWV0aG9kc1dpdGhSZWFkeSgpO1xuICAgICAgICB0aGlzLnNldERyaXZlcih0aGlzLl9jb25maWcuZHJpdmVyKVtcImNhdGNoXCJdKGZ1bmN0aW9uICgpIHt9KTtcbiAgICB9XG5cbiAgICAvLyBTZXQgYW55IGNvbmZpZyB2YWx1ZXMgZm9yIGxvY2FsRm9yYWdlOyBjYW4gYmUgY2FsbGVkIGFueXRpbWUgYmVmb3JlXG4gICAgLy8gdGhlIGZpcnN0IEFQSSBjYWxsIChlLmcuIGBnZXRJdGVtYCwgYHNldEl0ZW1gKS5cbiAgICAvLyBXZSBsb29wIHRocm91Z2ggb3B0aW9ucyBzbyB3ZSBkb24ndCBvdmVyd3JpdGUgZXhpc3RpbmcgY29uZmlnXG4gICAgLy8gdmFsdWVzLlxuXG5cbiAgICBMb2NhbEZvcmFnZS5wcm90b3R5cGUuY29uZmlnID0gZnVuY3Rpb24gY29uZmlnKG9wdGlvbnMpIHtcbiAgICAgICAgLy8gSWYgdGhlIG9wdGlvbnMgYXJndW1lbnQgaXMgYW4gb2JqZWN0LCB3ZSB1c2UgaXQgdG8gc2V0IHZhbHVlcy5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSByZXR1cm4gZWl0aGVyIGEgc3BlY2lmaWVkIGNvbmZpZyB2YWx1ZSBvciBhbGxcbiAgICAgICAgLy8gY29uZmlnIHZhbHVlcy5cbiAgICAgICAgaWYgKCh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob3B0aW9ucykpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgLy8gSWYgbG9jYWxmb3JhZ2UgaXMgcmVhZHkgYW5kIGZ1bGx5IGluaXRpYWxpemVkLCB3ZSBjYW4ndCBzZXRcbiAgICAgICAgICAgIC8vIGFueSBuZXcgY29uZmlndXJhdGlvbiB2YWx1ZXMuIEluc3RlYWQsIHdlIHJldHVybiBhbiBlcnJvci5cbiAgICAgICAgICAgIGlmICh0aGlzLl9yZWFkeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJDYW4ndCBjYWxsIGNvbmZpZygpIGFmdGVyIGxvY2FsZm9yYWdlIFwiICsgJ2hhcyBiZWVuIHVzZWQuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmIChpID09PSAnc3RvcmVOYW1lJykge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zW2ldID0gb3B0aW9uc1tpXS5yZXBsYWNlKC9cXFcvZywgJ18nKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gJ3ZlcnNpb24nICYmIHR5cGVvZiBvcHRpb25zW2ldICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdEYXRhYmFzZSB2ZXJzaW9uIG11c3QgYmUgYSBudW1iZXIuJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5fY29uZmlnW2ldID0gb3B0aW9uc1tpXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYWZ0ZXIgYWxsIGNvbmZpZyBvcHRpb25zIGFyZSBzZXQgYW5kXG4gICAgICAgICAgICAvLyB0aGUgZHJpdmVyIG9wdGlvbiBpcyB1c2VkLCB0cnkgc2V0dGluZyBpdFxuICAgICAgICAgICAgaWYgKCdkcml2ZXInIGluIG9wdGlvbnMgJiYgb3B0aW9ucy5kcml2ZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXREcml2ZXIodGhpcy5fY29uZmlnLmRyaXZlcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZ1tvcHRpb25zXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb25maWc7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gVXNlZCB0byBkZWZpbmUgYSBjdXN0b20gZHJpdmVyLCBzaGFyZWQgYWNyb3NzIGFsbCBpbnN0YW5jZXMgb2ZcbiAgICAvLyBsb2NhbEZvcmFnZS5cblxuXG4gICAgTG9jYWxGb3JhZ2UucHJvdG90eXBlLmRlZmluZURyaXZlciA9IGZ1bmN0aW9uIGRlZmluZURyaXZlcihkcml2ZXJPYmplY3QsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBkcml2ZXJOYW1lID0gZHJpdmVyT2JqZWN0Ll9kcml2ZXI7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXBsaWFuY2VFcnJvciA9IG5ldyBFcnJvcignQ3VzdG9tIGRyaXZlciBub3QgY29tcGxpYW50OyBzZWUgJyArICdodHRwczovL21vemlsbGEuZ2l0aHViLmlvL2xvY2FsRm9yYWdlLyNkZWZpbmVkcml2ZXInKTtcblxuICAgICAgICAgICAgICAgIC8vIEEgZHJpdmVyIG5hbWUgc2hvdWxkIGJlIGRlZmluZWQgYW5kIG5vdCBvdmVybGFwIHdpdGggdGhlXG4gICAgICAgICAgICAgICAgLy8gbGlicmFyeS1kZWZpbmVkLCBkZWZhdWx0IGRyaXZlcnMuXG4gICAgICAgICAgICAgICAgaWYgKCFkcml2ZXJPYmplY3QuX2RyaXZlcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoY29tcGxpYW5jZUVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBkcml2ZXJNZXRob2RzID0gTGlicmFyeU1ldGhvZHMuY29uY2F0KCdfaW5pdFN0b3JhZ2UnKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZHJpdmVyTWV0aG9kcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHJpdmVyTWV0aG9kTmFtZSA9IGRyaXZlck1ldGhvZHNbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgcHJvcGVydHkgaXMgdGhlcmUsXG4gICAgICAgICAgICAgICAgICAgIC8vIGl0IHNob3VsZCBiZSBhIG1ldGhvZCBldmVuIHdoZW4gb3B0aW9uYWxcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzUmVxdWlyZWQgPSAhaW5jbHVkZXMoT3B0aW9uYWxEcml2ZXJNZXRob2RzLCBkcml2ZXJNZXRob2ROYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChpc1JlcXVpcmVkIHx8IGRyaXZlck9iamVjdFtkcml2ZXJNZXRob2ROYW1lXSkgJiYgdHlwZW9mIGRyaXZlck9iamVjdFtkcml2ZXJNZXRob2ROYW1lXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGNvbXBsaWFuY2VFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgY29uZmlndXJlTWlzc2luZ01ldGhvZHMgPSBmdW5jdGlvbiBjb25maWd1cmVNaXNzaW5nTWV0aG9kcygpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1ldGhvZE5vdEltcGxlbWVudGVkRmFjdG9yeSA9IGZ1bmN0aW9uIG1ldGhvZE5vdEltcGxlbWVudGVkRmFjdG9yeShtZXRob2ROYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcignTWV0aG9kICcgKyBtZXRob2ROYW1lICsgJyBpcyBub3QgaW1wbGVtZW50ZWQgYnkgdGhlIGN1cnJlbnQgZHJpdmVyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb21pc2UgPSBQcm9taXNlJDEucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2xlbiA9IE9wdGlvbmFsRHJpdmVyTWV0aG9kcy5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbmFsRHJpdmVyTWV0aG9kID0gT3B0aW9uYWxEcml2ZXJNZXRob2RzW19pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZHJpdmVyT2JqZWN0W29wdGlvbmFsRHJpdmVyTWV0aG9kXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyaXZlck9iamVjdFtvcHRpb25hbERyaXZlck1ldGhvZF0gPSBtZXRob2ROb3RJbXBsZW1lbnRlZEZhY3Rvcnkob3B0aW9uYWxEcml2ZXJNZXRob2QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyZU1pc3NpbmdNZXRob2RzKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2V0RHJpdmVyU3VwcG9ydCA9IGZ1bmN0aW9uIHNldERyaXZlclN1cHBvcnQoc3VwcG9ydCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoRGVmaW5lZERyaXZlcnNbZHJpdmVyTmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnUmVkZWZpbmluZyBMb2NhbEZvcmFnZSBkcml2ZXI6ICcgKyBkcml2ZXJOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBEZWZpbmVkRHJpdmVyc1tkcml2ZXJOYW1lXSA9IGRyaXZlck9iamVjdDtcbiAgICAgICAgICAgICAgICAgICAgRHJpdmVyU3VwcG9ydFtkcml2ZXJOYW1lXSA9IHN1cHBvcnQ7XG4gICAgICAgICAgICAgICAgICAgIC8vIGRvbid0IHVzZSBhIHRoZW4sIHNvIHRoYXQgd2UgY2FuIGRlZmluZVxuICAgICAgICAgICAgICAgICAgICAvLyBkcml2ZXJzIHRoYXQgaGF2ZSBzaW1wbGUgX3N1cHBvcnQgbWV0aG9kc1xuICAgICAgICAgICAgICAgICAgICAvLyBpbiBhIGJsb2NraW5nIG1hbm5lclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmICgnX3N1cHBvcnQnIGluIGRyaXZlck9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZHJpdmVyT2JqZWN0Ll9zdXBwb3J0ICYmIHR5cGVvZiBkcml2ZXJPYmplY3QuX3N1cHBvcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyaXZlck9iamVjdC5fc3VwcG9ydCgpLnRoZW4oc2V0RHJpdmVyU3VwcG9ydCwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldERyaXZlclN1cHBvcnQoISFkcml2ZXJPYmplY3QuX3N1cHBvcnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0RHJpdmVyU3VwcG9ydCh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBleGVjdXRlVHdvQ2FsbGJhY2tzKHByb21pc2UsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfTtcblxuICAgIExvY2FsRm9yYWdlLnByb3RvdHlwZS5kcml2ZXIgPSBmdW5jdGlvbiBkcml2ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kcml2ZXIgfHwgbnVsbDtcbiAgICB9O1xuXG4gICAgTG9jYWxGb3JhZ2UucHJvdG90eXBlLmdldERyaXZlciA9IGZ1bmN0aW9uIGdldERyaXZlcihkcml2ZXJOYW1lLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuICAgICAgICB2YXIgZ2V0RHJpdmVyUHJvbWlzZSA9IERlZmluZWREcml2ZXJzW2RyaXZlck5hbWVdID8gUHJvbWlzZSQxLnJlc29sdmUoRGVmaW5lZERyaXZlcnNbZHJpdmVyTmFtZV0pIDogUHJvbWlzZSQxLnJlamVjdChuZXcgRXJyb3IoJ0RyaXZlciBub3QgZm91bmQuJykpO1xuXG4gICAgICAgIGV4ZWN1dGVUd29DYWxsYmFja3MoZ2V0RHJpdmVyUHJvbWlzZSwgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gZ2V0RHJpdmVyUHJvbWlzZTtcbiAgICB9O1xuXG4gICAgTG9jYWxGb3JhZ2UucHJvdG90eXBlLmdldFNlcmlhbGl6ZXIgPSBmdW5jdGlvbiBnZXRTZXJpYWxpemVyKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBzZXJpYWxpemVyUHJvbWlzZSA9IFByb21pc2UkMS5yZXNvbHZlKGxvY2FsZm9yYWdlU2VyaWFsaXplcik7XG4gICAgICAgIGV4ZWN1dGVUd29DYWxsYmFja3Moc2VyaWFsaXplclByb21pc2UsIGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZXJQcm9taXNlO1xuICAgIH07XG5cbiAgICBMb2NhbEZvcmFnZS5wcm90b3R5cGUucmVhZHkgPSBmdW5jdGlvbiByZWFkeShjYWxsYmFjaykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHByb21pc2UgPSBzZWxmLl9kcml2ZXJTZXQudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5fcmVhZHkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9yZWFkeSA9IHNlbGYuX2luaXREcml2ZXIoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3JlYWR5O1xuICAgICAgICB9KTtcblxuICAgICAgICBleGVjdXRlVHdvQ2FsbGJhY2tzKHByb21pc2UsIGNhbGxiYWNrLCBjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICBMb2NhbEZvcmFnZS5wcm90b3R5cGUuc2V0RHJpdmVyID0gZnVuY3Rpb24gc2V0RHJpdmVyKGRyaXZlcnMsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICBpZiAoIWlzQXJyYXkoZHJpdmVycykpIHtcbiAgICAgICAgICAgIGRyaXZlcnMgPSBbZHJpdmVyc107XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3VwcG9ydGVkRHJpdmVycyA9IHRoaXMuX2dldFN1cHBvcnRlZERyaXZlcnMoZHJpdmVycyk7XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0RHJpdmVyVG9Db25maWcoKSB7XG4gICAgICAgICAgICBzZWxmLl9jb25maWcuZHJpdmVyID0gc2VsZi5kcml2ZXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGV4dGVuZFNlbGZXaXRoRHJpdmVyKGRyaXZlcikge1xuICAgICAgICAgICAgc2VsZi5fZXh0ZW5kKGRyaXZlcik7XG4gICAgICAgICAgICBzZXREcml2ZXJUb0NvbmZpZygpO1xuXG4gICAgICAgICAgICBzZWxmLl9yZWFkeSA9IHNlbGYuX2luaXRTdG9yYWdlKHNlbGYuX2NvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5fcmVhZHk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpbml0RHJpdmVyKHN1cHBvcnRlZERyaXZlcnMpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnREcml2ZXJJbmRleCA9IDA7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkcml2ZXJQcm9taXNlTG9vcCgpIHtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnREcml2ZXJJbmRleCA8IHN1cHBvcnRlZERyaXZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHJpdmVyTmFtZSA9IHN1cHBvcnRlZERyaXZlcnNbY3VycmVudERyaXZlckluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnREcml2ZXJJbmRleCsrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9kYkluZm8gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmVhZHkgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5nZXREcml2ZXIoZHJpdmVyTmFtZSkudGhlbihleHRlbmRTZWxmV2l0aERyaXZlcilbXCJjYXRjaFwiXShkcml2ZXJQcm9taXNlTG9vcCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzZXREcml2ZXJUb0NvbmZpZygpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoJ05vIGF2YWlsYWJsZSBzdG9yYWdlIG1ldGhvZCBmb3VuZC4nKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fZHJpdmVyU2V0ID0gUHJvbWlzZSQxLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl9kcml2ZXJTZXQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRyaXZlclByb21pc2VMb29wKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlcmUgbWlnaHQgYmUgYSBkcml2ZXIgaW5pdGlhbGl6YXRpb24gaW4gcHJvZ3Jlc3NcbiAgICAgICAgLy8gc28gd2FpdCBmb3IgaXQgdG8gZmluaXNoIGluIG9yZGVyIHRvIGF2b2lkIGEgcG9zc2libGVcbiAgICAgICAgLy8gcmFjZSBjb25kaXRpb24gdG8gc2V0IF9kYkluZm9cbiAgICAgICAgdmFyIG9sZERyaXZlclNldERvbmUgPSB0aGlzLl9kcml2ZXJTZXQgIT09IG51bGwgPyB0aGlzLl9kcml2ZXJTZXRbXCJjYXRjaFwiXShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZSQxLnJlc29sdmUoKTtcbiAgICAgICAgfSkgOiBQcm9taXNlJDEucmVzb2x2ZSgpO1xuXG4gICAgICAgIHRoaXMuX2RyaXZlclNldCA9IG9sZERyaXZlclNldERvbmUudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZHJpdmVyTmFtZSA9IHN1cHBvcnRlZERyaXZlcnNbMF07XG4gICAgICAgICAgICBzZWxmLl9kYkluZm8gPSBudWxsO1xuICAgICAgICAgICAgc2VsZi5fcmVhZHkgPSBudWxsO1xuXG4gICAgICAgICAgICByZXR1cm4gc2VsZi5nZXREcml2ZXIoZHJpdmVyTmFtZSkudGhlbihmdW5jdGlvbiAoZHJpdmVyKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fZHJpdmVyID0gZHJpdmVyLl9kcml2ZXI7XG4gICAgICAgICAgICAgICAgc2V0RHJpdmVyVG9Db25maWcoKTtcbiAgICAgICAgICAgICAgICBzZWxmLl93cmFwTGlicmFyeU1ldGhvZHNXaXRoUmVhZHkoKTtcbiAgICAgICAgICAgICAgICBzZWxmLl9pbml0RHJpdmVyID0gaW5pdERyaXZlcihzdXBwb3J0ZWREcml2ZXJzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNldERyaXZlclRvQ29uZmlnKCk7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoJ05vIGF2YWlsYWJsZSBzdG9yYWdlIG1ldGhvZCBmb3VuZC4nKTtcbiAgICAgICAgICAgIHNlbGYuX2RyaXZlclNldCA9IFByb21pc2UkMS5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2RyaXZlclNldDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXhlY3V0ZVR3b0NhbGxiYWNrcyh0aGlzLl9kcml2ZXJTZXQsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RyaXZlclNldDtcbiAgICB9O1xuXG4gICAgTG9jYWxGb3JhZ2UucHJvdG90eXBlLnN1cHBvcnRzID0gZnVuY3Rpb24gc3VwcG9ydHMoZHJpdmVyTmFtZSkge1xuICAgICAgICByZXR1cm4gISFEcml2ZXJTdXBwb3J0W2RyaXZlck5hbWVdO1xuICAgIH07XG5cbiAgICBMb2NhbEZvcmFnZS5wcm90b3R5cGUuX2V4dGVuZCA9IGZ1bmN0aW9uIF9leHRlbmQobGlicmFyeU1ldGhvZHNBbmRQcm9wZXJ0aWVzKSB7XG4gICAgICAgIGV4dGVuZCh0aGlzLCBsaWJyYXJ5TWV0aG9kc0FuZFByb3BlcnRpZXMpO1xuICAgIH07XG5cbiAgICBMb2NhbEZvcmFnZS5wcm90b3R5cGUuX2dldFN1cHBvcnRlZERyaXZlcnMgPSBmdW5jdGlvbiBfZ2V0U3VwcG9ydGVkRHJpdmVycyhkcml2ZXJzKSB7XG4gICAgICAgIHZhciBzdXBwb3J0ZWREcml2ZXJzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBkcml2ZXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgZHJpdmVyTmFtZSA9IGRyaXZlcnNbaV07XG4gICAgICAgICAgICBpZiAodGhpcy5zdXBwb3J0cyhkcml2ZXJOYW1lKSkge1xuICAgICAgICAgICAgICAgIHN1cHBvcnRlZERyaXZlcnMucHVzaChkcml2ZXJOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwcG9ydGVkRHJpdmVycztcbiAgICB9O1xuXG4gICAgTG9jYWxGb3JhZ2UucHJvdG90eXBlLl93cmFwTGlicmFyeU1ldGhvZHNXaXRoUmVhZHkgPSBmdW5jdGlvbiBfd3JhcExpYnJhcnlNZXRob2RzV2l0aFJlYWR5KCkge1xuICAgICAgICAvLyBBZGQgYSBzdHViIGZvciBlYWNoIGRyaXZlciBBUEkgbWV0aG9kIHRoYXQgZGVsYXlzIHRoZSBjYWxsIHRvIHRoZVxuICAgICAgICAvLyBjb3JyZXNwb25kaW5nIGRyaXZlciBtZXRob2QgdW50aWwgbG9jYWxGb3JhZ2UgaXMgcmVhZHkuIFRoZXNlIHN0dWJzXG4gICAgICAgIC8vIHdpbGwgYmUgcmVwbGFjZWQgYnkgdGhlIGRyaXZlciBtZXRob2RzIGFzIHNvb24gYXMgdGhlIGRyaXZlciBpc1xuICAgICAgICAvLyBsb2FkZWQsIHNvIHRoZXJlIGlzIG5vIHBlcmZvcm1hbmNlIGltcGFjdC5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IExpYnJhcnlNZXRob2RzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjYWxsV2hlblJlYWR5KHRoaXMsIExpYnJhcnlNZXRob2RzW2ldKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBMb2NhbEZvcmFnZS5wcm90b3R5cGUuY3JlYXRlSW5zdGFuY2UgPSBmdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgTG9jYWxGb3JhZ2Uob3B0aW9ucyk7XG4gICAgfTtcblxuICAgIHJldHVybiBMb2NhbEZvcmFnZTtcbn0oKTtcblxuLy8gVGhlIGFjdHVhbCBsb2NhbEZvcmFnZSBvYmplY3QgdGhhdCB3ZSBleHBvc2UgYXMgYSBtb2R1bGUgb3IgdmlhIGFcbi8vIGdsb2JhbC4gSXQncyBleHRlbmRlZCBieSBwdWxsaW5nIGluIG9uZSBvZiBvdXIgb3RoZXIgbGlicmFyaWVzLlxuXG5cbnZhciBsb2NhbGZvcmFnZV9qcyA9IG5ldyBMb2NhbEZvcmFnZSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2FsZm9yYWdlX2pzO1xuXG59LHtcIjNcIjozfV19LHt9LFs0XSkoNClcbn0pO1xuIiwiaW1wb3J0IHsgUG9zdE9mZmljZSB9IGZyb20gXCIuL3Bvc3Rfb2ZmaWNlLmpzXCI7XG4vLyB2YXIgbG9jYWxmb3JhZ2UgPSByZXF1aXJlKFtcIi9ub2RlX21vZHVsZXMvbG9jYWxmb3JhZ2UvZGlzdC9sb2NhbGZvcmFnZS5qc1wiXSk7XG4vLyBpbXBvcnQgbG9jYWxmb3JhZ2UgZnJvbSBcIi9ub2RlX21vZHVsZXMvbG9jYWxmb3JhZ2Uvc3JjL2xvY2FsZm9yYWdlLmpzXCI7XG5pbXBvcnQgeyBEZWZhdWx0Q29uZmlnIH0gZnJvbSBcIi4vY29uZmlnLmpzXCI7XG5cbmltcG9ydCBcImxvY2FsZm9yYWdlXCI7XG5cblxubG9jYWxmb3JhZ2UuY29uZmlnKHtcblx0bmFtZTogRGVmYXVsdENvbmZpZy5EQl9OQU1FLFxuXHR2ZXJzaW9uOiBEZWZhdWx0Q29uZmlnLkRCX1ZFUlNJT05cbn0pO1xuXG5cbmNsYXNzIERhdGFTb3VyY2V7ICAgLy9yZXR1cm5zIG51bGwgb25seSBpZiB0aGlzLmxhYmVsIGlzIG51bGxcblxuXHRzdGF0aWMgZ2V0T3JDcmVhdGUobGFiZWwsIHNvY2tldCwgX2NtcCkge1xuXHRcdC8vIGlmKHByb3h5TGFiZWwpe1xuXHRcdC8vIFx0cmV0dXJuIERhdGFTb3VyY2UuZ2V0UHJveHkocHJveHlMYWJlbCwgcmVwbHlMYWJlbCk7XG5cdFx0Ly8gfVxuXHRcdC8vIHJldHVybiBuZXcgRGF0YVNvdXJjZShsYWJlbCwgc29ja2V0LCBfY21wKTtcblx0XHRpZighbGFiZWwpe1xuXHRcdFx0Y29uc29sZS5sb2coXCJpbXA6XCIsXCJkYXRhc291cmNlIGluaXRpYWxpc2F0aW9uIHN0b3BwZWQgLSBObyBsYWJlbCBzcGVjaWZpZWQuXCIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR2YXIgX2RhdGFTcmMgPSBEYXRhU291cmNlLl9nZXRJbnN0YW5jZShsYWJlbCwgc29ja2V0KTtcblx0XHRpZihfZGF0YVNyYyl7XG5cdFx0XHRjb25zb2xlLmxvZyhcImltcDpcIixcInByZS1leGlzdGluZyBkYXRhc291cmNlIGF2YWlsYWJsZSAtIHVzaW5nIHRoZSBzYW1lLlwiKTtcblx0XHRcdHJldHVybiBfZGF0YVNyYztcblx0XHR9XG5cdFx0cmV0dXJuIG5ldyBEYXRhU291cmNlKGxhYmVsLCBzb2NrZXQsIF9jbXApO1xuXHR9XG5cblx0Y29uc3RydWN0b3IobGFiZWwsIHNvY2tldCwgX2NtcCwgcHJveHkpIHtcblx0XHQvLyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2RhdGEnLCB7XG5cdFx0Ly8gICAgZ2V0OiB0aGlzLl9nZXRcblx0XHQvLyB9KTtcblx0XHR0aGlzLnNvY2tldE5hbWUgPSBzb2NrZXQ7XG5cdCAgICB0aGlzLnNvY2tldCA9IHNvY2tldCA/IFBvc3RPZmZpY2Uuc29ja2V0c1tzb2NrZXRdIDogbnVsbDtcblx0ICAgIHRoaXMubGFiZWwgPSBsYWJlbDsgLy9sYWJlbCBoYXMgdG8gYmUgdW5pcXVlXG5cdCAgICB0aGlzLmV2ZW50cyA9IFtdO1xuXHQgICAgdGhpcy5kYXRhID0gX2NtcC5zY2hlbWEgfHwge307XG5cblx0ICAgIC8vIGNvbnNvbGUuZGVidWcoXCJEYXRhU291cmNlIGNvbnN0cnVjdG9yOjo6Ojo6OiAtIFwiLCB0aGlzLmRhdGEpO1xuXG5cdCAgICB0aGlzLl9jbXAgPSBfY21wO1xuXHQgICAgdGhpcy5jb21tcyA9IHtcblx0ICAgIFx0XCJpbml0XCIgOiBgJHt0aGlzLmxhYmVsfS1kYXRhc3JjLWluaXRpYWxpc2VkYFxuXHQgICAgfVxuXHQgICAgdGhpcy5ldmVudFRhcmdldCA9IG5ldyBFdmVudFRhcmdldCgpO1xuXHQgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuXHQgICAgcmV0dXJuIHRoaXMuX19pbml0X18oKTtcblx0fVxuXG5cdF9faW5pdF9fKCkge1xuXHRcdGlmKCF0aGlzLmxhYmVsKXtcblx0XHRcdHRoaXMuX2xvZyhcImltcDpcIixcImluaXRpYWxpc2F0aW9uIHN0b3BwZWQgLSBObyBsYWJlbCBzcGVjaWZpZWQuXCIpO1xuXHRcdFx0dGhpcy5hY3RpdmUgPSBmYWxzZTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLl9pbml0TG9nZ2luZygpO1xuXG5cdFx0dGhpcy5fY2hlY2tMb2NhbERCb3JGaXh0dXJlcygpO1xuXHRcdHRoaXMuX2luaXRTb2NrZXQoKTtcblxuXHRcdERhdGFTb3VyY2UuX2luc3RhbmNlcy51cGRhdGUodGhpcyk7XG4gXHRcdFxuXHRcdHRoaXMuX2xvZyhcImltcDpcIixcImluaXRpYWxpc2F0aW9uIHN1Y2Nlc3NmdWw7XCIpO1xuXHRcdC8vIGNvbnNvbGUuZ3JvdXBFbmQoKTtcblx0fVxuXG5cdF9pbml0TG9nZ2luZygpe1xuXHRcdHRoaXMuX2xvZ1ByZWZpeCA9IHRoaXMuX2NtcC5fbG9nUHJlZml4ICsgXCIgRGF0YVNvdXJjZTogXCI7XG5cdFx0dGhpcy5fbG9nU3R5bGUgPSBcImZvbnQtc2l6ZTogMTJweDsgY29sb3I6Ymx1ZVwiO1xuXHRcdC8vIGNvbnNvbGUuZ3JvdXAodGhpcy5fbG9nUHJlZml4KTtcblx0fVxuXG5cdF9sb2coKSB7XG5cdFx0dmFyIGFyZ3VtZW50c0FyciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdFx0aWYoYXJndW1lbnRzWzBdPT09XCJpbXA6XCIpe1xuXHRcdFx0dmFyIG1zZyA9IGFyZ3VtZW50c0Fyci5zbGljZSgxLGFyZ3VtZW50c0Fyci5sZW5ndGgpLmpvaW4oXCIgXCIpO1xuXHRcdFx0Y29uc29sZS5sb2coXCJpbXA6XCIsIFwiJWNcIiArIHRoaXMuX2xvZ1ByZWZpeCwgdGhpcy5fbG9nU3R5bGUsIG1zZyk7XG5cdFx0fWVsc2V7XG5cdFx0XHRjb25zb2xlLmxvZyhcIiVjXCIgKyB0aGlzLl9sb2dQcmVmaXgsIHRoaXMuX2xvZ1N0eWxlLCBtc2cpO1xuXHRcdH1cblx0fVxuXG5cdF9pbml0U29ja2V0KCl7XG5cdFx0aWYoIXRoaXMuc29ja2V0KXtcblx0XHRcdHRoaXMuX2xvZyhcIk5vIHNvY2tldCBpbml0aWFsaXNlZFwiKTtcblx0XHR9XG5cdFx0dmFyIF90aGlzID0gdGhpcztcblx0XHRpZih0aGlzLnNvY2tldCl7XG5cdFx0XHR0aGlzLnNvY2tldC5hZGRMaXN0ZW5lcih0aGlzLmxhYmVsLCAoX21zZykgPT4ge1xuXHRcdFx0XHRfdGhpcy5fb25tc2cuY2FsbChfdGhpcywgX21zZyk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRfbm9ybWFsaXplRGF0YShkYXRhKSB7XG5cdFx0aWYgKHR5cGVvZiB0aGlzLl9jbXAuc2NoZW1hID09IFwib2JqZWN0XCIgJiYgdGhpcy5fY21wLnNjaGVtYS5oYXNPd25Qcm9wZXJ0eShcImxlbmd0aFwiKSkge1xuXHRcdFx0cmV0dXJuIGRhdGE7IC8vIHdoZW4gZGF0YSBpcyBhbiBhcnJheVxuXHRcdH1cblx0XHRyZXR1cm4gey4uLnRoaXMuX2NtcC5zY2hlbWEsIC4uLmRhdGF9O1xuXHR9XG5cblx0X2Rpc3B0YWNoTWVzc2FnZShkYXRhKSB7XG5cdFx0dmFyIGV2ID0gbmV3IEN1c3RvbUV2ZW50KCB0aGlzLmxhYmVsLHtcblx0XHRcdGRldGFpbDogZGF0YVxuXHRcdH0pXG5cdFx0dGhpcy5ldmVudFRhcmdldC5kaXNwYXRjaEV2ZW50KGV2KTtcblx0XHRQb3N0T2ZmaWNlLmJyb2FkY2FzdE1zZyh0aGlzLmxhYmVsLCBkYXRhKTsgLy90byBjdXJyZW50bHkgYWxsb3cgZm9yIHRoZSByZWdpc3RlcmVkIGJvcmtlcnMgZnJvbSBvdGhlciBjb21wb25lbnRzIFxuXHR9XG5cblx0X3VwZGF0ZURhdGFJbkNvbnRleHQoZGF0YSkge1xuXHRcdHRoaXMuZGF0YSA9IGRhdGE7XG5cdFx0dGhpcy5fbG9nKCdpbXA6JywgJ3VwZGF0ZWQgZGF0YSBpbiBjb250ZXh0Jyk7XG5cdFx0dGhpcy5fZGlzcHRhY2hNZXNzYWdlKHRoaXMuZGF0YSk7XG5cdH1cblxuXHRfY2hlY2tMb2NhbERCb3JGaXh0dXJlcygpe1xuXHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cdFx0bG9jYWxmb3JhZ2UuZ2V0SXRlbSh0aGlzLmxhYmVsKS50aGVuKCh2YWx1ZSkgPT4ge1xuXHRcdFx0aWYoIXZhbHVlKXtcbiAgXHRcdFx0XHR2YXIgZml4dHVyZXMgPSBfdGhpcy5fbG9hZEZpeHR1cmVzKCk7XG5cdFx0ICAgICAgICBpZighZml4dHVyZXMpe1xuXHQgICAgICAgICAgICBfdGhpcy5fbG9nKCdpbXA6Jywnbm8gZml4dHVyZXMgYXBwbGllZCcpO1xuXHQgICAgICAgIFx0fVxuXHQgIFx0XHRcdHJldHVybjtcblx0ICBcdFx0fVxuXHQgIFx0XHRfdGhpcy5fbG9nKCdpbXA6JywgJ2dvdCBsb2NhbGx5IHN0b3JlZCBkYXRhJyk7XG5cdFx0XHRfdGhpcy5fdXBkYXRlRGF0YUluQ29udGV4dCh2YWx1ZSk7XG4gICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIF90aGlzLl9sb2coJ2ltcDonLCAnZXJyb3IgY2hlY2tpbmcgbG9jYWxseSBzdG9yZWQgZGF0YTsnLCBcIiBfcmVhc29uXzogXCIsIGVyciwgXCI7XCIgKTtcbiAgICAgICAgICAgIF90aGlzLl9sb2FkRml4dHVyZXMoKTsgXG4gICAgICAgIH0pO1xuXHR9XG5cblx0X2xvYWRGaXh0dXJlcygpe1xuXHRcdHRoaXMuX2xvZygnaW1wOicsIFwiY2hlY2tpbmcgZm9yIGZpeHR1cmVzXCIpO1xuICBcdFx0aWYoIXRoaXMuX2NtcCkge3JldHVybjt9XG4gICAgXHR2YXIgX2NtcF9kYXRhID0gdGhpcy5fY21wLl9nZXRDbXBEYXRhKCk7XG4gICAgXHRpZighX2NtcF9kYXRhKXtyZXR1cm47fVxuXG5cdFx0aWYoX2NtcF9kYXRhLmlubmVySFRNTCA9PSBcIlwiKSB7cmV0dXJuO31cblxuXHRcdHRyeXtcblx0XHRcdHZhciBkYXRhID0gSlNPTi5wYXJzZShfY21wX2RhdGEuaW5uZXJIVE1MKTtcblx0XHRcdHRoaXMuX3VwZGF0ZURhdGEoZGF0YSk7XG5cdFx0XHR0aGlzLl9sb2coJ2ltcDonLCBcImZpeHR1cmVzIGFwcGxpZWRcIik7XG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9Y2F0Y2goZSl7XG5cdFx0XHR0aGlzLl9sb2coXCJpbXA6XCIsIFwiaW52YWxpZCBqc29uIGluIGZpeHR1cmVzXCIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRcblx0fVxuXG5cdC8vIGFzeW5jIF9nZXQgKCkge1xuXHQvLyBcdHRyeSB7XG5cdC8vIFx0ICAgIHZhciBfZGF0YSA9IGF3YWl0IGxvY2FsZm9yYWdlLmdldEl0ZW0odGhpcy5sYWJlbCk7XG5cdC8vIFx0ICAgIC8vIHZhciBfZGF0YUpTT04gPSBKU09OLnBhcnNlKF9kYXRhKTtcblx0Ly8gXHQgICAgLy8gY29uc29sZS5sb2coXCJpbXA6XCIsXCJHT1QgREFUQSBpbiBEYXRhU291cmNlID09PSBcIiwgX2RhdGEpO1xuXHQvLyBcdCAgICByZXR1cm4gX2RhdGE7XG5cdC8vIFx0fSBjYXRjaCAoZXJyKSB7XG5cdC8vIFx0ICAgIHRoaXMuX2xvZyhcImltcDpcIixcImVycm9yIGluIGRhdGFzb3VyY2UuX2dldCAtLT4gXCIsZXJyKTtcblx0Ly8gXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQvLyBcdH1cblx0Ly8gXHQvLyByZXR1cm4gSlNPTi5wYXJzZSh0aGlzLmRhdGEpLmRhdGE7XG5cdC8vIH1cblxuXHRfdXBkYXRlRGF0YSAoX2RhdGEpIHtcblx0XHR0aGlzLl9sb2coXCJhdHRlbXB0aW5nIGRhdGEgdXBkYXRlXCIpO1xuXHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cdFx0aWYodGhpcy5fY21wLl9pc0RlYnVnZ2FsZSgpKXtcblx0XHRcdFRSQVNIX1NDT1BFLmNtcF9kYXRhX3NyYyA9IHRoaXM7XG5cdFx0fVxuXHRcdHZhciBkYXRhID0gdGhpcy5fbm9ybWFsaXplRGF0YShfZGF0YSlcblx0XHRsb2NhbGZvcmFnZS5zZXRJdGVtKHRoaXMubGFiZWwsIGRhdGEpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBfdGhpcy5fbG9nKCdpbXA6JywgJ3VwZGF0aW5nIGRhdGEnKTtcbiAgICAgICAgICAgIF90aGlzLl91cGRhdGVEYXRhSW5Db250ZXh0KHZhbHVlKTtcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBfdGhpcy5fbG9nKCdpbXA6JywnZXJyb3IgdXBkYXRpbmcgZGF0YTsnLCAnIF9yZWFzb25fOiAnLCBlcnIpO1xuICAgICAgICB9KTtcblx0fVxuXG5cdF9hdXRoZW50aWNhdGVNc2cgKF9tc2cpIHtcblx0XHQvLyB2YXIgYXV0aCA9IGZhbHNlO1xuXHRcdC8vIGlmKF9tc2cubGFiZWwgPT09IHRoaXMubGFiZWwpeyBhdXRoID0gdHJ1ZTt9XG5cdFx0cmV0dXJuIF9tc2cubGFiZWwgPT09IHRoaXMubGFiZWw7XG5cdH1cblxuXHQvLyBfb25tc2cgKF9tc2cpIHtcblx0Ly8gXHRpZighdGhpcy5fYXV0aGVudGljYXRlTXNnKF9tc2cpKXtyZXR1cm47fVxuXG5cdC8vIFx0Y29uc29sZS5ncm91cCh0aGlzLl9sb2dQcmVmaXgpO1xuXHQvLyBcdHRoaXMuX2xvZyhcImltcDpcIiwgXCJnb3QgbXNnIC0gXCIpO1xuXHQvLyBcdGlmKCFfbXNnLmRhdGEpe3JldHVybjt9XG5cdC8vIFx0dmFyIF9kYXRhID0gbnVsbDtcblx0Ly8gXHR0cnl7XG5cdC8vIFx0XHRfZGF0YSA9IEpTT04ucGFyc2UoX21zZy5kYXRhKS5kYXRhO1xuXHQvLyBcdFx0Ly8gSlNPTi5zdHJpbmdpZnkoX2RhdGEpOyAgLy8gbm8gcGVyZm9ybWFuY2UgYmVuZWZpdCB0byBjb252ZXJ0aW5nIHRvIHN0cmluZ3MgJiBzdG9yaW5nIChpbnN0ZWFkIGFkZGl0aW9uYWwgc3RlcHMpXG5cdC8vIFx0fVxuXHQvLyBcdGNhdGNoKGVycil7XG5cdC8vIFx0XHR0aGlzLl9sb2coXCJpbXA6XCIsIFwic29ja2V0IGRhdGEgcmVjZWl2ZWQgaXMgbm90IHZhbGlkIGpzb247XCIsICcgX3JlYXNvbl86ICcsIGVycik7XG5cdC8vIFx0fVxuXHQvLyBcdGlmKCFfZGF0YSl7cmV0dXJuO31cblxuXHQvLyBcdGNvbnNvbGUuZGlyKF9kYXRhKTtcblxuXHQvLyBcdHRoaXMuX3VwZGF0ZURhdGEoX2RhdGEpO1xuXHQvLyBcdGNvbnNvbGUuZ3JvdXBFbmQoKVxuXHQvLyB9XG5cblx0X29ubXNnIChfbXNnKSB7XG5cdFx0Ly8gdmFyIF9tc2dTdHIgPSBtc2dFdi5kYXRhO1xuICBcdFx0Ly8gdHJ5e1xuICBcdFx0Ly8gXHR2YXIgX21zZyA9IEpTT04ucGFyc2UoX21zZ1N0cik7XG4gIFx0XHQvLyB9Y2F0Y2goZSl7IC8vbm90IHZhbGlkIG1zZ1xuICBcdFx0Ly8gXHRyZXR1cm47XG4gIFx0XHQvLyB9XG4gIFx0XHR0aGlzLl9sb2coXCJpbXA6XCIsIFwiRGF0YVNyYyByZWNlaXZlZCBtc2cgLSBcIiwgX21zZyk7XG5cbiAgXHRcdGlmKCF0aGlzLl9hdXRoZW50aWNhdGVNc2coX21zZykpe1xuICBcdFx0XHR0aGlzLl9sb2coXCJpbXA6XCIsXCJtc2cgYXV0aGVudGljYXRpb24gZmFpbGVkIGZvciAtIFwiLCBfbXNnKTtcbiAgXHRcdFx0cmV0dXJuO1xuICBcdFx0fVxuXG4gIFx0XHQvLyBjb25zb2xlLmdyb3VwKHRoaXMuX2xvZ1ByZWZpeCk7XG4gIFx0XHRcbiAgXHRcdHRoaXMuX2xvZyhcImltcDpcIiwgXCJEYXRhU3JjIHZhbGlkYXRlZCBtc2cgLSBcIiwgSlNPTi5zdHJpbmdpZnkoX21zZykpO1xuXG4gIFx0XHRpZihfbXNnLmRhdGEgfHwgX21zZy5yZXN1bHQpe1xuICBcdFx0XHRsZXQgX2RhdGFUb1N0b3JlID0gX21zZy5kYXRhIHx8IF9tc2cucmVzdWx0O1xuXG4gIFx0XHRcdGNvbnNvbGUuZGVidWcoYERhdGFTb3VyY2U6ICR7dGhpcy5sYWJlbH0gc3Ryb3JpbmcgdGhlIGZvbGxvd2luZyBkYXRhIC0gYCk7XG4gIFx0XHRcdGNvbnNvbGUuZGlyKF9kYXRhVG9TdG9yZSk7XG4gIFx0XHRcdHRoaXMuX3VwZGF0ZURhdGEoX2RhdGFUb1N0b3JlKTtcbiAgXHRcdH1cbiAgXHRcdFxuICBcdFx0Ly8gY29uc29sZS5ncm91cEVuZCgpO1xuICBcdH1cbn1cblxuRGF0YVNvdXJjZS5faW5zdGFuY2VzID0gW107XG5cbkRhdGFTb3VyY2UuX2luc3RhbmNlcy51cGRhdGUgPSBmdW5jdGlvbihfZW50cnkpe1xuXHREYXRhU291cmNlLl9pbnN0YW5jZXMucHVzaChfZW50cnkpO1xufVxuXG5EYXRhU291cmNlLl9nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uKGxhYmVsLCBzb2NrZXQpe1xuXHRyZXR1cm4gRGF0YVNvdXJjZS5faW5zdGFuY2VzLmZpbmQoKF9kcyk9Pntcblx0XHRyZXR1cm4gX2RzLmxhYmVsID09IGxhYmVsICYmIF9kcy5zb2NrZXROYW1lID09IHNvY2tldDtcblx0fSk7XG59XG5cbi8vIERhdGFTb3VyY2UuZ2V0UHJveHkgPSBmdW5jdGlvbihwcm94eUxhYmVsLCByZXBseUxhYmVsKXtcbi8vIFx0Y29uc29sZS5sb2coXCJpbXA6XCIsXCJzZWFyY2hpbmcgZm9yIHByb3h5IGRhdGEgc291cmNlXCIpO1xuLy8gXHR3aW5kb3cudHR1dGlzID0gdGhpcztcbi8vIFx0dmFyIHByb3h5ID0gRGF0YVNvdXJjZS5fZ2V0SW5zdGFuY2UocHJveHlMYWJlbCk7ICAvL2NvdWxkIGhhdmUgdXNlZCBsYWJlbCBhdHRyaWJ1dGUgKGlmIGZvdW5kIHdpdGggZ2l2ZW4gbGFiZWwgLSB1c2UgdGhlIHNhbWUgLS0+IEJVVCB0aGlzIHdvdWxkIGhhdmUgZGlzYWJsZWQgdGhvc2Ugc2NlbmFyaW9zIHdoZXJlIDIgb3IgbW9yZSBkaWZmZXJlbnQgZGF0YS1zb3VyY2VzIG1pZ2h0IGJlIGNoYW5naW5nIHRoZSBzYW1lIGRhdGEpXG4vLyBcdGlmKCFwcm94eSl7XG4vLyBcdFx0Y29uc29sZS5sb2coXCJpbXA6XCIsXCJjb3VsZCBub3QgZmluZCBhbnkgcHJveHkgZGF0YSBzb3VyY2Ugd2l0aCBsYWJlbCA9IFwiICsgcHJveHlMYWJlbCk7XG5cbi8vIFx0XHR2YXIgbXNnTGFiZWwgPSBgJHtwcm94eUxhYmVsfS1kYXRhc3JjLWluaXRpYWxpc2VkYDtcbi8vIFx0XHRQb3N0T2ZmaWNlLnJlZ2lzdGVyQnJva2VyKHRoaXMsIG1zZ0xhYmVsLCAoZXYpPT57XG4vLyBcdFx0XHRjb25zb2xlLmxvZyhcImltcDpcIiwgXCJpbiBvbiB0aGVcIik7XG4vLyBcdFx0XHRQb3N0T2ZmaWNlLmJyb2FkY2FzdE1zZyhyZXBseUxhYmVsKTtcbi8vIFx0XHR9KTtcblxuLy8gXHRcdHRoaXMuYWN0aXZlID0gZmFsc2U7XG4vLyBcdFx0cmV0dXJuO1xuLy8gXHR9XG4vLyBcdHZhciBkYXRhc3JjID0gbmV3IFByb3h5KHByb3h5LCB7fSk7IC8vdXNpbmcgcHJveHkgdG8gZW5hYmxlIHByb3h5IGRhdGFzb3VyY2VzIHRvIGV4dGVuZC9hYnN0cmFjdCBjZXJ0YWluIGZ1bmN0aW9ucy9kYXRhIGZyb20gdGhlIGRhdGFzb3VyY2VzIHRoZXkgYXJlIHByb3h5aW5nIGZyb20gd2l0aG91dCBhZmZlY3RpbmcgdGhlbS5cbi8vIFx0Y29uc29sZS5sb2coXCJpbXA6XCIsXCJjcmVhdGVkIHByb3h5IGRhdGEgc291cmNlIFwiICsgdGhpcy5wcm94eSk7XG4vLyBcdHJldHVybiBkYXRhc3JjO1xuLy8gfVxuXG5leHBvcnQge1xuXHREYXRhU291cmNlXG59IiwiaW1wb3J0IHsgcmFuZG9tU3RyaW5nIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmltcG9ydCB7IERPTUNvbXBvbmVudFJlZ2lzdHJ5IH0gZnJvbSBcIi4vZG9tX2NvbXBvbmVudF9yZWdpc3RyeS5qc1wiO1xuaW1wb3J0IHsgUG9zdE9mZmljZSB9IGZyb20gXCIuL3Bvc3Rfb2ZmaWNlLmpzXCI7XG5pbXBvcnQgeyBEYXRhU291cmNlIH0gZnJvbSBcIi4vZGF0YV9zb3VyY2UuanNcIjtcbmltcG9ydCB7IHN0cmluZ1RvSFRNTEZyYWcgfSBmcm9tIFwiLi91dGlscy5qc1wiO1xuaW1wb3J0IHsgRGVmYXVsdENvbmZpZyB9IGZyb20gXCIuL2NvbmZpZy5qc1wiO1xuXG5jbGFzcyBET01Db21wb25lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG5cblx0c3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7IHJldHVybiBbJ2RhdGEtdXBkYXRlJ107IH1cblxuXHRkZWZhdWx0TGlmZWN5Y2xlSW50ZXJmYWNlcyAoc3RhdGUpe1xuXHRcdHZhciBkZWZhdWx0QnJva2VycyA9IFtcblx0XHRcdFx0XHR7c3RhdGU6IFwiZGF0YXNyY0luaXRcIiwgbGFiZWwgOlwiaW5pdC1kYXRhLXNyYy1cIiArIHRoaXMudWlkfVxuXHRcdFx0ICAgXVxuXG5cdFx0aWYoc3RhdGUpe1xuXHRcdFx0cmV0dXJuIGRlZmF1bHRCcm9rZXJzLmZpbHRlcigoX2Jyb2tlcik9Pntcblx0XHRcdFx0cmV0dXJuIF9icm9rZXIuc3RhdGUgPT0gc3RhdGU7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0cmV0dXJuIGRlZmF1bHRCcm9rZXJzO1xuXHR9XG5cblx0c3RhdGljIGRlZmF1bHRTdGF0ZVNwYWNlID0ge1xuXHRcdFwiaWRsZVwiIDoge2Fwcmlvcmk6W119XG5cdH1cblxuXHRjb25zdHJ1Y3RvcihvcHQpe1xuXHRcdHN1cGVyKCk7XG5cdFx0aWYodGhpcy5faXNEZWJ1Z2dhbGUoKSl7XG5cdFx0XHREZWZhdWx0Q29uZmlnLkRFQlVHX1NDT1BFLl9kZWJ1Z0NtcCA9IHRoaXM7XG5cdFx0fVxuXHRcdHZhciBvcHQgPSBvcHQgfHwge307XG5cblx0XHR0aGlzLmRhdGEgPSB0aGlzLmNvbnN0cnVjdG9yLnNjaGVtYSB8fCB7fTtcblx0XHR0aGlzLnNjaGVtYSA9IHRoaXMuY29uc3RydWN0b3Iuc2NoZW1hIHx8IHt9O1xuXHRcdHRoaXMuZG9tRWxOYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5kb21FbE5hbWUgfHwgb3B0LmRvbUVsTmFtZTtcblx0XHR0aGlzLmludGVyZmFjZXMgPSB0aGlzLmNvbnN0cnVjdG9yLmludGVyZmFjZXMgfHwgb3B0LmludGVyZmFjZXM7XG5cdFx0dGhpcy5zdGF0ZVNwYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5zdGF0ZVNwYWNlIHx8IG9wdC5zdGF0ZVNwYWNlO1xuXHRcdHRoaXMuTEVYSUNPTiA9IHRoaXMuY29uc3RydWN0b3IuTEVYSUNPTiB8fCB7fTtcblx0XHQvLyB0aGlzLmludGVyZmFjZVNwZWNzID0gdGhpcy5jb25zdHJ1Y3Rvci5pbnRlcmZhY2VTcGVjcyB8fCB7fTtcblx0XHR0aGlzLmFkdmVydGlzZUFzID0gdGhpcy5jb25zdHJ1Y3Rvci5hZHZlcnRpc2VBcztcblxuXHRcdHRoaXMudHJhbnNpdGlvblNwYWNlID0ge307XG5cblx0XHQvLyB0aGlzLmF1dG9Jbml0TGV4aWNvblN1YnNjcmlwdGlvbnMgPSB0aGlzLmNvbnN0cnVjdG9yLmF1dG9Jbml0TGV4aWNvblN1YnNjcmlwdGlvbnMgfHwgdHJ1ZTtcblxuXHRcdHRoaXMudWlkID0gdGhpcy51aWQgfHwgcmFuZG9tU3RyaW5nKDgpO1xuXHRcdHRoaXMuY29tcG9zZWRTY29wZSA9IHt9O1xuXHRcdHRoaXMudWlWYXJzID0ge307XG5cdFx0dGhpcy5kYXRhX3NyYyA9IG51bGw7XG5cdFx0dGhpcy5jdXJyZW50X3N0YXRlID0gXCJpZGxlXCI7XG5cdFx0dGhpcy5vcHQgPSBvcHQ7XG5cdFx0dGhpcy5ldmVudFRhcmdldCA9IG5ldyBFdmVudFRhcmdldCgpO1xuXHRcdHRoaXMuaW50ZXJmYWNlID0gUG9zdE9mZmljZS5hZGRTb2NrZXQoRXZlbnRUYXJnZXQsIHRoaXMubGFiZWwoKSk7XG5cblx0XHR0aGlzLl9wcmVJbml0KCk7XG5cdH1cblxuXHRsYWJlbCgpIHtcblx0XHRyZXR1cm4gdGhpcy5kb21FbE5hbWUgKyBcIiAjXCIgKyB0aGlzLnVpZDtcblx0fVxuXG5cdF9zZXR1cERvbUNvbnRlbnRMb2FkZWRDYWxsYmFjaygpIHtcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLChldik9Pntcblx0XHRcdGlmKHRoaXMub25Eb21Db250ZW50TG9hZGVkKXtcblx0XHRcdFx0dGhpcy5vbkRvbUNvbnRlbnRMb2FkZWQoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdF9zZXR1cEFkdmVydGlzZWRJbnRlcmZhY2UoKSB7XG5cdFx0aWYodGhpcy5hZHZlcnRpc2VBcyl7XG5cdFx0XHR0aGlzLmFkdmVydGlzZWRJbnRlcmZhY2UgPSBQb3N0T2ZmaWNlLmdldE9yQ3JlYXRlSW50ZXJmYWNlKHRoaXMuYWR2ZXJ0aXNlQXMpO1xuXG5cdFx0XHQvLyBPYmplY3Qua2V5cyh0aGlzLkxFWElDT04pLmZvckVhY2goKGtleSk9Pntcblx0XHRcdGZvcih2YXIga2V5IGluIHRoaXMuTEVYSUNPTil7XG5cdFx0XHRcdHRoaXMuYWR2ZXJ0aXNlZEludGVyZmFjZS5vbihgJHtrZXl9YCwoaW5mbGVjdGVkTXNnKT0+e1xuXHRcdFx0XHRcdGNvbnNvbGUuZGVidWcoXCJERUJVRzpcIiwgYEludGVyZmFjZS4ke3RoaXMuYWR2ZXJ0aXNlQXN9Ojo6JHtrZXl9IHJlY2VpdmVkIG1zZyAtIGAsIGluZmxlY3RlZE1zZyk7XG5cdFx0XHRcdFx0aWYodGhpc1trZXldKXtcblx0XHQgICAgICAgICAgICBcdHRoaXNba2V5XS5jYWxsKHRoaXMsIGluZmxlY3RlZE1zZyk7XG5cdFx0ICAgICAgICAgICAgfWVsc2V7XG5cdFx0ICAgICAgICAgICAgXHRjb25zb2xlLndhcm4oYCR7dGhpcy5fbG9nUHJlZml4fSBObyBvcGVyYXRpb24gPSAke2tleX0gYXZhaWxibGUgaW4gdGhlIGNvbXBvbmVudCBidXQgZGVmaW5lZCBpbiBsZXhpY29uYCk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgfSk7XG5cdFx0XHR9O1xuXHRcdFx0dGhpcy5hZHZlcnRpc2VkSW50ZXJmYWNlLmFkZEludGVyZmFjZVNwZWModGhpcy5MRVhJQ09OKTtcblx0XHR9XG5cdH1cblxuXG5cdF9wcmVJbml0KCkge1xuXHRcdHRoaXMuX3NldHVwRG9tQ29udGVudExvYWRlZENhbGxiYWNrKCk7XG5cblx0XHR0aGlzLl9zZXR1cEFkdmVydGlzZWRJbnRlcmZhY2UoKTtcblxuXHRcdC8vIGlmKHRoaXMuYXV0b0luaXRMZXhpY29uU3Vic2NyaXB0aW9ucyl7XG5cdFx0Ly8gXHR0aGlzLl9pbml0TGV4aWNvblN1YnNjcmlwdGlvbnMoKTtcblx0XHQvLyB9XG5cdH1cblxuXHRjb25uZWN0ZWRDYWxsYmFjaygpIHtcblx0XHR2YXIgb3B0ID0gdGhpcy5vcHQ7XG5cdFx0dGhpcy5fX2luaXRfXyhvcHQpO1xuXHRcdGlmKHRoaXMub25Db25uZWN0KSB7XG5cdFx0XHR0aGlzLnN3aXRjaFRvSWRsZVN0YXRlKCk7IC8vZGVmYXVsdCBzdGF0ZSBzd2l0Y2ggdG8gaWRsZSAoTk9URSAtIGJlZm9yZSBjYWxsaW5nIHRoZSBvbkNvbm5lY3QgbWV0aG9kIG9mIHRoZSBpbnN0YW5jZSlcblx0XHRcdHRoaXMub25Db25uZWN0LmNhbGwodGhpcyk7XG5cdFx0fVxuXHR9XG5cblx0X29uRGF0YVNyY1VwZGF0ZShldikge1xuXHRcdHRoaXMuX2xvZyhcImltcDpcIix0aGlzLmRhdGFfc3JjLmxhYmVsLFwiLSBcIixcImNvbXBvbmVudCBkYXRhIHVwZGF0ZSBzaWduYWwgcmVjZWl2ZWRcIik7XG5cdFx0dGhpcy5pbnRlcmZhY2UuZGlzcGF0Y2hNZXNzYWdlKFwiZGF0YXNyYy11cGRhdGVcIix7XG4gICAgICAgIFx0dWlWYXJzOiB0aGlzLnVpVmFycywgXG4gICAgICAgIFx0ZGF0YTogdGhpcy5kYXRhXG4gICAgICAgIH0pO1xuXHRcdHRoaXMucmVuZGVyKCk7XG5cdH1cblxuXHRhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sgKCkge1xuXHRcdHRoaXMucmVuZGVyKCk7XG5cdH1cblxuXHRfX2luaXRfXyhvcHQpIHtcblx0XHR2YXIgX3RoaXMgPSB0aGlzO1xuXHRcdHRoaXMuX2luaXRMb2dnaW5nKCk7XG5cdFx0dGhpcy5faW5pdFN0YXRlU3BhY2UoKTtcblxuXHRcdHRoaXMuX2xvZyhcImltcDpcIixcIkRPTUVMTmFtZSA9IFwiLCB0aGlzLmRvbUVsTmFtZSk7XG5cdFx0dGhpcy5fbG9nKFwiaW1wOlwiLFwiY29tcG9uZW50IGRhdGEvc2NoZW1hID0gXCIpO1xuXHRcdGNvbnNvbGUuZGlyKHRoaXMuZGF0YSk7XG5cdFx0dGhpcy5fbG9nKFwiaW5pdGlhbGlzaW5nIHdpdGggXCIsIG9wdCk7XG5cblx0XHR0aGlzLnNoYWRvdyA9IHRoaXMuYXR0YWNoU2hhZG93KHttb2RlOiBvcHQuZG9tTW9kZSB8fCBcIm9wZW5cIn0pO1xuXG5cdFx0dGhpcy5tYXJrdXBGdW5jID0gdGhpcy5jb25zdHJ1Y3Rvci5tYXJrdXBGdW5jIHx8IG9wdC5tYXJrdXBGdW5jO1xuXG5cdFx0dGhpcy5zdHlsZU1hcmt1cCA9IHRoaXMuY29uc3RydWN0b3Iuc3R5bGVNYXJrdXAgfHwgb3B0LnN0eWxlTWFya3VwO1xuXG5cdFx0dGhpcy5wcm9jZXNzRGF0YSA9IHRoaXMuY29uc3RydWN0b3IucHJvY2Vzc0RhdGEgfHwgb3B0LnByb2Nlc3NEYXRhO1xuXHRcblx0XHRpZighdGhpcy5tYXJrdXBGdW5jKXtcblx0XHRcdHRoaXMuX2xvZyhcIi0tLS0tLS0tLS1pbml0aWFsaXNhdGlvbiBzdG9wcGVkIC0gbm8gbWFya3VwRnVuYyBmb3VuZC0tLS0tLS0tLS0tLS0tLVwiKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLl9jb21wb3NlQW5jZXNzdHJ5KCk7XG5cblx0XHR0aGlzLl9pbml0TGlmZWN5Y2xlKG9wdCk7XG5cblx0XHR0aGlzLl9sb2coXCJpbXA6XCIsIFwiaW5pdGlhbGlzZWRcIik7XG5cblxuXHRcdGNvbnNvbGUuZ3JvdXBFbmQoKTtcblx0fVxuXG5cdGdldFBhcmVudCgpIHtcblx0ICBcdHJldHVybiBET01Db21wb25lbnRSZWdpc3RyeS5maW5kSW5zdGFuY2UodGhpcy5wYXJlbnQpO1xuXHR9XG5cblx0Ly8gX25hbWVDaGlsZChfaW5zdGFuY2UpIHtcblx0Ly8gICBcdHZhciBuYW1lID0gcmFuZG9tU3RyaW5nKDgpO1xuXHQvLyAgIFx0X2luc3RhbmNlLnVpZCA9IG5hbWU7XG5cdC8vICAgXHR0aGlzLmNoaWxkQ21wcy5wdXNoKF9pbnN0YW5jZSk7XG5cdC8vIH1cblxuXHRhc3luYyBfY29tcG9zZUFuY2Vzc3RyeSgpIHtcblxuXHRcdHRyeXtcblx0XHRcdGF3YWl0IERPTUNvbXBvbmVudFJlZ2lzdHJ5LnVwZGF0ZSh0aGlzKTtcblx0XHR9Y2F0Y2goZSl7XG5cdFx0XHRjb25zb2xlLndhcm4oYFdBUk46IEZhaWxlZCB0byBjb21wb3NlIGFuY2Vzc3RyeSBvZiAke3RoaXMuZG9tRWxOYW1lfSAtIGAsIGUpO1xuXHRcdH1cblxuXHQgIFx0aWYodGhpcy5hdHRyaWJ1dGVzLnBhcmVudCl7XG5cdCAgICBcdHRoaXMucGFyZW50ID0gdGhpcy5hdHRyaWJ1dGVzLnBhcmVudC52YWx1ZTtcblxuXHQgICAgXHRpZih0aGlzLmF0dHJpYnV0ZXMuY2hpbGRzY29wZSl7XG5cdCAgICBcdFx0bGV0IGNoaWxkc2NvcGVLZXkgPSB0aGlzLmF0dHJpYnV0ZXMuY2hpbGRzY29wZS52YWx1ZTtcblx0XHQgICAgICBcdHRoaXMuZ2V0UGFyZW50KCkuY29tcG9zZWRTY29wZVtjaGlsZHNjb3BlS2V5XSA9IHRoaXM7XG5cdFx0ICAgICAgXHR0aGlzLmdldFBhcmVudCgpLmludGVyZmFjZS5kaXNwYXRjaE1lc3NhZ2UoXCJjaGlsZC1jb21wb3NlZFwiLCBjaGlsZHNjb3BlS2V5KTtcblx0XHQgICAgfVxuXHQgICBcdH1cblx0ICAgXHRcblx0ICAgXHRjb25zb2xlLmxvZyhcImNvbXBvc2VkIGFuY2Vzc3RyeSBcIiwgdGhpcy5kb21FbE5hbWUsIFwiLCBcIiwgdGhpcy51aWQpO1xuXHR9XG5cblx0X2luaXRMb2dnaW5nKCkge1xuXHRcdHRoaXMuX2xvZ1ByZWZpeCA9ICB0aGlzLmxhYmVsKCkgKyBcIjpcIjtcblx0XHR0aGlzLl9sb2dTdHlsZSA9IFwiZm9udC1zaXplOiAxMnB4OyBjb2xvcjpkYXJrcmVkXCI7XG5cdFx0Y29uc29sZS5ncm91cCh0aGlzLl9sb2dQcmVmaXgpO1x0XHRcblx0fVxuXG5cdF9sb2coKSB7XG5cdFx0dmFyIGFyZ3VtZW50c0FyciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdFx0aWYoYXJndW1lbnRzWzBdPT09XCJpbXA6XCIpe1xuXHRcdFx0dmFyIG1zZyA9IGFyZ3VtZW50c0Fyci5zbGljZSgxLGFyZ3VtZW50c0Fyci5sZW5ndGgpLmpvaW4oXCIgXCIpO1xuXHRcdFx0Y29uc29sZS5sb2coXCJpbXA6XCIsIFwiJWNcIiArIHRoaXMuX2xvZ1ByZWZpeCwgdGhpcy5fbG9nU3R5bGUsIG1zZyk7XG5cdFx0fWVsc2V7XG5cdFx0XHRjb25zb2xlLmxvZyhcIiVjXCIgKyB0aGlzLl9sb2dQcmVmaXgsIHRoaXMuX2xvZ1N0eWxlLCBtc2cpO1xuXHRcdH1cblx0fVxuXG5cdF9pc0RlYnVnZ2FsZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5oYXNBdHRyaWJ1dGUoXCJkZWJ1Z1wiKTtcblx0fVxuXG5cdF9nZXRDbXBEYXRhKCl7XG5cdFx0cmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvcihcImNvbXBvbmVudC1kYXRhXCIpO1xuXHR9XG5cblx0X2dldERvbU5vZGUoKXtcblx0XHRyZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIltkYXRhLWNvbXBvbmVudD0nXCIgKyB0aGlzLnVpZCArIFwiJ11cIik7XG5cdH1cblxuXHRfaW5pdENvbXBvbmVudERhdGFTcmMob3B0KXtcblx0XHRpZiAodGhpcy5kYXRhX3NyYykge1xuXHQgICAgICB0aGlzLl9sb2coXCJpbXA6XCIsIFwicHJldmVudGluZyByZWluaXRpYWxpc2F0aW9uIG9mIGNvbXBvbmVudCBkYXRhLiAoYWxyZWFkeSBpbml0aWFsaXNlZCkuXCIpO1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdCAgICB2YXIgX2NtcF9kYXRhID0gdGhpcy5fZ2V0Q21wRGF0YSgpO1xuXG5cdCAgICBpZiAoX2NtcF9kYXRhKSB7XG5cdCAgICAgIHZhciBsYWJlbCA9IF9jbXBfZGF0YS5nZXRBdHRyaWJ1dGUoXCJsYWJlbFwiKTtcblx0ICAgICAgdmFyIHNvY2tldCA9IF9jbXBfZGF0YS5nZXRBdHRyaWJ1dGUoXCJzb2NrZXRcIik7XG5cdCAgICAgIHRoaXMuX2xvZyhcImltcDpcIiwgXCJpbml0aWFsaXNpbmcgY29tcG9uZW50IGRhdGEgc291cmNlXCIpOyAvLyB0aGlzLmRhdGFfc3JjID0gbmV3IERhdGFTb3VyY2UobGFiZWwsIHNvY2tldCwgdGhpcywgcHJveHkpO1xuXHQgICAgICB0aGlzLl9faW5pdERhdGFTcmNJbnRlcmZhY2UobGFiZWwsIHNvY2tldCk7XG5cdCAgICB9XG5cdFx0ZWxzZSB7XG5cdCAgICAgIC8vaGFwcGVucyB3aGVuIF9jbWRfZGF0YSBpcyBudWxsIG9yIGxhYmVsIGlzIG51bGxcblx0ICAgICAgdGhpcy5fbG9nKFwiaW1wOlwiLCBcImNvbXBvbmVudCBkYXRhIGlzIG51bGwsIGRpcmVjdGx5IHJlbmRlcmluZyB0aGUgY29tcG9uZW50LlwiKTtcblx0ICAgICAgdGhpcy5yZW5kZXIoKTtcblx0ICAgIH1cblx0fVxuXG5cdF9faW5pdERhdGFTcmNJbnRlcmZhY2UobGFiZWwsIHNvY2tldCkge1xuXHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0ICAgIHRoaXMuZGF0YV9zcmMgPSBEYXRhU291cmNlLmdldE9yQ3JlYXRlKGxhYmVsLCBzb2NrZXQsIHRoaXMpO1xuXG5cdCAgICBpZiAodGhpcy5kYXRhX3NyYykge1xuXHQgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2RhdGEnLCB7XG5cdCAgICAgICAgZ2V0OiAoKSA9PiB7XG5cdCAgICAgICAgICByZXR1cm4gdGhpcy5fcG9zdFByb2Nlc3NDbXBEYXRhLmNhbGwodGhpcywgdGhpcy5kYXRhX3NyYy5kYXRhKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXG5cdCAgICB0aGlzLmJyb2tlciA9IHRoaXMuZGF0YV9zcmMuZXZlbnRUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihsYWJlbCwgZXYgPT4ge1xuXHQgICAgICBfdGhpcy5fb25EYXRhU3JjVXBkYXRlLmNhbGwoX3RoaXMsIGV2KTtcblx0ICAgIH0pOyBcblx0XHQvLyB0aGlzLmJyb2tlciA9IFBvc3RPZmZpY2UuYWRkR2xvYmFsTGlzdGVuZXIobGFiZWwsIChfbXNnKT0+e1xuXHRcdC8vIFx0X3RoaXMuX29uRGF0YVNyY1VwZGF0ZS5jYWxsKF90aGlzLCBfbXNnKVxuXHRcdC8vIH0pO1xuXHR9XG5cblx0X2luaXRTdGF0ZVNwYWNlKCl7XG5cdFx0dGhpcy5zdGF0ZVNwYWNlID0gey4uLnRoaXMuZGVmYXVsdFN0YXRlU3BhY2UgLCAuLi50aGlzLnN0YXRlU3BhY2UgfVxuXHR9XG5cblx0YWRkSW50ZXJmYWNlKCkge1xuXG5cdH1cblxuXHRfaW5pdEludGVyZmFjZXMob3B0KSB7XG5cdFx0aWYoIXRoaXMuaW50ZXJmYWNlcyl7cmV0dXJuO31cblxuXHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0XHRmb3IodmFyIGtleSBpbiB0aGlzLmludGVyZmFjZXMpIHtcblx0XHRcdFBvc3RPZmZpY2UuYWRkR2xvYmFsTGlzdGVuZXIoYCR7dGhpcy51aWR9LSR7a2V5fWAsIChfbXNnKT0+e1xuXHRcdFx0XHR2YXIgcmVzcG9uc2UgPSBfdGhpcy5pbnRlcmZhY2VzW2tleV0oX21zZyk7XG5cdFx0XHRcdFBvc3RPZmZpY2UuYnJvYWRjYXN0TXNnKGAke19tc2cuc2VuZGVyfS0ke2tleX1gLCBuZXcgTXVmZmluLkNvbXBvbmVudE1zZyh7ZGF0YTogcmVzcG9uc2V9KSlcblx0XHRcdH0pO1xuXHRcdH1cblx0XHQvLyB2YXIgX3RoaXMgPSB0aGlzO1xuXHRcdC8vIHRoaXMuZGVmYXVsdExpZmVjeWNsZUludGVyZmFjZXMoKS5tYXAoKF9lbnRyeSk9Pntcblx0XHQvLyBcdFBvc3RPZmZpY2UuYWRkR2xvYmFsTGlzdGVuZXIoIF9lbnRyeS5sYWJlbCwgKGV2KT0+e1xuXHRcdC8vIFx0XHRfdGhpcy5faW5pdENvbXBvbmVudERhdGFTcmMuY2FsbChfdGhpcyk7XG5cdFx0Ly8gXHR9KTtcblx0XHQvLyB9KTtcblx0fVxuXG5cdF9pbml0VWlWYXJzKG9wdCkge1xuXHRcdC8vIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAndWlWYXJzJywge1xuXHQgLy8gICAgICAgIHNldDogKHZhbHVlKT0+e1xuXHQgLy8gICAgICAgIFx0dGhpc1sndWlWYXJzJ109dmFsdWU7XG5cdCAvLyAgICAgICAgXHR0aGlzLnJlbmRlcigpO1xuXHQgLy8gICAgICAgIH1cblx0IC8vICAgIH0pO1xuXHR9IFxuXG5cdF9nZXRSb3V0ZUNvbnRleHQoKSB7XG5cdFx0dmFyIGNsb3Nlc3RSb3V0ZSA9IHRoaXMuY2xvc2VzdChcIltyb3V0ZV1cIikgfHwgdGhpcy5fZ2V0RG9tTm9kZSgpLmNsb3Nlc3QoXCJbcm91dGVdXCIpO1xuXHRcdGlmKCFjbG9zZXN0Um91dGUpe3JldHVybiBmYWxzZTt9XG5cdFx0dmFyIHJvdXRlTmFtZSA9IGNsb3Nlc3RSb3V0ZS5nZXRBdHRyaWJ1dGUoXCJyb3V0ZVwiKTtcblx0XHRyZXR1cm4gdGhpcy5yb3V0ZXIuZ2V0Um91dGUocm91dGVOYW1lKTtcblx0fVxuXG5cdF9pbml0Um91dGVJbnRlcmZhY2Uob3B0KSB7IC8vdXBkYXRpb24gb2Ygcm91dGVWYXJzXG5cdFx0aWYoIXRoaXMucm91dGVyKXtyZXR1cm47fVxuXHRcdC8vIHZhciByb3V0ZUNvbnRleHQgPSB0aGlzLl9nZXRSb3V0ZUNvbnRleHQoKTtcblx0XHQvLyBpZighcm91dGVDb250ZXh0KXtyZXR1cm47fVxuXHRcdC8vIHZhciByb3V0ZVNvY2tldCA9IFBvc3RPZmZpY2Uuc29ja2V0c1tgJHtyb3V0ZUNvbnRleHQuc29ja2V0TmFtZX1gXTtcblx0XHQvLyBpZighcm91dGVTb2NrZXQpe3JldHVybjt9XG5cdFx0dmFyIF90aGlzID0gdGhpcztcblx0XHQvLyByb3V0ZVNvY2tldC5hZGRMaXN0ZW5lcihcIm9uQmVmb3JlTG9hZFwiLChldik9Pntcblx0XHQvLyBcdF90aGlzLnJvdXRlVmFycyA9IGV2LmRldGFpbDtcblx0XHQvLyBcdGlmKF90aGlzLm9uQmVmb3JlUm91dGVMb2FkKXtcblx0XHQvLyBcdFx0X3RoaXMub25CZWZvcmVSb3V0ZUxvYWQoKTtcblx0XHQvLyBcdH1cblx0XHQvLyB9KTtcblx0XHR0aGlzLnJvdXRlci5fc29ja2V0Lm9uKFwib25CZWZvcmVMb2FkXCIsKG1zZyk9PnsgLy90aGlzLnJvdXRlci5fc29ja2V0IC0gZW5hYmxlcyBwYXNzaW5nIHJvdXRlVmFycyB3aXRob3V0IHNwZWNpZnlpbmcgZWFjaCByb3V0ZSBsZXZlbCBjb25maWcgKHNvY2tldE5hbWUpICBcblx0XHRcdF90aGlzLnJvdXRlVmFycyA9IG1zZztcdC8vYWxsIHJvdXRlcyB3aXRoIHRoaXMgcm91dGVyIHdpbGwgZ2V0IHRoaXMgcm91dGVWYXJzIHVubGlrZSB0aGUgY29tbWVudGVkIGFwcHJvYWNoIGFib3ZlLlxuXHRcdFx0aWYoX3RoaXMub25CZWZvcmVSb3V0ZUxvYWQpe1xuXHRcdFx0XHRfdGhpcy5vbkJlZm9yZVJvdXRlTG9hZCgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0X2luaXRMaWZlY3ljbGUob3B0KSB7XG5cdFx0dGhpcy5faW5pdFVpVmFycyhvcHQpO1xuXG5cdFx0dGhpcy5faW5pdEludGVyZmFjZXMob3B0KTtcblxuXHRcdHRoaXMuX2luaXRDb21wb25lbnREYXRhU3JjKG9wdCk7XG5cblx0XHR0aGlzLl9pbml0Um91dGVJbnRlcmZhY2Uob3B0KTtcblx0fVxuXG5cdF9wb3N0UHJvY2Vzc0NtcERhdGEobmV3RGF0YSkge1xuXHRcdC8vIGNvbnNvbGUuZ3JvdXAodGhpcy5fbG9nUHJlZml4K1wicG9zdFByb2Nlc3NEYXRhXCIpO1xuXHRcdHRoaXMuX2xvZyhcImltcDpcIixcIlBvc3QtUHJvY2Vzc2luZyBjbXAgZGF0YSAobGFiZWwgPSBcIiArIHRoaXMuZGF0YV9zcmMubGFiZWwgKyBcIiksIGRhdGEgPSBcIik7XG5cdFx0Y29uc29sZS5kaXIobmV3RGF0YSk7XG5cdFx0aWYodGhpcy5wcm9jZXNzRGF0YSl7ICAgLy9wcm9jZXNzRGF0YSBjYW4gYmUgZGVmaW5lZCB3aGVuIGNyZWF0aW5nIGNvbXBvbmVudHMgKHNlZSBpbnZlbnRvcnlfYmxvY2suanMgLSBNZWRpY2luZVRodW1ibmFpbExpc3QpXG5cdFx0XHR0cnl7XG5cdFx0XHRcdHRoaXMuX3Byb2Nlc3NlZERhdGEgPSB0aGlzLnByb2Nlc3NEYXRhLmNhbGwodGhpcywgbmV3RGF0YSk7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9wcm9jZXNzZWREYXRhO1xuXHRcdFx0fWNhdGNoKGUpe1xuXHRcdFx0XHR0aGlzLl9sb2coXCJpbXA6XCIsXCJjb3VsZCBub3QgcG9zdCBwcm9jZXNzIENNUCBkYXRhIC0gXCIsIGUsIFwiZGF0YSA9IFwiLCBKU09OLnN0cmluZ2lmeShuZXdEYXRhKSwgXCIgJiBzY2hlbWEgPSBcIiwgSlNPTi5zdHJpbmdpZnkodGhpcy5zY2hlbWEpLCBcIiAmIHRoaXMuZGF0YV9zcmMuZGF0YSA9IFwiLCBKU09OLnN0cmluZ2lmeSh0aGlzLmRhdGFfc3JjLmRhdGEpKTtcblx0XHRcdFx0cmV0dXJuIG5ld0RhdGE7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBuZXdEYXRhO1xuXHRcdC8vIGNvbnNvbGUuZ3JvdXBFbmQoKTtcblx0fVxuXG5cdF9fcHJvY2Vzc1N0eWxlTWFya3VwKCkge1xuXHRcdGlmKCF0aGlzLnN0eWxlTWFya3VwKXtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Ly8gaWYodGhpcy5fcmVuZGVyZWRTdHlsZSl7cmV0dXJuO31cblxuXHQgICAgdHJ5e1xuXHQgICAgXHR2YXIgX3JlbmRlcmVkU3R5bGVTdHJpbmcgPSB0aGlzLnN0eWxlTWFya3VwKGBbZGF0YS1jb21wb25lbnQ9JHt0aGlzLnVpZH1dYCx0aGlzLmN1cnJlbnRfc3RhdGUpOyAgLy9jYWxsZWQgb25seSBvbmNlXG5cdCAgICBcdHRoaXMuX3JlbmRlcmVkU3R5bGUgPSBzdHJpbmdUb0hUTUxGcmFnKF9yZW5kZXJlZFN0eWxlU3RyaW5nKTtcblx0ICAgIH1jYXRjaChlKXtcblx0ICAgICAgdGhpcy5fbG9nKFwiaW1wOlwiLCBcImVycm9yIGluIHJlbmRlcmluZyBzdHlsZSAtIFwiLCBlKTtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXG5cdCAgICB0aGlzLl9yZW5kZXJlZEZyYWcuZmlyc3RFbGVtZW50Q2hpbGQucHJlcGVuZCh0aGlzLl9yZW5kZXJlZFN0eWxlKTtcblx0fVxuXG5cdF9fcHJvY2Vzc1JlbmRlcmVkRnJhZ0V2ZW50TGlzdGVuZXJzICgpIHtcblx0XHR2YXIgX3RoaXMgPSB0aGlzO1xuXHRcdHRoaXMuX2V2ZW50cyA9IHtcblx0XHRcdFwib25jaGFuZ2VcIjogW10sXG5cdFx0XHRcIm9uY2xpY2tcIjogW10sXG5cdFx0XHRcIm9uaW5wdXRcIjogW10sXG5cdFx0XHRcIm9uc2Nyb2xsXCI6IFtdLFxuXHRcdFx0XCJvbmtleXVwXCI6IFtdLFxuXHRcdFx0XCJvbmxvYWRcIjogW10sXG5cdFx0XHRcImNvbnRleHRtZW51XCI6IFtdXG5cdFx0fTtcblxuXHRcdHRoaXMuX3JlbmRlcmVkRnJhZy5xdWVyeVNlbGVjdG9yQWxsKFwiW29uLWNoYW5nZV1cIikuZm9yRWFjaCgoX2VsKT0+e1xuXHRcdFx0X2VsLm9uY2hhbmdlID0gZnVuY3Rpb24oZXYpIHtcblx0XHRcdFx0Ly8gX2VsLmF0dHJpYnV0ZXNbXCJvbi1jaGFuZ2VcIl0udmFsdWUuY2FsbChfdGhpcyk7XG5cdFx0XHRcdF90aGlzW19lbC5hdHRyaWJ1dGVzW1wib24tY2hhbmdlXCJdLnZhbHVlXS5jYWxsKF90aGlzLCBfZWwsIGV2KTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2V2ZW50cy5vbmNoYW5nZS5wdXNoKF9lbC5hdHRyaWJ1dGVzW1wib24tY2hhbmdlXCJdKTtcblx0XHR9KTtcblx0XHR0aGlzLl9yZW5kZXJlZEZyYWcucXVlcnlTZWxlY3RvckFsbChcIltvbi1pbnB1dF1cIikuZm9yRWFjaCgoX2VsKT0+e1xuXHRcdFx0X2VsLm9uaW5wdXQgPSBmdW5jdGlvbihldikge1xuXHRcdFx0XHRfdGhpc1tfZWwuYXR0cmlidXRlc1tcIm9uLWlucHV0XCJdLnZhbHVlXS5jYWxsKF90aGlzLCBfZWwsIGV2KTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2V2ZW50cy5vbmlucHV0LnB1c2goX2VsLmF0dHJpYnV0ZXNbXCJvbi1pbnB1dFwiXSk7XG5cdFx0fSk7XG5cdFx0dGhpcy5fcmVuZGVyZWRGcmFnLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbb24tY2xpY2tdXCIpLmZvckVhY2goKF9lbCk9Pntcblx0XHRcdF9lbC5vbmNsaWNrID0gZnVuY3Rpb24oZXYpIHtcblx0XHRcdFx0X3RoaXNbX2VsLmF0dHJpYnV0ZXNbXCJvbi1jbGlja1wiXS52YWx1ZV0uY2FsbChfdGhpcywgX2VsLCBldik7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9ldmVudHMub25jbGljay5wdXNoKF9lbC5hdHRyaWJ1dGVzW1wib24tY2xpY2tcIl0pO1xuXHRcdH0pO1xuXHRcdHRoaXMuX3JlbmRlcmVkRnJhZy5xdWVyeVNlbGVjdG9yQWxsKFwiW29uLXNjcm9sbF1cIikuZm9yRWFjaCgoX2VsKT0+e1xuXHRcdFx0X2VsLm9uc2Nyb2xsID0gZnVuY3Rpb24oZXYpIHtcblx0XHRcdFx0X3RoaXNbX2VsLmF0dHJpYnV0ZXNbXCJvbi1zY3JvbGxcIl0udmFsdWVdLmNhbGwoX3RoaXMsIF9lbCwgZXYpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fZXZlbnRzLm9uc2Nyb2xsLnB1c2goX2VsLmF0dHJpYnV0ZXNbXCJvbi1zY3JvbGxcIl0pO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy5fcmVuZGVyZWRGcmFnLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbb24ta2V5dXBdXCIpLmZvckVhY2goKF9lbCk9Pntcblx0XHRcdF9lbC5vbmtleXVwID0gZnVuY3Rpb24oZXYpIHtcblx0XHRcdFx0X3RoaXNbX2VsLmF0dHJpYnV0ZXNbXCJvbi1rZXl1cFwiXS52YWx1ZV0uY2FsbChfdGhpcywgX2VsLCBldik7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9ldmVudHMub25rZXl1cC5wdXNoKF9lbC5hdHRyaWJ1dGVzW1wib24ta2V5dXBcIl0pO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMuX3JlbmRlcmVkRnJhZy5xdWVyeVNlbGVjdG9yQWxsKFwiW29uLWxvYWRdXCIpLmZvckVhY2goKF9lbCk9Pntcblx0XHRcdF9lbC5vbmxvYWQgPSBmdW5jdGlvbihldikge1xuXHRcdFx0XHRfdGhpc1tfZWwuYXR0cmlidXRlc1tcIm9uLWxvYWRcIl0udmFsdWVdLmNhbGwoX3RoaXMsIF9lbCwgZXYpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fZXZlbnRzLm9ubG9hZC5wdXNoKF9lbC5hdHRyaWJ1dGVzW1wib24tbG9hZFwiXSk7XG5cdFx0fSk7XG5cblx0XHR0aGlzLl9yZW5kZXJlZEZyYWcucXVlcnlTZWxlY3RvckFsbChcIltvbi1jb250ZXh0bWVudV1cIikuZm9yRWFjaCgoX2VsKT0+e1xuXHRcdFx0X2VsLm9uY29udGV4dG1lbnUgPSBmdW5jdGlvbihldikge1xuXHRcdFx0XHRldi5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRfdGhpc1tfZWwuYXR0cmlidXRlc1tcIm9uLWNvbnRleHRtZW51XCJdLnZhbHVlXS5jYWxsKF90aGlzLCBfZWwsIGV2KTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2V2ZW50cy5jb250ZXh0bWVudS5wdXNoKF9lbC5hdHRyaWJ1dGVzW1wib24tY29udGV4dG1lbnVcIl0pO1xuXHRcdH0pO1xuXHR9XG5cblx0X2dldENoaWxkQ21wcygpIHtcblx0ICAgIHZhciBjbXBfZG9tX25vZGUgPSB0aGlzLl9nZXREb21Ob2RlKCk7XG5cdCAgICBpZighY21wX2RvbV9ub2RlKXsgcmV0dXJuIFtdOyB9XG5cdCAgICByZXR1cm4gQXJyYXkuZnJvbShjbXBfZG9tX25vZGUucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtY29tcG9uZW50XScpKTsgXG5cdH1cblxuICBcdF9wcm9jZXNzQ2hpbGRDbXBzKCkge1xuXHQgICAgdmFyIF90aGlzID0gdGhpcztcblx0ICAgIHZhciBjaGlsZENtcHNJbkRPTSA9IF90aGlzLl9nZXRDaGlsZENtcHMoKTtcblx0ICAgIGlmKGNoaWxkQ21wc0luRE9NLmxlbmd0aD09MCl7cmV0dXJuO31cblxuXHQgICAgdGhpcy5fbG9nKFwiaW1wOlwiLCBcIlBST0NFU1NJTkcgQ0hJTEQgQ01QU1wiKTtcblx0ICAgIHZhciBjbXBTZWxlY3RvciA9IERPTUNvbXBvbmVudFJlZ2lzdHJ5Lmxpc3QoKS5tYXAoKF9lbnRyeSk9PntyZXR1cm4gX2VudHJ5Lm5hbWV9KS5qb2luKFwiLFwiKTtcblx0ICAgIHZhciBjaGlsZENtcHNJblJlbmRlcmVkRnJhZyA9IF90aGlzLl9yZW5kZXJlZEZyYWcucXVlcnlTZWxlY3RvckFsbChjbXBTZWxlY3Rvcik7XG5cblxuXHQgICAgY2hpbGRDbXBzSW5SZW5kZXJlZEZyYWcuZm9yRWFjaCgoX2NoaWxkQ21wSW5GcmFnLCBmcmFnQ21wSWR4KT0+e1xuXHQgICAgICB2YXIgX2NoaWxkQ21wSW5Eb20gPSBjaGlsZENtcHNJbkRPTS5maW5kKChfY21wLCBkb21DbXBJZHgpPT57XG5cdCAgICAgICAgcmV0dXJuIF9jbXAuY29uc3RydWN0ZWRGcm9tLmRvbUVsTmFtZSA9PSBfY2hpbGRDbXBJbkZyYWcudGFnTmFtZS50b0xvd2VyQ2FzZSgpXG5cdCAgICAgIH0pO1xuXHQgICAgICBpZihfY2hpbGRDbXBJbkRvbSl7XG5cdCAgICAgICAgX2NoaWxkQ21wSW5GcmFnLnJlcGxhY2VXaXRoKF9jaGlsZENtcEluRG9tKTtcblx0ICAgICAgICAvLyBfY2hpbGRDbXBJbkRvbS5yZW5kZXIoKTtcblx0ICAgICAgfVxuXHQgICAgICAvLyBjaGlsZENtcHNJbkRPTS5zcGxpY2UoZG9tQ21wSWR4LCAxKTtcblx0ICAgICAgLy8gY2hpbGRDbXBzSW5ET00uc2hpZnQoKTtcblx0ICAgIH0pO1xuXG5cdCAgICAvLyBjaGlsZENtcHNJbkRPTS5mb3JFYWNoKChfY2hpbGRDbXAsIGlkeCk9PnsgLy93b3VsZCBub3Qgd29yayBpZiAyIGNoaWxkIGVsZW1lbnRzIG9mIHRoZSBzYW1lIHR5cGVcblx0ICAgIC8vICAgdHJ5e1xuXHQgICAgLy8gICAgIF90aGlzLl9yZW5kZXJlZEZyYWcucXVlcnlTZWxlY3RvcihfY2hpbGRDbXAuZGF0YXNldC5jbXBuYW1lKS5yZXBsYWNlV2l0aChfY2hpbGRDbXApO1xuXHQgICAgLy8gICB9Y2F0Y2goZSl7fVxuXHQgICAgLy8gfSlcbiAgXHR9XG5cbiAgXHQvLyBhZHZlcnRpc2VJbnRlcmZhY2UoKSB7XG4gIFx0Ly8gXHR0aGlzLmFkdmVydGlzZWRJbnRlcmZhY2UgPSBQb3N0T2ZmaWNlLmdldE9yQ3JlYXRlSW50ZXJmYWNlKHRoaXMuYWQsIHRoaXMuY29uc3RydWN0b3IuaW50ZXJmYWNlU3BlY3MpO1xuICBcdC8vIH1cblxuICBcdHN3aXRjaFN0YXRlKHN0YXRlTmFtZSkge1xuICAgICAgICB2YXIgdGFyZ2V0U3RhdGUgPSB0aGlzLnN0YXRlU3BhY2Vbc3RhdGVOYW1lXTtcbiAgICAgICAgaWYgKCF0YXJnZXRTdGF0ZSkgeyByZXR1cm47IH1cbiAgICAgICAgdmFyIHByZXZTdGF0ZU5hbWUgPSB0aGlzLmN1cnJlbnRfc3RhdGU7XG5cbiAgICAgICAgaWYoIHRhcmdldFN0YXRlLmFwcmlvcmkuaW5jbHVkZXMocHJldlN0YXRlTmFtZSkgKXsgLy9vbmx5IHRoZXNlIHRyYW5zaXRpb25zIGFyZSBhbGxvd2VkLiB0aGlzIGlzIHRvIGVuc3VyZSByZWxpYWJpbGl0eSBvZiBiZWh2aW91cnMuXG4gICAgICAgIFx0dmFyIHRyYW5zaXRpb24gPSB0aGlzLnRyYW5zaXRpb25TcGFjZVtgJHtwcmV2U3RhdGVOYW1lfSA8dG8+ICR7c3RhdGVOYW1lfWBdO1xuXHQgICAgICAgIGlmKHRyYW5zaXRpb24pe1xuXHQgICAgICAgIFx0dHJ5e1xuXHQgICAgICAgIFx0XHR0cmFuc2l0aW9uLmNhbGwodGhpcyk7XG5cdCAgICAgICAgXHRcdHRoaXMuX2xvZyhcImltcDpcIiwgXCJUcmFuc2l0aW9uIGZpcmVkIC0gXCIsIGAke3ByZXZTdGF0ZU5hbWV9IDx0bz4gJHtzdGF0ZU5hbWV9YCk7XG5cdCAgICAgICAgXHRcdC8vaWYgdHJhbnNpdGlvbiBpcyBzdWNjZXNzZnVsIChkb2Vzbid0IHRocm93IGFueSBlcnJvcikgLS0+XG5cdCAgICAgICAgXHRcdHRoaXMuY3VycmVudF9zdGF0ZSA9IHN0YXRlTmFtZTtcbiAgICAgICAgXHRcdFx0dGhpcy51aVZhcnMuc3RhdGUgPSB7IG5hbWU6IHN0YXRlTmFtZSwgbWV0YTogdGFyZ2V0U3RhdGV9O1xuXHQgICAgICAgIFx0XHR0aGlzLnJlbmRlcigpO1xuXHQgICAgICAgIFx0fWNhdGNoKGUpe1xuXHQgICAgICAgIFx0XHRjb25zb2xlLmVycm9yKFwiVHJhbnNpdGlvbiBlcnJvciAtIFwiLCBlKTtcblx0ICAgICAgICBcdH1cblx0ICAgICAgICB9ZWxzZXtcblx0ICAgICAgICBcdHRoaXMuY3VycmVudF9zdGF0ZSA9IHN0YXRlTmFtZTtcbiAgICAgICAgXHRcdHRoaXMudWlWYXJzLnN0YXRlID0geyBuYW1lOiBzdGF0ZU5hbWUsIG1ldGE6IHRhcmdldFN0YXRlfTtcbiAgICAgICAgXHRcdHRoaXMucmVuZGVyKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuaW50ZXJmYWNlLmRpc3BhdGNoTWVzc2FnZShcInN0YXRlLWNoYW5nZVwiLHtcblx0ICAgICAgICBcdHVpVmFyczogdGhpcy51aVZhcnMsIFxuXHQgICAgICAgIFx0ZGF0YTogdGhpcy5kYXRhXG5cdCAgICAgICAgfSlcblx0ICAgICAgICB0aGlzLl9sb2coXCJpbXA6XCIsIFwiU3dpdGNoZWQgU3RhdGUgVG8gLSBcIiwgdGhpcy5jdXJyZW50X3N0YXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRfc3RhdGU7XG4gICAgICAgIC8vIHRoaXMuX3VwZGF0ZURvbU5vZGVTdGF0ZSgpO1xuICAgICAgICAvLyBpZihzdGF0ZS5pbmZvcm1QYXJlbnQpe1xuICAgICAgICAvLyAgICAgdGhpcy5fYnJvYWRDYXN0VG9QYXJlbnQodGhpcy51aVZhcnMuY3VycmVudF9zdGF0ZSk7XG4gICAgICAgIC8vIH1cbiAgICB9XG5cbiAgICBzd2l0Y2hUb0lkbGVTdGF0ZSh7c3RhdGVOYW1lID0gXCJpZGxlXCJ9ID0ge30pIHtcbiAgICBcdHZhciB0YXJnZXRTdGF0ZSA9IHRoaXMuc3RhdGVTcGFjZVtzdGF0ZU5hbWVdO1xuICAgICAgICBpZiAoIXRhcmdldFN0YXRlKSB7IHJldHVybjsgfVxuICAgICAgICB0aGlzLmN1cnJlbnRfc3RhdGUgPSBzdGF0ZU5hbWU7XG4gICAgICAgIHRoaXMudWlWYXJzLnN0YXRlID0geyBuYW1lOiBzdGF0ZU5hbWUsIG1ldGE6IHRhcmdldFN0YXRlfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudF9zdGF0ZTtcbiAgICB9XG5cbiAgICBfX3Byb2Nlc3NSb290TWFya3VwKCkge1xuICAgIFx0dGhpcy5fcmVuZGVyZWRGcmFnLmZpcnN0RWxlbWVudENoaWxkLmRhdGFzZXQuY29tcG9uZW50ID0gdGhpcy51aWQ7XG4gICAgXHQvLyB0aGlzLmRhdGFzZXQudWlkID0gdGhpcy51aWQ7XG5cdCAgICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuX3JlbmRlcmVkRnJhZy5maXJzdEVsZW1lbnRDaGlsZCwgXCJjb25zdHJ1Y3RlZEZyb21cIiwge3ZhbHVlOiB0aGlzfSk7XG5cdCAgICAvLyB0aGlzLl9yZW5kZXJlZEZyYWcucXVlcnlTZWxlY3RvckFsbCgnW3VpVmFyXScpLmZvckVhY2goKHVpVmFyRWwsIGlkeCk9Pntcblx0ICAgIC8vIFx0dWlWYXJFbC5kYXRhc2V0LnVpZCA9IGAke3RoaXMudWlkfS11aVZhci0ke2lkeH1gOyBcblx0ICAgIC8vIH0pO1xuICAgIH1cblxuICAgIF9fcHJvY2Vzc0NvbmRpdGlvbmFsTWFya3VwKF9lbCkgeyAvL3RvIGJlIG9wdGltaXNlZCBsYXRlclxuXHQgIFx0aWYoIV9lbCl7XG5cdCAgXHRcdHRoaXMuX3JlbmRlcmVkRnJhZy5xdWVyeVNlbGVjdG9yQWxsKFwiW3JlbmRlci1pZl1cIikuZm9yRWFjaCgoX2VsKT0+e1xuXHRcdCAgXHRcdGlmKCFldmFsKF9lbC5nZXRBdHRyaWJ1dGUoXCJyZW5kZXItaWZcIikpKXtcblx0XHQgIFx0XHRcdF9lbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cdFx0ICBcdFx0fVxuXHRcdCAgXHR9KTtcblx0ICBcdH1cblx0ICBcdGVsc2V7XG5cdCAgXHRcdC8vIGNvbnNvbGUubG9nKFwiaW1wOlwiLFwiY29uZGl0aW9uYWwgbWFya3VwIG9mIC0gXCIsICBfZWwsIFwiIDo6Ojo9PT09Ojo6OiBcIiwgZXZhbChfZWwuZ2V0QXR0cmlidXRlKFwicmVuZGVyLWlmXCIpKSk7XG5cdCAgICBcdGlmICghZXZhbChfZWwuZ2V0QXR0cmlidXRlKFwicmVuZGVyLWlmXCIpKSkge1xuXHQgICAgICAgIFx0X2VsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblx0ICAgICAgXHR9ZWxzZXtcblx0ICAgICAgXHRcdF9lbC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXHQgICAgICBcdH1cblx0ICAgIH1cblx0fVxuXG5cdF9faXNET01UcmVlRXF1YWwobm9kZTEsIG5vZGUyKSB7IC8vbGlnaHQgY2hlY2sgLSBvbmx5IDFzdCBkZXB0aFxuXG5cdCAgXHRpZihub2RlMS5jaGlsZEVsZW1lbnRDb3VudCAhPSBub2RlMi5jaGlsZEVsZW1lbnRDb3VudCkge1xuXHQgIFx0XHRyZXR1cm4gZmFsc2U7XG5cdCAgXHR9XG5cblx0ICBcdHZhciBpc0VxdWFsID0gdHJ1ZTtcblx0ICBcdGZvcih2YXIgaWR4IGluIEFycmF5LmZyb20obm9kZTEuY2hpbGRyZW4pKXtcblx0ICBcdFx0Ly8gaWYobm9kZTEuY29uc3RydWN0ZWRGcm9tLmRlYnVnUGF0Y2hEb20pe1xuXHQgIFx0XHQvLyBcdGNvbnNvbGUubG9nKFwiaW1wOlwiLCBcImNoZWNraW5nIGNoaWxkcmVuIF9faXNET01UcmVlSW5lcXVhbCBiZXR3ZWVuIC0gXCIsIG5vZGUxLmNoaWxkcmVuW2lkeF0sIFwiICYgXCIsIG5vZGUyLmNoaWxkcmVuW2lkeF0pO1xuXHQgIFx0XHQvLyB9XG5cdCAgXHRcdHZhciBjaGlsZE5vZGUxID0gbm9kZTEuY2hpbGRyZW5baWR4XTtcblx0ICBcdFx0dmFyIGNoaWxkTm9kZTIgPSBub2RlMi5jaGlsZHJlbltpZHhdO1xuXHQgIFx0XHRpZihjaGlsZE5vZGUxLmNvbnN0cnVjdGVkRnJvbSB8fCBjaGlsZE5vZGUyLmNvbnN0cnVjdGVkRnJvbSl7XG5cdCAgXHRcdFx0Y29udGludWU7XG5cdCAgXHRcdH1cblx0ICBcdFx0aWYoY2hpbGROb2RlMS5jaGlsZEVsZW1lbnRDb3VudCAhPSBjaGlsZE5vZGUyLmNoaWxkRWxlbWVudENvdW50KXtcblx0ICBcdFx0XHRpc0VxdWFsID0gZmFsc2U7XG5cdCAgXHRcdFx0YnJlYWs7XG5cdCAgXHRcdH1cblx0ICBcdH1cblx0ICBcdHJldHVybiBpc0VxdWFsO1xuXHQgIH1cblxuXG5cdF9fcGF0Y2hVbmVxdWFsQXR0cmlidXRlcyhub2RlMSwgbm9kZTIpIHtcblx0ICAgIGlmIChub2RlMS5hdHRyaWJ1dGVzID09IG5vZGUyLmF0dHJpYnV0ZXMpIHtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHQgICAgdmFyIGlnbm9yZUF0dHJpYnV0ZUxpc3QgPSBbXTtcblx0ICAgIEFycmF5LmZyb20obm9kZTEuYXR0cmlidXRlcykuZm9yRWFjaChfbm9kZTFBdHRyID0+IHtcblx0ICAgICAgaWYgKGlnbm9yZUF0dHJpYnV0ZUxpc3QuaW5jbHVkZXMoX25vZGUxQXR0ci5uYW1lKSkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmICghbm9kZTIuYXR0cmlidXRlc1tfbm9kZTFBdHRyLm5hbWVdKSB7XG5cdCAgICAgICAgLy9hdHRyaWJ1dGUgaXMgbm90IHByZXNlbnQgaW4gbm9kZTJcblx0ICAgICAgICBub2RlMi5zZXRBdHRyaWJ1dGUoX25vZGUxQXR0ci5uYW1lLCBfbm9kZTFBdHRyLnZhbHVlKTtcblx0ICAgICAgfSBlbHNlIGlmIChub2RlMi5nZXRBdHRyaWJ1dGUoX25vZGUxQXR0ci5uYW1lKSAhPSBfbm9kZTFBdHRyLnZhbHVlKSB7XG5cdCAgICAgICAgLy9hdHRyaWJ1dGUgdmFsdWUgaXMgZGlmZmVyZW50IGluIG5vZGUyXG5cdCAgICAgICBcdC8vIGNvbnNvbGUuZGVidWcoXCJwYXRjaGluZyBhdHRyaWJ1dGUgLSBcIiwgX25vZGUxQXR0ci5uYW1lLCBgOiAob2xkIHZhbHVlID0gJHtub2RlMi5hdHRyaWJ1dGVzW19ub2RlMUF0dHIubmFtZV0udmFsdWV9LCBuZXcgdmFsdWUgPSAke19ub2RlMUF0dHIudmFsdWV9KWApO1xuXHQgICAgICAgIG5vZGUyLnNldEF0dHJpYnV0ZShfbm9kZTFBdHRyLm5hbWUsIF9ub2RlMUF0dHIudmFsdWUpO1xuXHQgICAgICAgIC8vIG5vZGUyLmF0dHJpYnV0ZXNbX25vZGUxQXR0ci5uYW1lXSA9IF9ub2RlMUF0dHIudmFsdWU7XG5cdCAgICAgIH0gLy9pZiBhdHRyaWJ1dGUgcHJlc2VudCAmJiB2YWx1ZSBpcyBzYW1lIC0tPiBkbyBubyBwYXRjaGluZ1xuXG5cdCAgICB9KTtcblx0ICB9XG5cblx0YXN5bmMgX19maW5kQW5kUmVwbGFjZVVuZXF1YWxOb2RlcyAocm9vdDEsIHJvb3QyKSB7IC8vbm90IHVzZWQgY3VycmVudGx5XG4gIFx0XHR2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiaW1wOlwiLCBcInBhdGNoRG9tOiBjb21wYXJpbmcgbm9kZXMgLSBcIiwgcm9vdDEsIHJvb3QyKTtcblxuICAgICAgICBpZihyb290Mi5oYXNBdHRyaWJ1dGUoXCJyZW5kZXItaWZcIikpe1xuICAgICAgICBcdHRoaXMuX19wcm9jZXNzQ29uZGl0aW9uYWxNYXJrdXAocm9vdDIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmKHJvb3QyLmNvbnN0cnVjdGVkRnJvbSAmJiByb290Mi5jb25zdHJ1Y3RlZEZyb20uZG9tRWxOYW1lICE9IHRoaXMuZG9tRWxOYW1lKXtcbiAgICAgICAgLy8gXHRyZXR1cm47XG4gICAgICAgIC8vIH1cblxuICAgICAgICB0aGlzLl9fcGF0Y2hVbmVxdWFsQXR0cmlidXRlcyhyb290MSwgcm9vdDIpO1xuXG4gICAgICAgIGlmICgocm9vdDEuY2hpbGRyZW4ubGVuZ3RoID09IDAgfHwgcm9vdDIuY2hpbGRyZW4ubGVuZ3RoID09IDApKSB7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXCJpbXA6XCIsIFwicGF0Y2hEb206IHJlcGxhY2luZyBub2RlIC0gXCIsIHJvb3QyLCBcIiB3aXRoIFwiLCByb290MSk7XG4gICAgICAgICAgcm9vdDIucmVwbGFjZVdpdGgocm9vdDEpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIEFycmF5LmZyb20ocm9vdDEuY2hpbGRyZW4pLmZvckVhY2goKF9yb290MUNoaWxkTm9kZSwgaWR4KSA9PiB7XG4gICAgICAgICAgXHR2YXIgX3Jvb3QyQ2hpbGROb2RlID0gcm9vdDIuY2hpbGRyZW5baWR4XTtcblxuICAgICAgICAgIFx0aWYgKF9yb290MUNoaWxkTm9kZS5pc0VxdWFsTm9kZShfcm9vdDJDaGlsZE5vZGUpKSB7XG4gICAgICAgICAgICBcdHJldHVybjsgLy9kb24ndCByZW5kZXIgaW4gdGhpcyBjYXNlXG4gICAgICAgICAgXHR9XG4gICAgICAgICAgXHRpZihfcm9vdDJDaGlsZE5vZGUuYXR0cmlidXRlcy5yZW5kZXJvbmx5b25jZSl7XG4gICAgICAgICAgXHRcdHJldHVybjtcbiAgICAgICAgICBcdH1cbiAgICAgICAgICBcdGlmIChfcm9vdDJDaGlsZE5vZGUuaGFzT3duUHJvcGVydHkoXCJjb25zdHJ1Y3RlZEZyb21cIikpIHtcblx0XHQgICAgICBcdGlmKF9yb290MUNoaWxkTm9kZS5hdHRyaWJ1dGVzLnZvbGF0aWxlKXtcblx0XHQgICAgICBcdFx0X3Jvb3QyQ2hpbGROb2RlLnJlcGxhY2VXaXRoKF9yb290MUNoaWxkTm9kZSk7XG5cdFx0ICAgICAgXHR9XG5cdFx0ICAgICAgXHRyZXR1cm47XG5cdFx0ICAgIH0gXG4gICAgICAgICAgXHQvLyBfdGhpcy5fX2ZpbmRBbmRSZXBsYWNlVW5lcXVhbE5vZGVzKF9yb290MUNoaWxkTm9kZSwgX3Jvb3QyQ2hpbGROb2RlKTtcblxuICAgXHRcdFx0aWYoIXRoaXMuX19pc0RPTVRyZWVFcXVhbChfcm9vdDFDaGlsZE5vZGUsIF9yb290MkNoaWxkTm9kZSkpIHtcblx0XHRcdFx0X3Jvb3QyQ2hpbGROb2RlLnJlcGxhY2VXaXRoKF9yb290MUNoaWxkTm9kZSk7XG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0X3RoaXMuX19maW5kQW5kUmVwbGFjZVVuZXF1YWxOb2Rlcyhfcm9vdDFDaGlsZE5vZGUsIF9yb290MkNoaWxkTm9kZSk7XG5cdFx0XHR9XG4gICAgICAgICAgXHQvLyBpZihfcm9vdDJDaGlsZE5vZGUuaGFzT3duUHJvcGVydHkoXCJjb25zdHJ1Y3RlZEZyb21cIikpe3JldHVybjt9XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgX19wYXRjaFJvb3ROb2RlQXR0cnMocm9vdE5vZGUpIHtcbiAgICAgICAgcm9vdE5vZGUuZGF0YXNldC5zdGF0ZSA9IHRoaXMuY3VycmVudF9zdGF0ZTtcblx0ICB9XG5cblx0X19wYXRjaFN0eWxlKHJvb3ROb2RlKSB7XG5cdCAgXHR2YXIgX2luZG9tU3R5bGUgPSByb290Tm9kZS5xdWVyeVNlbGVjdG9yKCdzdHlsZScpO1xuXG4gICAgICAgIHZhciBfcmVuZGVyZWRTdHlsZSA9IHRoaXMuX3JlbmRlcmVkRnJhZy5xdWVyeVNlbGVjdG9yKCdzdHlsZScpO1xuXG4gICAgICAgIGlmIChfcmVuZGVyZWRTdHlsZSAmJiAhX2luZG9tU3R5bGUuaXNFcXVhbE5vZGUoX3JlbmRlcmVkU3R5bGUpKSB7XG4gICAgICAgICAgX2luZG9tU3R5bGUucmVwbGFjZVdpdGgoX3JlbmRlcmVkU3R5bGUpO1xuICAgICAgICB9XG5cdH1cblxuXHRfX3BhdGNoRE9NQ29tcGxldGVseShjbXBfZG9tX25vZGUpIHtcblx0XHR0aGlzLl9fcHJvY2Vzc0NvbmRpdGlvbmFsTWFya3VwKCk7XG5cdCAgICBjbXBfZG9tX25vZGUucmVwbGFjZVdpdGgodGhpcy5fcmVuZGVyZWRGcmFnKTtcblx0fVxuXG4gICAgX19wYXRjaERPTSgpIHtcbiAgICBcdGlmKHRoaXMuYXR0cmlidXRlcy5zdG9wKXtcblx0ICAgICAgRGVmYXVsdENvbmZpZy5ERUJVR19TQ09QRS5zdG9wcGVkQ21wID0gdGhpcztcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXG5cdCAgICB2YXIgaW5fZG9tID0gdGhpcy5fZ2V0RG9tTm9kZSgpO1xuICAgIFx0dmFyIGNtcF9kb21fbm9kZSA9IGluX2RvbSB8fCB0aGlzO1xuXG4gICAgXHR0cnkge1xuICAgIFx0XHR2YXIgX3JlbmRlcmVkRnJhZ1Jvb3ROb2RlID0gdGhpcy5fcmVuZGVyZWRGcmFnLmZpcnN0RWxlbWVudENoaWxkOyBcblxuXHQgICAgICAgIGlmKGNtcF9kb21fbm9kZS5pc0VxdWFsTm9kZShfcmVuZGVyZWRGcmFnUm9vdE5vZGUpKXtcblx0ICAgICAgICBcdHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYoaW5fZG9tKXtcblx0ICAgICAgICBcdHRoaXMuX19wYXRjaFJvb3ROb2RlQXR0cnMoY21wX2RvbV9ub2RlKTtcblx0ICAgICAgICBcdGlmKGNtcF9kb21fbm9kZS5hdHRyaWJ1dGVzLnJlbmRlcm9ubHlvbmNlKXtcblx0ICAgICAgICBcdFx0dGhpcy5fX3BhdGNoU3R5bGUoY21wX2RvbV9ub2RlKTtcblx0XHQgICAgICBcdFx0Y29uc29sZS5sb2coXCJpbXA6XCIsIFwiTm90IHBhdGNoaW5nIGRvbSAtIGFzIHJlbmRlcm9ubHlvbmNlIGRlY2xhcmVkIGluIHJvb3ROb2RlXCIpO1xuXHRcdCAgICAgIFx0XHRyZXR1cm47XG5cdCAgICAgICAgXHR9XG5cblx0XHQgICAgICBcdGlmKHRoaXMuX19pc0RPTVRyZWVFcXVhbChjbXBfZG9tX25vZGUsIF9yZW5kZXJlZEZyYWdSb290Tm9kZSkpe1xuXHRcdCAgICAgIFx0XHR0aGlzLl9fZmluZEFuZFJlcGxhY2VVbmVxdWFsTm9kZXMoX3JlbmRlcmVkRnJhZ1Jvb3ROb2RlLCBjbXBfZG9tX25vZGUpO1x0XG5cdFx0ICAgICAgXHR9ZWxzZXtcblx0XHQgICAgICBcdFx0dGhpcy5fX3BhdGNoRE9NQ29tcGxldGVseShjbXBfZG9tX25vZGUpO1xuXHRcdCAgICAgIFx0fVxuXHRcdCAgICB9XG5cdFx0ICAgIGVsc2V7IFxuXHRcdCAgICBcdHRoaXMuX19wYXRjaERPTUNvbXBsZXRlbHkoY21wX2RvbV9ub2RlKTtcblx0ICAgICAgXHR9XG4gICAgXHR9Y2F0Y2goZSl7XG4gICAgXHRcdHRoaXMuX2xvZyhcImltcDpcIixcIihFUlJPUikgLSBjb21wb25lbnQgcmVuZGVyaW5nIGZhaWxlZCB3aXRoIHRoZSBmb2xsb3dpbmcgZXJyb3IgLSBcXG5cIiwgZSk7XG4gICAgXHR9XG4gICAgfVxuXG5cbiAgXHRhc3luYyByZW5kZXIoKSB7IC8vY2FsbGVkIGZyb20gZWl0aGVyIC0gMS4pIGRhdGFzcmN1cGRhdGUsIDIuKSBkYXRhc3JjIGlzIG51bGwgYWZ0ZXIgaW5pdCwgMy4pIG9uYXR0cmlidXRlY2hhbmdlLCA0Likgc3RhdGVDaGFuZ2Vcblx0ICAgIHRoaXMuX2xvZyhcIi0tLS0tLS0tLS1yZW5kZXJpbmcgY29tcG9uZW50IHN0YXJ0LS0tLS0tLS0tLS0tLS0tXCIpO1xuXHQgICAgdmFyIF90aGlzID0gdGhpcztcblxuXHQgICAgdHJ5e1xuXHQgICAgICB2YXIgX3JlbmRlcmVkID0gdGhpcy5tYXJrdXBGdW5jLmNhbGwodGhpcywgdGhpcy5kYXRhLCB0aGlzLnVpZCwgdGhpcy51aVZhcnMsIHRoaXMucm91dGVWYXJzLCB0aGlzLmNvbnN0cnVjdG9yKTsgXG5cdCAgICB9Y2F0Y2goZSl7XG5cdCAgICAgIGNvbnNvbGUuZXJyb3IodGhpcy5fbG9nUHJlZml4LCBcImVycm9yIGluIHJlbmRlcmluZyBjb21wb25lbnQgLSBcIiwgZSk7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblx0ICAgIC8vIHRoaXMuc2hhZG93LmlubmVySFRNTCA9IF9yZW5kZXJlZDtcblx0ICAgIC8vIHRoaXMuX2xvZyhcImltcDpcIixcInJlbmRlcmVkIG1hcmt1cEZ1bmNcIik7XG5cdCAgICB0aGlzLl9yZW5kZXJlZEZyYWcgPSBzdHJpbmdUb0hUTUxGcmFnKF9yZW5kZXJlZCk7XG5cdCAgICAvLyB0aGlzLl9sb2coXCJpbXA6XCIsXCJyZW5kZXJlZCBmcmFnbWVudFwiKTtcblxuXHQgICAgLy8gdGhpcy5fcHJvY2Vzc0NoaWxkQ21wcygpO1xuXG5cdCAgICB0aGlzLl9fcHJvY2Vzc1Jvb3RNYXJrdXAoKTtcblxuXHQgICAgdGhpcy5fX3Byb2Nlc3NTdHlsZU1hcmt1cCgpO1xuXG5cdCAgICB0aGlzLl9fcHJvY2Vzc1JlbmRlcmVkRnJhZ0V2ZW50TGlzdGVuZXJzKCk7XG5cdCAgICAvLyB0aGlzLl9sb2coXCJpbXA6XCIsXCJyZW5kZXJlcmVkIGZyYWdtZW50IHVpZFwiKTtcblx0ICAgIFxuXHQgICAgdGhpcy5fX3BhdGNoRE9NKCk7XG5cblx0ICAgIERlZmF1bHRDb25maWcuREVCVUdfU0NPUEUuZGVidWdMYXN0UmVuZGVyZWRDbXAgPSB0aGlzO1xuXHQgICAgdGhpcy5fbG9nKFwiLS0tLS0tLS0tLXJlbmRlcmluZyBjb21wb25lbnQgZW5kLS0tLS0tLS0tLS0tLS0tLS1cIik7XG5cdCAgICBcblx0ICAgIGlmKHRoaXMucG9zdFJlbmRlcil7XG5cdCAgICBcdHRoaXMucG9zdFJlbmRlcigpO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gdGhpc1xuICBcdH1cblx0XG59XG5cbkRPTUNvbXBvbmVudC5wcm90b3R5cGUuX2JpbmRpbmcgPSBmdW5jdGlvbihiKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLmVsZW1lbnQgPSBiLmVsZW1lbnQ7ICAgIFxuICAgIHRoaXMudmFsdWUgPSBiLm9iamVjdFtiLnByb3BlcnR5XTtcbiAgICB0aGlzLmF0dHJpYnV0ZSA9IGIuYXR0cmlidXRlO1xuICAgIHRoaXMudmFsdWVHZXR0ZXIgPSBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gX3RoaXMudmFsdWU7XG4gICAgfVxuICAgIHRoaXMudmFsdWVTZXR0ZXIgPSBmdW5jdGlvbih2YWwpe1xuICAgICAgICBfdGhpcy52YWx1ZSA9IHZhbDtcbiAgICAgICAgX3RoaXMuZWxlbWVudFtfdGhpcy5hdHRyaWJ1dGVdID0gdmFsO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLm9iamVjdCwgYi5wcm9wZXJ0eSwge1xuICAgICAgICBnZXQ6IHRoaXMudmFsdWVHZXR0ZXIsXG4gICAgICAgIHNldDogdGhpcy52YWx1ZVNldHRlclxuICAgIH0pOyBcbiAgICBiLm9iamVjdFtiLnByb3BlcnR5XSA9IHRoaXMudmFsdWU7XG5cbiAgICB0aGlzLmVsZW1lbnRbdGhpcy5hdHRyaWJ1dGVdID0gdGhpcy52YWx1ZTtcbn1cblxuXG5ET01Db21wb25lbnQuX2NvbXBvc2VTZWxmID0gZnVuY3Rpb24oKXtcblx0RE9NQ29tcG9uZW50UmVnaXN0cnkucmVnaXN0ZXIodGhpcy5wcm90b3R5cGUuY29uc3RydWN0b3IpO1xufVxuXG5ET01Db21wb25lbnQuX2NvbXBvc2UgPSBmdW5jdGlvbigpe1xuXHR0aGlzLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5fY29tcG9zZVNlbGYoKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KERPTUNvbXBvbmVudCwgXCJjb21wb3NlXCIsIHsgLy93aGF0IGlmIDIgcGFyZW50cyBhcmUgY29tcG9zaW5nIHRoZSBzYW1lIGNoaWxkXG5cdGdldDogZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY29tcG9zZX0sXG5cdHNldDogZnVuY3Rpb24oY29tcG9zZUZ1bmMpeyBcblx0XHRcdHRoaXMuX2NvbXBvc2UgPSBmdW5jdGlvbigpe1xuXHRcdFx0Ly8gY29uc29sZS5sb2coXCJpbXA6XCIsXCJVcGRhdGluZyBDb21wb3NlIGZ1bmN0aW9uIG9mIGNvbXBvbmVudCBcIix0aGlzKTtcblx0XHRcdGNvbXBvc2VGdW5jLmNhbGwodGhpcyk7XG5cdFx0XHR0aGlzLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5fY29tcG9zZVNlbGYoKTtcblx0XHR9IFxuXHR9XG59KTtcblxuXG5leHBvcnQge1xuXHRET01Db21wb25lbnQsXG5cdFBvc3RPZmZpY2UsXG5cdERhdGFTb3VyY2UsXG5cdERPTUNvbXBvbmVudFJlZ2lzdHJ5XG59IiwiaW1wb3J0IHsgUG9zdE9mZmljZSB9IGZyb20gXCIuL3Bvc3Rfb2ZmaWNlXCI7XG5cbi8vdG8gaW5jbHVkZS1odG1sIGVuZFxuXG5mdW5jdGlvbiBSb3V0ZXIob3B0aW9ucyl7XG5cdHZhciBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHR0aGlzLnJvdXRlcyA9IFtdO1xuXHR0aGlzLnRvZ2dsZUNsYXNzID0gb3B0aW9ucy50b2dnbGVDbGFzcyB8fCAnX2FjdGl2ZSc7XG5cdHRoaXMucm91dGVEZWxpbWl0ZXIgPSBvcHRpb25zLnJvdXRlRGVsaW1pdGVyIHx8IFwiP1wiO1xuXHR0aGlzLmNvbnRhaW5tZW50ID0gZG9jdW1lbnQ7XG5cdHRoaXMuX19pbml0X18oKTtcbn1cblxuUm91dGVyLnByb3RvdHlwZS5fX2luaXRfXyA9IGZ1bmN0aW9uKCl7XG5cdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0dGhpcy5faW5pdExvZ2dpbmcoKTtcblxuXHR0aGlzLl9pbml0TGlzdGVuZXJzKCk7XG5cblx0dGhpcy5faW5pdFNvY2tldCgpO1xuXG5cdHRoaXMuX2xvZygncm91dGVyIGluaXRpYWxpemVkJyk7XG59XG5cblJvdXRlci5wcm90b3R5cGUuX2luaXRMb2dnaW5nID0gZnVuY3Rpb24oKXtcblx0dGhpcy5fbG9nUHJlZml4ID0gXCJSb3V0ZXI6IFwiO1xuXHR0aGlzLl9sb2dTdHlsZSA9IFwiZm9udC1zaXplOiAxMnB4OyBjb2xvcjpncmVlblwiO1xufVxuXG5Sb3V0ZXIucHJvdG90eXBlLl9sb2cgPSBmdW5jdGlvbigpIHtcblx0dmFyIGFyZ3VtZW50c0FyciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdGlmKGFyZ3VtZW50c1swXT09PVwiaW1wOlwiKXtcblx0XHR2YXIgbXNnID0gYXJndW1lbnRzQXJyLnNsaWNlKDEsYXJndW1lbnRzQXJyLmxlbmd0aCkuam9pbihcIiBcIik7XG5cdFx0Y29uc29sZS5sb2coXCJpbXA6XCIsIFwiJWNcIiArIHRoaXMuX2xvZ1ByZWZpeCwgdGhpcy5fbG9nU3R5bGUsIG1zZyk7XG5cdH1lbHNle1xuXHRcdGNvbnNvbGUubG9nKFwiJWNcIiArIHRoaXMuX2xvZ1ByZWZpeCwgdGhpcy5fbG9nU3R5bGUsIG1zZyk7XG5cdH1cbn1cblxuXG5Sb3V0ZXIucHJvdG90eXBlLl9pbml0U29ja2V0ID0gZnVuY3Rpb24oKSB7XG5cdHRoaXMuX3NvY2tldCA9IFBvc3RPZmZpY2UuYWRkU29ja2V0KEV2ZW50VGFyZ2V0LFwiZWxlbWVudF9yb3V0ZXJcIik7XG59XG5cblxuUm91dGVyLnByb3RvdHlwZS5fZ2V0UGFyYW1zT2JqRnJvbVBhdGhTdHJpbmcgPSBmdW5jdGlvbihwYXRoU3RyaW5nKSB7XG5cdHZhciBwYXJhbXNTdHJMaXN0ID0gcGF0aFN0cmluZy5zcGxpdChcIj9cIikucG9wKCkuc3BsaXQoXCImXCIpO1xuXHRwYXJhbXNTdHJMaXN0LnNoaWZ0KCk7XG5cdHJldHVybiBwYXJhbXNTdHJMaXN0Lm1hcCgoX3BhcmFtU3RyKT0+e1xuXHQgICAgdmFyIHBhcmFtU3BsaXQgPSBfcGFyYW1TdHIuc3BsaXQoXCI9XCIpO1xuXHQgICAgdmFyIHBhcmFtT2JqID0ge307XG5cdCAgICBwYXJhbU9ialtwYXJhbVNwbGl0WzBdXSA9IHBhcmFtU3BsaXRbMV07XG5cdCAgICByZXR1cm4gcGFyYW1PYmpcblx0fSkucmVkdWNlKChhY2N1bSwgY3Vycik9PiB7XG5cdCAgIHJldHVybiB7Li4uYWNjdW0sIC4uLmN1cnJ9XG5cdH0se30pXG59XG5cblJvdXRlci5wcm90b3R5cGUuZ2V0Q3VycmVudFJvdXRlUGFyYW1zID0gZnVuY3Rpb24oKXtcblx0aWYod2luZG93Lmhpc3Rvcnkuc3RhdGUpe1xuXHRcdHJldHVybiB0aGlzLl9nZXRQYXJhbXNPYmpGcm9tUGF0aFN0cmluZyh3aW5kb3cuaGlzdG9yeS5zdGF0ZS51cmwpO1xuXHR9ZWxzZXsgLy9pZiB1cmwgaXMgbG9hZGVkIGJ5IGRpcmVjdGx5IGVudGVyaW5nIGludG8gdGhlIGFkZHJlc3MgYmFyXG5cdFx0cmV0dXJuIHRoaXMuX2dldFBhcmFtc09iakZyb21QYXRoU3RyaW5nKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuXHR9XG59XG5cblJvdXRlci5wcm90b3R5cGUuX2dldFJvdXRlTmFtZUZyb21XaW5kb3dMb2NhdGlvbiA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgcm91dGVQYXRoID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaC5zcGxpdChcIj9cIikucG9wKCkuc3BsaXQoXCImXCIpLnNoaWZ0KCkgfHwgdGhpcy5nZXREZWZhdWx0Um91dGUoKS5uYW1lO1xuXHRyZXR1cm4gcm91dGVQYXRoO1xufVxuXG5Sb3V0ZXIucHJvdG90eXBlLl9nZXRSb3V0ZU5hbWVGcm9tSGlzdG9yeVN0YXRlID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZS5uYW1lO1xufVxuXG5Sb3V0ZXIucHJvdG90eXBlLmdldEN1cnJlbnRSb3V0ZU5hbWUgPSBmdW5jdGlvbigpe1xuXHRpZih3aW5kb3cuaGlzdG9yeS5zdGF0ZSl7XG5cdFx0cmV0dXJuIHRoaXMuX2dldFJvdXRlTmFtZUZyb21IaXN0b3J5U3RhdGUoKTtcblx0fWVsc2V7IC8vaWYgdXJsIGlzIGxvYWRlZCBieSBkaXJlY3RseSBlbnRlcmluZyBpbnRvIHRoZSBhZGRyZXNzIGJhclxuXHRcdHJldHVybiB0aGlzLl9nZXRSb3V0ZU5hbWVGcm9tV2luZG93TG9jYXRpb24oKTtcblx0fVxufVxuXG5Sb3V0ZXIucHJvdG90eXBlLl9pbml0TGlzdGVuZXJzID0gZnVuY3Rpb24oKXtcblx0dmFyIF90aGlzID0gdGhpcztcblx0d2luZG93Lm9ucG9wc3RhdGUgPSBmdW5jdGlvbigpeyAvL25vdCBjYWxsZWQgd2dlYiBkdXJlY3RseSBjYWxsZWQgYnkgc2NyaXB0IChvbmx5IGNhbGxlZCBvbiBicm93c2VyIGFjdGlvbnMgYnkgdXNlcilcblx0XHRfdGhpcy5fbG9nKFwiaW1wOlwiLCBcIm9ucG9wc3RhdGUgc3RhcnRcIik7XG5cdFx0dmFyIHJvdXRlTmFtZSA9IF90aGlzLmdldEN1cnJlbnRSb3V0ZU5hbWUoKTtcblx0XHR2YXIgcm91dGVPYmogPSBfdGhpcy5nZXRSb3V0ZShyb3V0ZU5hbWUpO1xuXHRcdF90aGlzLl9sb2coXCJpbXA6XCIsIFwib25wb3BzdGF0ZSBlbmRcIik7XG5cdFx0X3RoaXMudHJpZ2dlckN1c3RvbUV2ZW50KHdpbmRvdywnc3RhdGVDaGFuZ2UnLHtzdGF0ZTogcm91dGVPYmp9KTtcblx0fVxuXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzdGF0ZUNoYW5nZScsIGZ1bmN0aW9uKGV2KXtcblx0XHRfdGhpcy5vblN0YXRlQ2hhbmdlLmNhbGwoX3RoaXMsIGV2KTtcblx0fSk7XG5cblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIChlKSA9PiB7XG5cdFx0X3RoaXMuZ28oX3RoaXMuZ2V0Q3VycmVudFJvdXRlTmFtZSgpLF90aGlzLmdldEN1cnJlbnRSb3V0ZVBhcmFtcygpKTtcblx0fSxmYWxzZSk7XG59XG5cblxuUm91dGVyLnByb3RvdHlwZS5nZXREZWZhdWx0Um91dGUgPSBmdW5jdGlvbigpe1xuXHRyZXR1cm4gdGhpcy5yb3V0ZXMuZmlsdGVyKGZ1bmN0aW9uKHJvdXRlKXtcblx0XHRyZXR1cm4gcm91dGUuZGVmYXVsdFJvdXRlID09PSB0cnVlO1xuXHR9KVswXSB8fCB7fTtcbn1cblxuUm91dGVyLnByb3RvdHlwZS5hZGREZWZhdWx0Um91dGUgPSBmdW5jdGlvbihyb3V0ZV9uYW1lLCB1cmxfcGFyYW1zKSB7XG5cdHZhciByb3V0ZU9iaiA9IHRoaXMuZ2V0T3JDcmVhdGVSb3V0ZShyb3V0ZV9uYW1lLCB1cmxfcGFyYW1zKTtcblx0cm91dGVPYmouZGVmYXVsdFJvdXRlID0gdHJ1ZTtcbn1cblxuUm91dGVyLnByb3RvdHlwZS5nZXRSb3V0ZSA9IGZ1bmN0aW9uKHJvdXRlX25hbWUpe1xuXHRyZXR1cm4gdGhpcy5yb3V0ZXMuZmlsdGVyKGZ1bmN0aW9uKHJvdXRlKXtcblx0XHRyZXR1cm4gcm91dGUubmFtZSA9PSByb3V0ZV9uYW1lO1xuXHR9KVswXVxufVxuXG5Sb3V0ZXIucHJvdG90eXBlLmNyZWF0ZU9yUmVwbGFjZVJvdXRlID0gZnVuY3Rpb24gKHJvdXRlT2JqKSB7XG4gIHZhciBpZHggPSB0aGlzLnJvdXRlcy5maW5kSW5kZXgoKHJvdXRlKT0+e1xuICBcdHJldHVybiByb3V0ZS5uYW1lID09IHJvdXRlT2JqLm5hbWU7XG4gIH0pO1xuICBpZihpZHggPj0gMCl7XG4gIFx0dGhpcy5yb3V0ZXMuc3BsaWNlKGlkeCwxKTtcbiAgfVxuICB0aGlzLmFkZFJvdXRlKHJvdXRlT2JqKTtcbn07XG5cblJvdXRlci5wcm90b3R5cGUuY2xvc2VSb3V0ZSA9IGZ1bmN0aW9uKHJvdXRlT2JqLCByb3V0ZUVsKXtcblx0dmFyIF90aGlzID0gdGhpcztcblx0aWYoIXJvdXRlT2JqKXtyZXR1cm47fVxuXHRyb3V0ZU9iai5vbmJlZm9yZWV4aXQgPyByb3V0ZU9iai5vbmJlZm9yZWV4aXQuY2FsbChfdGhpcywgcm91dGVFbCkgOiBudWxsO1xuXHRyb3V0ZUVsLmNsYXNzTGlzdC5yZW1vdmUoX3RoaXMudG9nZ2xlQ2xhc3MpO1xuXHRyb3V0ZU9iai5hY3RpdmUgPSBmYWxzZTtcdFxufVxuXG4vLyBSb3V0ZXIucHJvdG90eXBlLnRvZ2dsZVBhZ2UgPSBmdW5jdGlvbih0YXJnZXRfcGFnZSwgdGFyZ2V0X3JvdXRlKXtcbi8vIFx0dmFyIF90aGlzID0gdGhpcztcblx0XG4vLyB9XG5cblJvdXRlci5wcm90b3R5cGUub25TdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uKGV2KXtcblx0Ly8gdmFyIF90aGlzID0gdGhpcztcblx0Ly8gdmFyIGUgPSBlLmRldGFpbCA/IGUuZGV0YWlsLnNyY0V2ZW50IDogZTtcblx0Ly8gZWVlID0gZXY7XG5cdHZhciBzdGF0ZSA9IGV2LmRldGFpbC5zdGF0ZSB8fCB0aGlzLmdldERlZmF1bHRSb3V0ZSgpO1xuIFxuXHR2YXIgcm91dGVPYmogPSB0aGlzLmdldFJvdXRlKHN0YXRlLm5hbWUpO1xuXHRpZighcm91dGVPYmope1xuXHRcdHRoaXMuX2xvZygnbm8gc3VjaCByb3V0ZScpO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHRoaXMuX29uQmVmb3JlTG9hZChyb3V0ZU9iaik7XG5cblx0dGhpcy50b2dnbGVSb3V0ZUVsKHJvdXRlT2JqKTtcbn1cblxuXG5Sb3V0ZXIucHJvdG90eXBlLmdldFJvdXRlRWwgPSBmdW5jdGlvbihyb3V0ZU5hbWUpe1xuXHRyZXR1cm4gdGhpcy5jb250YWlubWVudC5xdWVyeVNlbGVjdG9yKCdbcm91dGU9Jytyb3V0ZU5hbWUrJ10nKTtcbn1cblxuXG5Sb3V0ZXIucHJvdG90eXBlLmdldEN1cnJlbnRTY29wZSA9IGZ1bmN0aW9uKHJvdXRlT2JqKSB7XG5cdHZhciBzY29wZSA9IHRoaXMuY29udGFpbm1lbnQ7XG5cblx0aWYodGhpcy5pc1N1YlJvdXRlKHJvdXRlT2JqKSl7XG5cdFx0dmFyIGFuY2Vzc3RvclJvdXRlRWxlbXMgPSB0aGlzLmdldFJvdXRlQW5jZXNzdG9ycyhyb3V0ZU9iai5uYW1lKS5lbGVtcztcblx0XHRzY29wZSA9IGFuY2Vzc3RvclJvdXRlRWxlbXMuc2xpY2UoLTEpWzBdOyAvL2RpcmVjdCBwYXJlbnRcblx0fVxuXG5cdHJvdXRlT2JqLnNjb3BlID0gc2NvcGU7XG5cdHJldHVybiBzY29wZTtcbn1cblxuUm91dGVyLnByb3RvdHlwZS5fZ2V0QWN0aXZlUm91dGVFbGVtc0luU2NvcGUgPSBmdW5jdGlvbihzY29wZSkge1xuXHR2YXIgc2NvcGUgPSBzY29wZSB8fCB0aGlzLmNvbnRhaW5tZW50O1xuXHRyZXR1cm4gc2NvcGUucXVlcnlTZWxlY3RvckFsbChgLiR7dGhpcy5nZXRUb2dnbGVDbGFzcygpfVtyb3V0ZV1gKTtcbn1cblxuUm91dGVyLnByb3RvdHlwZS5fY2xvc2VBbGxBY3RpdmVSb3V0ZXNJblNjb3BlID0gZnVuY3Rpb24oc2NvcGUpIHtcblx0dmFyIF90aGlzID0gdGhpcztcblxuXHR2YXIgY3VycmVudGx5X2FjdGl2ZV9yb3V0ZV9lbGVtc19pbl9zY29wZSA9IHRoaXMuX2dldEFjdGl2ZVJvdXRlRWxlbXNJblNjb3BlKHNjb3BlKTtcblxuXHRjdXJyZW50bHlfYWN0aXZlX3JvdXRlX2VsZW1zX2luX3Njb3BlLmZvckVhY2goZnVuY3Rpb24oY3VycmVudGx5X2FjdGl2ZV9yb3V0ZV9lbCwgY3VycmVudGx5X2FjdGl2ZV9yb3V0ZSl7XG5cdFx0dmFyIGN1cnJlbnRseV9hY3RpdmVfcm91dGVfb2JqID0gX3RoaXMuZ2V0Um91dGUoY3VycmVudGx5X2FjdGl2ZV9yb3V0ZV9lbC5nZXRBdHRyaWJ1dGUoJ3JvdXRlJykpO1xuXHRcdF90aGlzLmNsb3NlUm91dGUoY3VycmVudGx5X2FjdGl2ZV9yb3V0ZV9vYmosIGN1cnJlbnRseV9hY3RpdmVfcm91dGVfZWwpO1xuXHR9KTtcbn1cblxuUm91dGVyLnByb3RvdHlwZS5fb25CZWZvcmVMb2FkID0gZnVuY3Rpb24ocm91dGVPYmope1xuXG5cdGlmKHJvdXRlT2JqLnNvY2tldE5hbWUgJiYgUG9zdE9mZmljZS5zb2NrZXRzW3JvdXRlT2JqLnNvY2tldE5hbWVdKXtcblx0XHRQb3N0T2ZmaWNlLnNvY2tldHNbcm91dGVPYmouc29ja2V0TmFtZV0uZGlzcGF0Y2hNZXNzYWdlKFwib25CZWZvcmVMb2FkXCIse1xuXHRcdFx0bmFtZTogcm91dGVPYmoubmFtZSxcblx0ICAgICAgICB1cmw6IHJvdXRlT2JqLnVybCxcblx0ICAgICAgICBwYXJhbXM6IHJvdXRlT2JqLnBhcmFtcyxcblx0ICAgICAgICBhY3RpdmU6IHJvdXRlT2JqLmFjdGl2ZVxuXHRcdH0pO1xuXHR9XG5cblx0dGhpcy5fc29ja2V0LmRpc3BhdGNoTWVzc2FnZShcIm9uQmVmb3JlTG9hZFwiLHtcblx0XHRuYW1lOiByb3V0ZU9iai5uYW1lLFxuICAgICAgICB1cmw6IHJvdXRlT2JqLnVybCxcbiAgICAgICAgcGFyYW1zOiByb3V0ZU9iai5wYXJhbXMsXG4gICAgICAgIGFjdGl2ZTogcm91dGVPYmouYWN0aXZlXG4gICAgfSk7XG5cblx0aWYocm91dGVPYmoub25CZWZvcmVMb2FkKXtcblx0XHRyb3V0ZU9iai5vbkJlZm9yZUxvYWQuY2FsbCh0aGlzLCByb3V0ZU9iaik7XG5cdH1cbn1cblxuUm91dGVyLnByb3RvdHlwZS50b2dnbGVSb3V0ZUVsID0gZnVuY3Rpb24ocm91dGVPYmope1xuXHR2YXIgcm91dGVFbCA9IHRoaXMuZ2V0Um91dGVFbChyb3V0ZU9iai5uYW1lKTtcblx0aWYoIXJvdXRlRWwpe3RoaXMuX2xvZygnaW1wOicsJ25vIGVsZW1lbnRzIHdpdGggdGhpcyByb3V0ZSBhdHRyIGZvdW5kJyk7cmV0dXJuO31cblxuXHR2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdHZhciBzY29wZSA9IHRoaXMuZ2V0Q3VycmVudFNjb3BlKHJvdXRlT2JqKTtcdFxuXG5cdHRoaXMuX2Nsb3NlQWxsQWN0aXZlUm91dGVzSW5TY29wZShzY29wZSk7XG5cblxuXHQvL2FjdGl2YXRlIGFsbCB0aGUgYW5jZXNzdG9yIHJvdXRlcyB0byB0aGlzIHJvdXRlIC0tPiBcblx0dmFyIGFuY2Vzc3RvclJvdXRlRWxlbXMgPSB0aGlzLmdldFJvdXRlQW5jZXNzdG9ycyhyb3V0ZU9iai5uYW1lKS5lbGVtcztcblx0YW5jZXNzdG9yUm91dGVFbGVtcy5mb3JFYWNoKChfcm91dGVFbCk9Pntcblx0XHR2YXIgX3BhcmVudFNjb3BlID0gX3RoaXMuZ2V0Q3VycmVudFNjb3BlKF90aGlzLmdldE9yQ3JlYXRlUm91dGUoX3JvdXRlRWwuZ2V0QXR0cmlidXRlKFwicm91dGVcIikpKTtcblx0XHRfdGhpcy5fY2xvc2VBbGxBY3RpdmVSb3V0ZXNJblNjb3BlKF9wYXJlbnRTY29wZSk7XG5cdFx0X3JvdXRlRWwuY2xhc3NMaXN0LmFkZCh0aGlzLmdldFRvZ2dsZUNsYXNzKCkpO1xuXHR9KTtcblxuXHRyb3V0ZUVsLmNsYXNzTGlzdC5hZGQodGhpcy5nZXRUb2dnbGVDbGFzcygpKTtcblx0cm91dGVPYmouYWN0aXZlID0gdHJ1ZTtcblx0dGhpcy5fb25sb2FkKHJvdXRlT2JqLCByb3V0ZUVsKTtcblxuXHR0aGlzLmFjdGl2ZV9yb3V0ZSA9IHJvdXRlT2JqLm5hbWU7XG5cdHRoaXMuX2xvZygnaW1wOicsJ3RvZ2dsZWQgZWxlbWVudCB3aXRoIHJvdXRlIGF0dHIgPSAnLCB0aGlzLmFjdGl2ZV9yb3V0ZSk7XG59XG5cblxuUm91dGVyLnByb3RvdHlwZS5fb25sb2FkID0gZnVuY3Rpb24odGFyZ2V0X3JvdXRlLCB0YXJnZXRfcGFnZSl7XG5cdHdpbmRvdy5zY3JvbGxUbygwLDApO1xuXHRpZih0YXJnZXRfcm91dGUub25sb2FkKXtcblx0XHR0YXJnZXRfcm91dGUub25sb2FkLmNhbGwodGhpcywgdGFyZ2V0X3BhZ2UsIHRhcmdldF9yb3V0ZSk7XG5cdH1cblx0aWYodGhpcy5vbnJvdXRlY2hhbmdlKXtcblx0XHR0aGlzLm9ucm91dGVjaGFuZ2UodGFyZ2V0X3JvdXRlLCB0YXJnZXRfcGFnZSk7XG5cdH1cbn1cblxuUm91dGVyLnByb3RvdHlwZS50cmlnZ2VyQ3VzdG9tRXZlbnQgPSBmdW5jdGlvbih0YXJnZXQsIGV2ZW50TmFtZSwgZGV0YWlscyl7XG4gIGlmKCF0YXJnZXQpe3JldHVybjt9XG4gIGlmKCFldmVudE5hbWUpe3JldHVybjt9XG4gIHZhciBldm50ID0gbmV3IEN1c3RvbUV2ZW50KGV2ZW50TmFtZSwge1xuICAgICAgZGV0YWlsOiBkZXRhaWxzXG4gICAgfSk7XG4gIHRhcmdldC5kaXNwYXRjaEV2ZW50KGV2bnQpO1xufVxuXG5cblJvdXRlci5wcm90b3R5cGUudXBkYXRlU3RhdGUgPSBmdW5jdGlvbihyb3V0ZU9iail7XG5cdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0aWYodGhpcy5pc1N1YlJvdXRlKHJvdXRlT2JqKSl7XG5cdFx0dmFyIGFuY2Vzc3RvclJvdXRlTmFtZXMgPSB0aGlzLmdldFJvdXRlQW5jZXNzdG9ycyhyb3V0ZU9iai5uYW1lKS5yb3V0ZXM7XG5cdFx0cm91dGVPYmoudXJsID0gdGhpcy5yb3V0ZURlbGltaXRlciArIGFuY2Vzc3RvclJvdXRlTmFtZXMuY29uY2F0KHJvdXRlT2JqLm5hbWUpLmpvaW4oXCIvXCIpO1xuXHRcdF90aGlzLl9sb2coXCJ1cGRhdGluZyBoaXN0b3J5VXJsIGZvciBzdWItcm91dGUgPT0gXCIsIHJvdXRlT2JqLnVybCk7XG5cdH1lbHNle1xuXHRcdHJvdXRlT2JqLnVybCA9IGAke3RoaXMucm91dGVEZWxpbWl0ZXJ9JHtyb3V0ZU9iai5uYW1lfWA7XG5cdFx0X3RoaXMuX2xvZyhcInVwZGF0aW5nIGhpc3RvcnlVcmwgZm9yIHJvdXRlOiBcIiwgcm91dGVPYmoudXJsKTtcblx0fVxuXG5cdGlmKHJvdXRlT2JqLnBhcmFtcyl7XG5cdFx0Zm9yKHZhciBrZXkgaW4gcm91dGVPYmoucGFyYW1zKXtcblx0XHRcdHJvdXRlT2JqLnVybCArPSAoIFwiJlwiICsgU3RyaW5nKGtleSkgKyBcIj1cIiArIFN0cmluZyhyb3V0ZU9iai5wYXJhbXNba2V5XSkgKTtcblx0XHR9XG5cdH1cblxuXG5cdHZhciBoaXN0b3J5VGl0bGUgPSByb3V0ZU9iai5uYW1lO1xuXHR2YXIgaGlzdG9yeVVybCA9IHJvdXRlT2JqLnVybDtcblx0dmFyIGhpc3RvcnlEYXRhID0geyBuYW1lOiBoaXN0b3J5VGl0bGUsIHVybDogaGlzdG9yeVVybCB9O1xuXG5cdF90aGlzLl9sb2coXCJ1cGRhdGluZyBoaXN0b3J5IFN0YXRlOiBcIiwgSlNPTi5zdHJpbmdpZnkoaGlzdG9yeURhdGEpKTtcblxuXHR0cnl7XG5cdFx0d2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKGhpc3RvcnlEYXRhLCBoaXN0b3J5VGl0bGUsIGhpc3RvcnlVcmwpO1xuXHR9Y2F0Y2goZSl7XG5cdFx0X3RoaXMuX2xvZyhcImltcDpcIiwgXCJFUlJPUiB1cGRhdGluZyBIaXN0b3J5XCIpO1xuXHRcdHJldHVybjtcblx0fVxuXHRfdGhpcy5fbG9nKFwiaW1wOlwiLCBcImhpc3RvcnkgdXBkYXRlZFwiKTtcbn1cblxuUm91dGVyLnByb3RvdHlwZS5iYWNrID0gZnVuY3Rpb24oKXtcblx0d2luZG93Lmhpc3RvcnkuYmFjaygpO1xufVxuXG5cblJvdXRlci5wcm90b3R5cGUuaXNTdWJSb3V0ZSA9IGZ1bmN0aW9uKHJvdXRlT2JqKXtcblx0dmFyIHJvdXRlRWwgPSB0aGlzLmdldFJvdXRlRWwocm91dGVPYmoubmFtZSk7XG5cdGlmKCFyb3V0ZUVsKXtyZXR1cm4gZmFsc2U7fVxuXHRyZXR1cm4gdHJ1ZTtcblx0cmV0dXJuIHJvdXRlRWwuaGFzQXR0cmlidXRlKCdzdWItcm91dGUnKSA/IHRydWUgOiBmYWxzZTtcbn1cblxuUm91dGVyLnByb3RvdHlwZS5nZXRUb2dnbGVDbGFzcyA9IGZ1bmN0aW9uKHJvdXRlX25hbWUpe1xuXHR2YXIgX3RoaXMgPSB0aGlzO1xuXHR2YXIgcm91dGVFbCA9IHRoaXMuZ2V0Um91dGVFbChyb3V0ZV9uYW1lKTtcblx0aWYoIXJvdXRlRWwpe3JldHVybiBfdGhpcy50b2dnbGVDbGFzc31cblx0cmV0dXJuIHJvdXRlRWwuaGFzQXR0cmlidXRlKCdyb3V0ZS1jbGFzcycpID8gcm91dGVFbC5nZXRBdHRyaWJ1dGUoJ3JvdXRlLWNsYXNzJykgOiBfdGhpcy50b2dnbGVDbGFzcztcbn1cblxuUm91dGVyLnByb3RvdHlwZS5nZXRSb3V0ZUFuY2Vzc3RvcnMgPSBmdW5jdGlvbihyb3V0ZV9uYW1lKXtcblx0dmFyIG5vZGVMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltyb3V0ZV1cIilcblx0dmFyIGFuY2Vzc3RvclJvdXRlRWxlbXMgPSBBcnJheS5mcm9tKG5vZGVMaXN0KS5maWx0ZXIoZWwgPT4gZWwucXVlcnlTZWxlY3RvcihcIltyb3V0ZT0nXCIrcm91dGVfbmFtZStcIiddXCIpKVxuXHQvLyB2YXIgYW5jZXNzdG9yUm91dGVFbGVtcyA9IFtdLnNsaWNlLmNhbGwoJChcIltyb3V0ZV1cIikuaGFzKFwiIFtyb3V0ZT0nXCIrcm91dGVfbmFtZStcIiddW3N1Yi1yb3V0ZV1cIikpO1xuXHR2YXIgYW5jZXNzdG9yUm91dGVzID0gYW5jZXNzdG9yUm91dGVFbGVtcy5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEuZ2V0QXR0cmlidXRlKFwicm91dGVcIil9KVxuXHRyZXR1cm4ge2VsZW1zOiBhbmNlc3N0b3JSb3V0ZUVsZW1zLCByb3V0ZXM6IGFuY2Vzc3RvclJvdXRlc307XG59XG5cblJvdXRlci5wcm90b3R5cGUudXBkYXRlUm91dGVPYmpQYXJhbXMgPSBmdW5jdGlvbiAocm91dGVPYmosIHVybF9wYXJhbXMpIHtcblx0aWYocm91dGVPYmoucGFyYW1zKXtcblx0ICBcdHJvdXRlT2JqLnBhcmFtcyA9IHsuLi5yb3V0ZU9iai5wYXJhbXMsIC4uLnVybF9wYXJhbXN9O1xuXHR9XG59XG5cblJvdXRlci5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbihyb3V0ZV9uYW1lLCB1cmxfcGFyYW1zKXtcblx0Ly8gdmFyIHJvdXRlRWwgPSB0aGlzLmdldFJvdXRlRWwocm91dGVfbmFtZSk7XG5cdC8vIGlmKCFyb3V0ZUVsKXtcblx0Ly8gXHR0aGlzLl9sb2coXCJpbXA6XCIsXCJubyBlbGVtZW50cyB3aXRoIHRoaXMgcm91dGUgYXR0ciBmb3VuZFwiKTtcblx0Ly8gXHRyZXR1cm47XG5cdC8vIH1cblx0dmFyIHJvdXRlT2JqID0gdGhpcy5nZXRPckNyZWF0ZVJvdXRlKHJvdXRlX25hbWUsIHVybF9wYXJhbXMpO1xuXHR0aGlzLnVwZGF0ZVJvdXRlT2JqUGFyYW1zKHJvdXRlT2JqLCB1cmxfcGFyYW1zKTtcblx0dGhpcy51cGRhdGVTdGF0ZShyb3V0ZU9iaik7XG5cdHRoaXMuX2xvZyhcImltcDpcIixcImNoYW5naW5nIHJvdXRlIHRvIC0gXCIsIHJvdXRlT2JqLm5hbWUpO1xuXHR0aGlzLnRyaWdnZXJDdXN0b21FdmVudCh3aW5kb3csJ3N0YXRlQ2hhbmdlJyx7IHN0YXRlOiByb3V0ZU9iaiB9ICk7XG59XG5cblJvdXRlci5wcm90b3R5cGUuZ2V0T3JDcmVhdGVSb3V0ZSA9IGZ1bmN0aW9uKHJvdXRlX25hbWUsIHVybF9wYXJhbXMpe1xuXHR2YXIgcm91dGVPYmogPSB0aGlzLmdldFJvdXRlKHJvdXRlX25hbWUpO1xuXHRpZihyb3V0ZU9iail7XG5cdFx0cm91dGVPYmoucGFyYW1zID0gey4uLnJvdXRlT2JqLnBhcmFtcywgLi4udXJsX3BhcmFtc31cblx0fWVsc2V7XG5cdFx0cm91dGVPYmogPSB7XG5cdFx0XHRuYW1lOiByb3V0ZV9uYW1lLFxuXHRcdFx0cGFyYW1zOiB1cmxfcGFyYW1zXG5cdFx0fVxuXHRcdHRoaXMuYWRkUm91dGUocm91dGVPYmopO1xuXHR9XG5cdHJldHVybiByb3V0ZU9iajtcbn1cblxuUm91dGVyLnByb3RvdHlwZS5pbml0U29ja2V0ID0gZnVuY3Rpb24oc29ja2V0TmFtZSl7XG5cdHRoaXMuX2xvZyhcImltcDpcIixcImluaXRpYWxpemluZyBzb2NrZXQgPSBcIiwgc29ja2V0TmFtZSk7XG5cdFBvc3RPZmZpY2UuYWRkU29ja2V0KEV2ZW50VGFyZ2V0LCBzb2NrZXROYW1lKTtcbn1cblxuUm91dGVyLnByb3RvdHlwZS5hZGRSb3V0ZSA9IGZ1bmN0aW9uKHJvdXRlT2JqLCBvcHRpb25zKXtcblx0aWYoIXJvdXRlT2JqKXtyZXR1cm47fVxuXHRpZighcm91dGVPYmoubmFtZSl7cmV0dXJuO31cblx0dmFyIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdGlmKHJvdXRlT2JqLnNvY2tldE5hbWUpe1xuXHRcdHRoaXMuaW5pdFNvY2tldChyb3V0ZU9iai5zb2NrZXROYW1lKTtcblx0fVxuXG5cdGlmKG9wdGlvbnMuZm9yY2UpIHtcblx0XHR0aGlzLmNyZWF0ZU9yUmVwbGFjZVJvdXRlKHJvdXRlT2JqKTtcblx0XHRyZXR1cm47XG5cdH1cblx0aWYoIXRoaXMuZ2V0Um91dGUocm91dGVPYmoubmFtZSkpe1xuXHRcdHRoaXMucm91dGVzLnB1c2gocm91dGVPYmopO1xuXHR9XG59XG5cblJvdXRlci5wcm90b3R5cGUuYWRkUm91dGVDb25maWcgPSBmdW5jdGlvbihyb3V0ZU9iakxpc3Qpe1xuXHR2YXIgX3RoaXMgPSB0aGlzO1xuXHRyb3V0ZU9iakxpc3QuZm9yRWFjaChmdW5jdGlvbihyb3V0ZU9iail7XG5cdFx0X3RoaXMuYWRkUm91dGUocm91dGVPYmopO1xuXHR9KTtcbn1cblxuUm91dGVyLnByb3RvdHlwZS5nZXRBY3RpdmVSb3V0ZSA9IGZ1bmN0aW9uKCl7XG5cdHJldHVybiB0aGlzLmFjdGl2ZV9yb3V0ZSA/IHRoaXMuZ2V0Um91dGUodGhpcy5hY3RpdmVfcm91dGUpIDogbnVsbDtcbn1cblxuXG5leHBvcnQge1xuXHRSb3V0ZXJcbn0iLCJpbXBvcnQgeyByYW5kb21TdHJpbmcsIHN0cmluZ1RvRG9jRnJhZywgc2VuZF9hamF4IH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcblxuZnVuY3Rpb24gZG9jRnJhZ1BhcnNlcihfZG9jRnJhZywgY21wX2VsX3NyYyl7XG5cdHZhciB0ID0gX2RvY0ZyYWcucXVlcnlTZWxlY3RvcigndGVtcGxhdGUnKTtcblx0dmFyIGRvYyA9IGRvY3VtZW50LmltcG9ydE5vZGUodC5jb250ZW50LHRydWUpO1xuXHQvLyB2YXIgZG9jID0gbGluay5pbXBvcnQ7XG5cdC8vIGRkID0gZG9jO1xuXHR2YXIgZG9jRnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblx0Ly8gdmFyIHNjcmlwdEZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cblx0aWYoX2NoZWNrSWZUZXJtaW5hdGluZ0NtcFVybChjbXBfZWxfc3JjKSl7XG5cdFx0Y21wX2VsX3NyYyA9IGNtcF9lbF9zcmMuc3BsaXQoJy8nKTtcblx0XHRjbXBfZWxfc3JjLnBvcCgpO1xuXHRcdGNtcF9lbF9zcmMgPSBjbXBfZWxfc3JjLmpvaW4oJy8nKTtcblx0fVxuXG5cblx0d2hpbGUoZG9jLmZpcnN0Q2hpbGQpeyAvL2FueSBwYXJzaW5nIHRiZCBoZXJlXG5cdFx0dmFyIGNvbnRlbnQgPSBkb2MuZmlyc3RDaGlsZDtcblxuXHRcdGlmKGNvbnRlbnQuc3JjKXtcblx0XHRcdGNvbnRlbnQuc3JjID0gY29udGVudC5zcmNbMF0gPT0gXCIvXCIgPyBjb250ZW50LnNyYyA6IGNvbnRlbnQuc3JjID0gY21wX2VsX3NyYyArIGNvbnRlbnQuc3JjLnNwbGl0KHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pLnBvcCgpO1xuXHRcdH1cblx0XHRpZihjb250ZW50LmhyZWYpe1xuXHRcdFx0Y29udGVudC5ocmVmID0gY29udGVudC5ocmVmWzBdID09IFwiL1wiID8gY29udGVudC5ocmVmIDogY29udGVudC5ocmVmID0gIGNtcF9lbF9zcmMgKyBjb250ZW50LmhyZWYuc3BsaXQod2luZG93LmxvY2F0aW9uLm9yaWdpbikucG9wKCk7XG5cdFx0fVxuXG5cdFx0Ly8gaWYoY29udGVudC50YWdOYW1lPT1cIlNDUklQVFwiKXtcblx0XHQvLyBcdC8vIGNvbnNvbGUubG9nKFwiRk9VTkQgU0NSSVBUID0gXCIsIGNvbnRlbnQpO1xuXHRcdC8vIFx0c2NyaXB0RnJhZy5pbnNlcnRCZWZvcmUoY29udGVudCwgc2NyaXB0RnJhZy5maXJzdENoaWxkKTsgLy9zbyB0aGF0IG9yZGVyIG9mIHNjcmlwdHMgaXMgc2FtZSBhcyBpbiB0ZW1wbGF0ZVxuXHRcdC8vIH1lbHNle1xuXHRcdC8vIFx0ZG9jRnJhZy5hcHBlbmRDaGlsZChjb250ZW50KTtcblx0XHQvLyB9XG5cblx0XHRkb2NGcmFnLmluc2VydEJlZm9yZShjb250ZW50LCBkb2NGcmFnLmZpcnN0Q2hpbGQpOyAvL3ByZXNlcnZlIG9yZGVyIG9mIGNvbnRlbnRcblx0fVxuXG5cdHJldHVybiB7X2ZyYWc6IGRvY0ZyYWcgfVxufVxuXG5cbmZ1bmN0aW9uIF9jaGVja0lmVGVybWluYXRpbmdDbXBVcmwgKF91cmwpe1xuXHRyZXR1cm4gX3VybC5zbGljZSgtNSkgPT0gXCIuaHRtbFwiIHx8IF91cmwuc2xpY2UoLTQpID09IFwiLnN2Z1wiO1xufVxuXG5mdW5jdGlvbiBmdWxsQ29tcG9uZW50VXJsKF91cmwpe1xuXHRpZihfY2hlY2tJZlRlcm1pbmF0aW5nQ21wVXJsKF91cmwpKXtcblx0XHRyZXR1cm4gX3VybDtcblx0fVxuXHRyZXR1cm4gX3VybCArICcvY29tcG9uZW50Lmh0bWwnO1xufVxuXG5cblxuY2xhc3MgSW5jbHVkZUZyYWcgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG5cdHN0YXRpYyBkb21FbE5hbWUgPSBcImluY2x1ZGUtZnJhZ1wiO1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy51aWQgPSB0aGlzLnVpZCB8fCByYW5kb21TdHJpbmcoOCk7XG5cdFx0dGhpcy5fY29tcG9zZUFuY2Vzc3RyeSgpO1xuXHR9XG5cblx0bG9hZERvY0ZyYWdJbnRvRG9tKGRvY0ZyYWcpe1xuXHRcdGNvbnNvbGUubG9nKFwiaW1wOlwiLFwibG9hZGluZyBmcmFnIGludG8gZG9tIC0gXCIsIGRvY0ZyYWcpO1xuXG5cdFx0dmFyIF9wYXJzZWRfZnJhZyA9IGRvY0ZyYWdQYXJzZXIoZG9jRnJhZywgdGhpcy5zcmMpO1xuXG5cdFx0dGhpcy5yZXBsYWNlV2l0aChfcGFyc2VkX2ZyYWcuX2ZyYWcpO1xuXHR9XG5cblx0YXN5bmMgZmV0Y2hGcmFnKCkge1xuXHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdGZldGNoKHRoaXMuc3JjKVxuXHRcdFx0ICAudGhlbihcblx0XHRcdCAgICBmdW5jdGlvbihyKSB7XG5cdFx0XHQgICAgXHRjb25zb2xlLmxvZyhcImltcDpcIixcImZldGNoZWQgaHRtbGZyYWdcIik7XG5cdFx0XHQgICAgXHRyLnRleHQoKS50aGVuKCh0ZXh0KT0+e1xuXHRcdFx0ICAgIFx0XHRyZXNvbHZlKHN0cmluZ1RvRG9jRnJhZyh0ZXh0KSlcblx0XHRcdCAgICBcdH0pO1xuXHRcdFx0ICAgIFx0XG5cdFx0XHQgICAgfVxuXHRcdFx0ICApXG5cdFx0XHQgIC5jYXRjaChmdW5jdGlvbihlKSB7XG5cdFx0XHQgIFx0XHRjb25zb2xlLmxvZyhcImltcDpcIixcImVycm9yIGxvYWRpbmcgaHRtbGZyYWcgLSBcIiwgZSk7XG5cdFx0XHQgICAgXHRyZWplY3QoZSk7XG5cdFx0XHQgIH0pO1xuXHRcdH0pO1xuXHR9XG5cblx0YXN5bmMgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG5cdCAgICB0aGlzLnNyYyA9IHRoaXMuYXR0cmlidXRlcy5zcmMudmFsdWU7XG5cdCAgICBpZih0aGlzLnNyYyl7XG5cdCAgICBcdHZhciBmcmFnID0gYXdhaXQgdGhpcy5mZXRjaEZyYWcoKTtcblx0ICAgIFx0d2luZG93LmZyYWcgPSBmcmFnO1xuXHQgICAgXHR0aGlzLmxvYWREb2NGcmFnSW50b0RvbShmcmFnKTtcblx0ICAgIH1cblx0fVxuXG5cdF9jb21wb3NlQW5jZXNzdHJ5KCkge1xuXHRcdERPTUNvbXBvbmVudFJlZ2lzdHJ5LnVwZGF0ZSh0aGlzKTtcblx0ICAgXHRjb25zb2xlLmxvZyhcImNvbXBvc2VkIGFuY2Vzc3RyeSBcIiwgdGhpcy5kb21FbE5hbWUsIFwiLCBcIiwgdGhpcy51aWQpO1xuXHR9XG59XG5cbmV4cG9ydCB7XG5cdEluY2x1ZGVGcmFnXG59IiwiaW1wb3J0IHsgRGVmYXVsdENvbmZpZyB9IGZyb20gXCIuL2NvbmZpZy5qc1wiO1xuXG52YXIgSW50cm9zcGVjdG9yID0ge307XG5JbnRyb3NwZWN0b3IuaW5pdFBvcnQgPSAobXNnRXYpID0+IHtcblx0aWYoRGVmYXVsdENvbmZpZy5JTlRST1NQRUNUIT10cnVlKXtyZXR1cm47fVxuXHRJbnRyb3NwZWN0b3IucG9ydDIgPSBtc2dFdi5wb3J0c1swXTtcblx0aWYoIUludHJvc3BlY3Rvci5wb3J0Mil7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdEludHJvc3BlY3Rvci5wb3J0Mi5vbm1lc3NhZ2UgPSAoKSA9PiB7XG5cdFx0aWYoRGVmYXVsdENvbmZpZy5JTlRST1NQRUNUIT10cnVlKXtyZXR1cm47fVxuXHRcdHZhciBpbnRyb3NwZWN0T2JqID0gW107XG5cdFx0RE9NQ29tcG9uZW50UmVnaXN0cnkubGlzdCgpLmZvckVhY2goKF9lbnRyeSk9Pntcblx0XHRcdF9lbnRyeS5pbnN0YW5jZXMuZm9yRWFjaCgoaW5zdGFuY2UpPT57XG5cdFx0XHRcdHZhciBpbnRyb3NwZWN0YWJsZUluc3RhbmNlID0ge1xuXHRcdFx0XHRcdG5hbWU6aW5zdGFuY2UuZG9tRWxOYW1lLCBcblx0XHRcdFx0XHR1aWQ6aW5zdGFuY2UudWlkLCBcblx0XHRcdFx0XHRzdGF0ZVNwYWNlOmluc3RhbmNlLnN0YXRlU3BhY2UsXG5cdFx0XHRcdFx0Y3VycmVudF9zdGF0ZTogaW5zdGFuY2UuY3VycmVudF9zdGF0ZVxuXHRcdFx0XHR9O1xuXHRcdFx0XHRpbnRyb3NwZWN0T2JqLnB1c2goaW50cm9zcGVjdGFibGVJbnN0YW5jZSk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0XHRjb25zb2xlLmxvZyhcImltcDpcIixcIiAtIERFQlVHR0VSIE1TRyAtIFwiLCBtc2dFdilcbiAgICBcdEludHJvc3BlY3Rvci5wb3J0Mi5wb3N0TWVzc2FnZShpbnRyb3NwZWN0T2JqKTtcbiAgICB9O1xufVxuSW50cm9zcGVjdG9yLnN0YXJ0ID0gKCk9PiB7XG5cdGlmKERlZmF1bHRDb25maWcuSU5UUk9TUEVDVCE9dHJ1ZSl7cmV0dXJuO31cblx0d2luZG93Lm9ubWVzc2FnZSA9IGZ1bmN0aW9uKG1zZ0V2KXtcblx0XHRpZihEZWZhdWx0Q29uZmlnLklOVFJPU1BFQ1QhPXRydWUpe3JldHVybjt9XG5cdFx0Y29uc29sZS5sb2coXCJpbXA6XCIsXCJpbml0aWFsaXppbmcgcG9ydFwiLCBtc2dFdik7XG5cdFx0SW50cm9zcGVjdG9yLmluaXRQb3J0KG1zZ0V2KTtcblx0fVxuXHRjb25zb2xlLmxvZyhcImltcDpcIixcIlNUQVJURUQgTVVGRklOIERFQlVHR0VSXCIpO1xufVxuXG5leHBvcnQge1xuXHRJbnRyb3NwZWN0b3Jcbn0iLCJpbXBvcnQgeyBEZWZhdWx0Q29uZmlnIH0gZnJvbSBcIi4vY29uZmlnLmpzXCI7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi9sb2dnZXIuanNcIjtcbmltcG9ydCB7IExleGVtZSB9IGZyb20gXCIuL2xleGVtZS5qc1wiO1xuaW1wb3J0IHsgRGF0YUNoYW5uZWwgfSBmcm9tIFwiLi9kYXRhX2NvbXBvbmVudC5qc1wiO1xuaW1wb3J0IHsgRE9NQ29tcG9uZW50UmVnaXN0cnksIERhdGFTb3VyY2UsIFBvc3RPZmZpY2UsIERPTUNvbXBvbmVudCB9IGZyb20gXCIuL2RvbV9jb21wb25lbnQuanNcIjtcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gXCIuL3JvdXRlci5qc1wiO1xuaW1wb3J0IHsgSW5jbHVkZUZyYWcgfSBmcm9tIFwiLi9pbmNsdWRlLmpzXCI7XG5pbXBvcnQgeyBJbnRyb3NwZWN0b3IgfSBmcm9tIFwiLi9pbnRyb3NwZWN0b3IuanNcIjtcblxuLy8gT2JqZWN0LnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uKCl7IFxuLy8gXHRpZighKHRoaXMucHJvdG90eXBlIGluc3RhbmNlb2YgRE9NQ29tcG9uZW50KSl7cmV0dXJuO31cbi8vIFx0RE9NQ29tcG9uZW50UmVnaXN0cnkucmVnaXN0ZXIodGhpcyk7XG4vLyB9XG5cbndpbmRvdy5NdWZmaW4gPSB7fTtcblxuTG9nZ2VyLnN0YXJ0KCk7XG5ET01Db21wb25lbnRSZWdpc3RyeS5zdGFydCgpO1xuSW50cm9zcGVjdG9yLnN0YXJ0KCk7XG5cblxuRE9NQ29tcG9uZW50UmVnaXN0cnkucmVnaXN0ZXIoRGF0YUNoYW5uZWwpXG5ET01Db21wb25lbnRSZWdpc3RyeS5yZWdpc3RlcihJbmNsdWRlRnJhZylcblxud2luZG93Lk11ZmZpbi5MZXhlbWUgPSBMZXhlbWU7XG53aW5kb3cuTXVmZmluLlJvdXRlciA9IFJvdXRlcjtcbndpbmRvdy5NdWZmaW4uUG9zdE9mZmljZSA9IFBvc3RPZmZpY2U7XG53aW5kb3cuTXVmZmluLkRPTUNvbXBvbmVudFJlZ2lzdHJ5ID0gRE9NQ29tcG9uZW50UmVnaXN0cnk7XG53aW5kb3cuTXVmZmluLkRhdGFTb3VyY2UgPSBEYXRhU291cmNlO1xud2luZG93Lk11ZmZpbi5ET01Db21wb25lbnQgPSBET01Db21wb25lbnQ7XG53aW5kb3cuTXVmZmluLkludHJvc3BlY3RvciA9IEludHJvc3BlY3Rvcjtcblxud2luZG93LlJvdXRlciA9IFJvdXRlcjtcbndpbmRvdy5Qb3N0T2ZmaWNlID0gUG9zdE9mZmljZTtcbndpbmRvdy5ET01Db21wb25lbnRSZWdpc3RyeSA9IERPTUNvbXBvbmVudFJlZ2lzdHJ5O1xud2luZG93LkRhdGFTb3VyY2UgPSBEYXRhU291cmNlO1xud2luZG93LkRPTUNvbXBvbmVudCA9IERPTUNvbXBvbmVudDtcbi8vIHdpbmRvdy5JbmNsdWRlRnJhZyA9IEluY2x1ZGVGcmFnO1xuIl0sIm5hbWVzIjpbIkRlZmF1bHRDb25maWciLCJzZWxmIiwiTVVGRklOX0NPTkZJRyIsIkxvZ2dlciIsInN0YXJ0IiwiX19sb2ciLCJjb25zb2xlIiwibG9nIiwiTE9HR0lOR19MRVZFTCIsImFyZ3VtZW50cyIsImFyZ3VtZW50c0FyciIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwibXNnQXJyIiwibGVuZ3RoIiwiYXBwbHkiLCJUWVBFUyIsImVtYWlsIiwibmFtZSIsImFnZSIsInN0ciIsInVpZCIsIkdlbmVyYXRvciIsInJhbmRvbVVpZCIsIlJhbmRFeHAiLCJnZW4iLCJ0cmltIiwicmFuZG9tRW1haWwiLCJpIiwicmFuZG9tVmFsIiwiX3R5cGUiLCJMZXhlbWUiLCJjb25zdHJ1Y3RvciIsImluZm8iLCJzY2hlbWEiLCJpbmZsZWN0aW9uIiwiSlNPTiIsInBhcnNlIiwiaW5mbGVjdCIsImUiLCJnZXQiLCJoYXNLZXkiLCJrZXlTdHJpbmciLCJrZXlMaXN0Iiwic3BsaXQiLCJrZXkiLCJfaW5mbyIsImtleUlkeCIsInJlc3VsdCIsIl9rZXlUb1Rlc3QiLCJoYXNLZXlzIiwiX3RoaXMiLCJmcm9tIiwiZm9yRWFjaCIsInZhbGlkIiwidXBkYXRlIiwiZ2V0UGF5bG9hZCIsInN0cmluZ2lmeSIsImdldFZhbHVlIiwidmFsIiwiaXNTdHJpbmciLCJpc051bWJlciIsImlzT2JqZWN0IiwicmFuZG9tU3RyaW5nIiwiX2xlbmd0aCIsInRleHQiLCJwb3NzaWJsZSIsImNoYXJBdCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInN0cmluZ1RvSFRNTEZyYWciLCJzdHJIVE1MIiwidGVtcCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImNvbnRlbnQiLCJzdHJpbmdUb0RvY0ZyYWciLCJodG1sX3N0cmluZyIsImRvbSIsIndpbmRvdyIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsIkFjdGl2ZVhPYmplY3QiLCJhc3luYyIsImxvYWRYTUwiLCJhbGVydCIsInBhcnNlRXJyb3IiLCJyZWFzb24iLCJEYXRhQ2hhbm5lbCIsIkhUTUxFbGVtZW50IiwiX2NvbXBvc2VBbmNlc3N0cnkiLCJjb25uZWN0ZWRDYWxsYmFjayIsImF0dHJpYnV0ZXMiLCJsYWJlbCIsInZhbHVlIiwic29ja2V0IiwiX2NtcCIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJjb25zdHJ1Y3RlZEZyb20iLCJfX2luaXREYXRhU3JjSW50ZXJmYWNlIiwiRE9NQ29tcG9uZW50UmVnaXN0cnkiLCJkb21FbE5hbWUiLCJQb3N0T2ZmaWNlIiwiT2JqZWN0IiwiYWRkU29ja2V0IiwiX2NvbnN0cnVjdG9yIiwiX3VybCIsIm9wdGlvbnMiLCJzb2NrZXRzIiwiU29ja2V0IiwiY3JlYXRlSW50ZXJmYWNlIiwic3BlY3MiLCJvdmVycmlkZSIsImVyciIsIkVycm9yIiwiRXZlbnRUYXJnZXQiLCJhZGRJbnRlcmZhY2VTcGVjIiwiZ2V0T3JDcmVhdGVJbnRlcmZhY2UiLCJwdWJsaXNoVG9JbnRlcmZhY2UiLCJ0YXJnZXRJbnRlcmZhY2VBZGRyIiwibXNnIiwiaW50ZXJmYWNlU29ja2V0TmFtZSIsImludGVyZmFjZU9wTGFiZWwiLCJkZWJ1ZyIsInRhcmdldFNvY2tldCIsInB1Ymxpc2giLCJfZ2V0UmVnaXN0cnkiLCJyZWdpc3RyeSIsIl9hZGRUb1JlZ2lzdHJ5IiwiX2Jyb2tlciIsInB1c2giLCJfZGVsRnJvbVJlZ2lzdHJ5IiwiZ2V0RGVmYXVsdFNjb3BlIiwiZGVmYXVsdFNjb3BlIiwiX2dldEJyb2tlciIsInNjb3BlIiwiZmlsdGVyIiwiX2NyZWF0ZUJyb2tlciIsIl9jYiIsIkJyb2tlciIsIl9jcmVhdGVPclVwZGF0ZUJyb2tlciIsImFkZENhbGxiYWNrIiwiYWRkR2xvYmFsTGlzdGVuZXIiLCJfbGFiZWwiLCJnbG9iYWwiLCJhZGRMaXN0ZW5lciIsIl9ydW5Ccm9rZXIiLCJfc2NvcGUiLCJleGVjdXRlIiwiYnJvYWRjYXN0TXNnIiwiZXZudCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiZGlzcGF0Y2hFdmVudCIsIlBvc3RPZmZpY2VTb2NrZXQiLCJ1cmwiLCJXZWJTb2NrZXQiLCJsaXN0ZW5lcnMiLCJhdXRvUmV0cnlPbkNsb3NlIiwiYXV0b1JldHJ5SW50ZXJ2YWwiLCJhdXRvSW5pdExleGljb25TdWJzY3JpcHRpb25zIiwiX19pbml0X18iLCJfaW5pdExleGljb25TdWJzY3JpcHRpb25zIiwiSU5URVJGQUNFX1NQRUMiLCJzdWJzY3JpYmUiLCJ3YXJuIiwiX2tlZXBBbGl2ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJtc2dFdiIsIl9oYW5kbGVTb2NrZXRNc2dFdiIsImV2IiwiX2hhbmRsZVNvY2tldENsb3NlRXYiLCJfaGFuZGxlU29ja2V0T3BlbkV2IiwiX2hhbmRsZVNvY2tldEVycm9yRXYiLCJvbiIsImNsZWFySW50ZXJ2YWwiLCJjb25uZWN0aW9uS2VlcEFsaXZlIiwic2V0SW50ZXJ2YWwiLCJrZWVwQWxpdmUiLCJzZW5kIiwib25tZXNzYWdlIiwic29ja2V0TXNnRXYiLCJfbXNnU3RyIiwiZGF0YSIsIl9tc2ciLCJlcnJvciIsImRpc3BhdGNoTWVzc2FnZSIsInR5cGUiLCJzZXRUaW1lb3V0Iiwic2VuZE1zZyIsImxleGVtZU5hbWUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImxleGVtZSIsIkxFWElDT04iLCJwYXlsb2FkSnNvblN0ciIsImludGVyZmFjZVNwZWMiLCJfbXNnVG9FdiIsImNiIiwiUG9zdE9mZmljZUJyb2tlciIsImNhbGxiYWNrcyIsIl9nZXRTY29wZSIsInF1ZXJ5U2VsZWN0b3IiLCJpZHgiLCJNZXNzYWdlIiwiUG9zdE9mZmljZU1lc3NhZ2UiLCJicm9rZXJMYWJlbCIsInN0YXJ0ZWQiLCJhZGQiLCJ3ZWJDb21wIiwiY29tcG9uZW50cyIsImluc3RhbmNlcyIsImxpc3QiLCJmaW5kSW5zdGFuY2UiLCJwYXJlbnQiLCJlbnRyeSIsImZpbmQiLCJfZW50cnkiLCJfaW5zdGFuY2UiLCJyZWdpc3RlciIsIndlYkNvbXBEb21OYW1lIiwiY3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiLCJpbnN0YW5jZSIsImYiLCJleHBvcnRzIiwibW9kdWxlIiwiYW1kIiwiZyIsImxvY2FsZm9yYWdlIiwidCIsIm4iLCJyIiwicyIsIm8iLCJ1IiwiYSIsInJlcXVpcmUiLCJjb2RlIiwibCIsIl9kZXJlcV8iLCJNdXRhdGlvbiIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwic2NoZWR1bGVEcmFpbiIsImNhbGxlZCIsIm9ic2VydmVyIiwibmV4dFRpY2siLCJlbGVtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInNldEltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwiY2hhbm5lbCIsInBvcnQxIiwicG9ydDIiLCJwb3N0TWVzc2FnZSIsInNjcmlwdEVsIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiZG9jdW1lbnRFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJkcmFpbmluZyIsInF1ZXVlIiwib2xkUXVldWUiLCJsZW4iLCJpbW1lZGlhdGUiLCJ0YXNrIiwiSU5URVJOQUwiLCJoYW5kbGVycyIsIlJFSkVDVEVEIiwiRlVMRklMTEVEIiwiUEVORElORyIsInJlc29sdmVyIiwiVHlwZUVycm9yIiwic3RhdGUiLCJvdXRjb21lIiwic2FmZWx5UmVzb2x2ZVRoZW5hYmxlIiwib25SZWplY3RlZCIsInRoZW4iLCJvbkZ1bGZpbGxlZCIsInByb21pc2UiLCJ1bndyYXAiLCJRdWV1ZUl0ZW0iLCJjYWxsRnVsZmlsbGVkIiwib3RoZXJDYWxsRnVsZmlsbGVkIiwiY2FsbFJlamVjdGVkIiwib3RoZXJDYWxsUmVqZWN0ZWQiLCJmdW5jIiwicmV0dXJuVmFsdWUiLCJ0cnlDYXRjaCIsImdldFRoZW4iLCJzdGF0dXMiLCJ0aGVuYWJsZSIsIm9iaiIsImFwcHlUaGVuIiwib25FcnJvciIsIm9uU3VjY2VzcyIsInRyeVRvVW53cmFwIiwib3V0IiwiYWxsIiwiaXRlcmFibGUiLCJ0b1N0cmluZyIsInZhbHVlcyIsInJlc29sdmVkIiwiYWxsUmVzb2x2ZXIiLCJyZXNvbHZlRnJvbUFsbCIsIm91dFZhbHVlIiwicmFjZSIsInJlc3BvbnNlIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwiQ29uc3RydWN0b3IiLCJnZXRJREIiLCJpbmRleGVkREIiLCJ3ZWJraXRJbmRleGVkREIiLCJtb3pJbmRleGVkREIiLCJPSW5kZXhlZERCIiwibXNJbmRleGVkREIiLCJpZGIiLCJpc0luZGV4ZWREQlZhbGlkIiwib3BlbiIsImlzU2FmYXJpIiwib3BlbkRhdGFiYXNlIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInBsYXRmb3JtIiwiaGFzRmV0Y2giLCJmZXRjaCIsImluZGV4T2YiLCJJREJLZXlSYW5nZSIsImNyZWF0ZUJsb2IiLCJwYXJ0cyIsInByb3BlcnRpZXMiLCJCbG9iIiwiQnVpbGRlciIsIkJsb2JCdWlsZGVyIiwiTVNCbG9iQnVpbGRlciIsIk1vekJsb2JCdWlsZGVyIiwiV2ViS2l0QmxvYkJ1aWxkZXIiLCJidWlsZGVyIiwiYXBwZW5kIiwiZ2V0QmxvYiIsIlByb21pc2UkMSIsImV4ZWN1dGVDYWxsYmFjayIsImNhbGxiYWNrIiwiZXhlY3V0ZVR3b0NhbGxiYWNrcyIsImVycm9yQ2FsbGJhY2siLCJub3JtYWxpemVLZXkiLCJTdHJpbmciLCJnZXRDYWxsYmFjayIsIkRFVEVDVF9CTE9CX1NVUFBPUlRfU1RPUkUiLCJzdXBwb3J0c0Jsb2JzIiwiZGJDb250ZXh0cyIsIlJFQURfT05MWSIsIlJFQURfV1JJVEUiLCJfYmluU3RyaW5nVG9BcnJheUJ1ZmZlciIsImJpbiIsImJ1ZiIsIkFycmF5QnVmZmVyIiwiYXJyIiwiVWludDhBcnJheSIsImNoYXJDb2RlQXQiLCJfY2hlY2tCbG9iU3VwcG9ydFdpdGhvdXRDYWNoaW5nIiwidHhuIiwidHJhbnNhY3Rpb24iLCJibG9iIiwib2JqZWN0U3RvcmUiLCJwdXQiLCJvbmFib3J0IiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJvbmNvbXBsZXRlIiwibWF0Y2hlZENocm9tZSIsIm1hdGNoIiwibWF0Y2hlZEVkZ2UiLCJwYXJzZUludCIsIl9jaGVja0Jsb2JTdXBwb3J0IiwiX2RlZmVyUmVhZGluZXNzIiwiZGJJbmZvIiwiZGJDb250ZXh0IiwiZGVmZXJyZWRPcGVyYXRpb24iLCJkZWZlcnJlZE9wZXJhdGlvbnMiLCJkYlJlYWR5IiwiX2FkdmFuY2VSZWFkaW5lc3MiLCJwb3AiLCJfcmVqZWN0UmVhZGluZXNzIiwiX2dldENvbm5lY3Rpb24iLCJ1cGdyYWRlTmVlZGVkIiwiY3JlYXRlRGJDb250ZXh0IiwiZGIiLCJjbG9zZSIsImRiQXJncyIsInZlcnNpb24iLCJvcGVucmVxIiwib251cGdyYWRlbmVlZGVkIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJzdG9yZU5hbWUiLCJvbGRWZXJzaW9uIiwiZXgiLCJuZXdWZXJzaW9uIiwib25lcnJvciIsIm9uc3VjY2VzcyIsIm9udmVyc2lvbmNoYW5nZSIsInRhcmdldCIsIl9nZXRPcmlnaW5hbENvbm5lY3Rpb24iLCJfZ2V0VXBncmFkZWRDb25uZWN0aW9uIiwiX2lzVXBncmFkZU5lZWRlZCIsImRlZmF1bHRWZXJzaW9uIiwiaXNOZXdTdG9yZSIsIm9iamVjdFN0b3JlTmFtZXMiLCJjb250YWlucyIsImlzRG93bmdyYWRlIiwiaXNVcGdyYWRlIiwiaW5jVmVyc2lvbiIsIl9lbmNvZGVCbG9iIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsIm9ubG9hZGVuZCIsImJhc2U2NCIsImJ0b2EiLCJfX2xvY2FsX2ZvcmFnZV9lbmNvZGVkX2Jsb2IiLCJyZWFkQXNCaW5hcnlTdHJpbmciLCJfZGVjb2RlQmxvYiIsImVuY29kZWRCbG9iIiwiYXJyYXlCdWZmIiwiYXRvYiIsIl9pc0VuY29kZWRCbG9iIiwiX2Z1bGx5UmVhZHkiLCJfaW5pdFJlYWR5IiwiX2RiSW5mbyIsIl90cnlSZWNvbm5lY3QiLCJmb3JhZ2VzIiwiZm9yYWdlIiwiY3JlYXRlVHJhbnNhY3Rpb24iLCJtb2RlIiwicmV0cmllcyIsInVuZGVmaW5lZCIsInR4IiwiX2luaXRTdG9yYWdlIiwicmVhZHkiLCJpbml0UHJvbWlzZXMiLCJpZ25vcmVFcnJvcnMiLCJqIiwiX2RlZmF1bHRDb25maWciLCJrIiwiZ2V0SXRlbSIsInN0b3JlIiwicmVxIiwiaXRlcmF0ZSIsIm9wZW5DdXJzb3IiLCJpdGVyYXRpb25OdW1iZXIiLCJjdXJzb3IiLCJzZXRJdGVtIiwiYmxvYlN1cHBvcnQiLCJyZW1vdmVJdGVtIiwiY2xlYXIiLCJjb3VudCIsImFkdmFuY2VkIiwib3BlbktleUN1cnNvciIsImFkdmFuY2UiLCJrZXlzIiwiZHJvcEluc3RhbmNlIiwiY3VycmVudENvbmZpZyIsImNvbmZpZyIsImlzQ3VycmVudERiIiwiZGJQcm9taXNlIiwiZHJvcERCUHJvbWlzZSIsImRlbGV0ZURhdGFiYXNlIiwib25ibG9ja2VkIiwiX2ZvcmFnZSIsImRyb3BPYmplY3RQcm9taXNlIiwiZGVsZXRlT2JqZWN0U3RvcmUiLCJfZm9yYWdlMiIsImFzeW5jU3RvcmFnZSIsIl9kcml2ZXIiLCJfc3VwcG9ydCIsImlzV2ViU1FMVmFsaWQiLCJCQVNFX0NIQVJTIiwiQkxPQl9UWVBFX1BSRUZJWCIsIkJMT0JfVFlQRV9QUkVGSVhfUkVHRVgiLCJTRVJJQUxJWkVEX01BUktFUiIsIlNFUklBTElaRURfTUFSS0VSX0xFTkdUSCIsIlRZUEVfQVJSQVlCVUZGRVIiLCJUWVBFX0JMT0IiLCJUWVBFX0lOVDhBUlJBWSIsIlRZUEVfVUlOVDhBUlJBWSIsIlRZUEVfVUlOVDhDTEFNUEVEQVJSQVkiLCJUWVBFX0lOVDE2QVJSQVkiLCJUWVBFX0lOVDMyQVJSQVkiLCJUWVBFX1VJTlQxNkFSUkFZIiwiVFlQRV9VSU5UMzJBUlJBWSIsIlRZUEVfRkxPQVQzMkFSUkFZIiwiVFlQRV9GTE9BVDY0QVJSQVkiLCJUWVBFX1NFUklBTElaRURfTUFSS0VSX0xFTkdUSCIsInRvU3RyaW5nJDEiLCJzdHJpbmdUb0J1ZmZlciIsInNlcmlhbGl6ZWRTdHJpbmciLCJidWZmZXJMZW5ndGgiLCJwIiwiZW5jb2RlZDEiLCJlbmNvZGVkMiIsImVuY29kZWQzIiwiZW5jb2RlZDQiLCJidWZmZXIiLCJieXRlcyIsImJ1ZmZlclRvU3RyaW5nIiwiYmFzZTY0U3RyaW5nIiwic3Vic3RyaW5nIiwic2VyaWFsaXplIiwidmFsdWVUeXBlIiwibWFya2VyIiwiZmlsZVJlYWRlciIsIm9ubG9hZCIsInJlYWRBc0FycmF5QnVmZmVyIiwiZGVzZXJpYWxpemUiLCJibG9iVHlwZSIsIm1hdGNoZXIiLCJJbnQ4QXJyYXkiLCJVaW50OENsYW1wZWRBcnJheSIsIkludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJVaW50MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsImxvY2FsZm9yYWdlU2VyaWFsaXplciIsImNyZWF0ZURiVGFibGUiLCJleGVjdXRlU3FsIiwiX2luaXRTdG9yYWdlJDEiLCJkYkluZm9Qcm9taXNlIiwiZGVzY3JpcHRpb24iLCJzaXplIiwic2VyaWFsaXplciIsInRyeUV4ZWN1dGVTcWwiLCJzcWxTdGF0ZW1lbnQiLCJhcmdzIiwiU1lOVEFYX0VSUiIsInJlc3VsdHMiLCJyb3dzIiwiZ2V0SXRlbSQxIiwiaXRlbSIsIml0ZXJhdGUkMSIsIl9zZXRJdGVtIiwicmV0cmllc0xlZnQiLCJvcmlnaW5hbFZhbHVlIiwic3FsRXJyb3IiLCJRVU9UQV9FUlIiLCJzZXRJdGVtJDEiLCJyZW1vdmVJdGVtJDEiLCJjbGVhciQxIiwibGVuZ3RoJDEiLCJjIiwia2V5JDEiLCJrZXlzJDEiLCJnZXRBbGxTdG9yZU5hbWVzIiwic3RvcmVOYW1lcyIsImRyb3BJbnN0YW5jZSQxIiwib3BlcmF0aW9uSW5mbyIsImRyb3BUYWJsZSIsIm9wZXJhdGlvbnMiLCJ3ZWJTUUxTdG9yYWdlIiwiaXNMb2NhbFN0b3JhZ2VWYWxpZCIsImxvY2FsU3RvcmFnZSIsIl9nZXRLZXlQcmVmaXgiLCJkZWZhdWx0Q29uZmlnIiwia2V5UHJlZml4IiwiY2hlY2tJZkxvY2FsU3RvcmFnZVRocm93cyIsImxvY2FsU3RvcmFnZVRlc3RLZXkiLCJfaXNMb2NhbFN0b3JhZ2VVc2FibGUiLCJfaW5pdFN0b3JhZ2UkMiIsImNsZWFyJDIiLCJnZXRJdGVtJDIiLCJpdGVyYXRlJDIiLCJrZXlQcmVmaXhMZW5ndGgiLCJrZXkkMiIsImtleXMkMiIsIml0ZW1LZXkiLCJsZW5ndGgkMiIsInJlbW92ZUl0ZW0kMiIsInNldEl0ZW0kMiIsImRyb3BJbnN0YW5jZSQyIiwibG9jYWxTdG9yYWdlV3JhcHBlciIsInNhbWVWYWx1ZSIsIngiLCJ5IiwiaXNOYU4iLCJpbmNsdWRlcyIsImFycmF5Iiwic2VhcmNoRWxlbWVudCIsImlzQXJyYXkiLCJhcmciLCJEZWZpbmVkRHJpdmVycyIsIkRyaXZlclN1cHBvcnQiLCJEZWZhdWx0RHJpdmVycyIsIklOREVYRUREQiIsIldFQlNRTCIsIkxPQ0FMU1RPUkFHRSIsIkRlZmF1bHREcml2ZXJPcmRlciIsIk9wdGlvbmFsRHJpdmVyTWV0aG9kcyIsIkxpYnJhcnlNZXRob2RzIiwiY29uY2F0IiwiZHJpdmVyIiwiY2FsbFdoZW5SZWFkeSIsImxvY2FsRm9yYWdlSW5zdGFuY2UiLCJsaWJyYXJ5TWV0aG9kIiwiX2FyZ3MiLCJleHRlbmQiLCJfa2V5IiwiaGFzT3duUHJvcGVydHkiLCJMb2NhbEZvcmFnZSIsImRyaXZlclR5cGVLZXkiLCJkcml2ZXJOYW1lIiwiZGVmaW5lRHJpdmVyIiwiX2NvbmZpZyIsIl9kcml2ZXJTZXQiLCJfaW5pdERyaXZlciIsIl9yZWFkeSIsIl93cmFwTGlicmFyeU1ldGhvZHNXaXRoUmVhZHkiLCJzZXREcml2ZXIiLCJyZXBsYWNlIiwiZHJpdmVyT2JqZWN0IiwiY29tcGxpYW5jZUVycm9yIiwiZHJpdmVyTWV0aG9kcyIsImRyaXZlck1ldGhvZE5hbWUiLCJpc1JlcXVpcmVkIiwiY29uZmlndXJlTWlzc2luZ01ldGhvZHMiLCJtZXRob2ROb3RJbXBsZW1lbnRlZEZhY3RvcnkiLCJtZXRob2ROYW1lIiwiX2kiLCJfbGVuIiwib3B0aW9uYWxEcml2ZXJNZXRob2QiLCJzZXREcml2ZXJTdXBwb3J0Iiwic3VwcG9ydCIsImdldERyaXZlciIsImdldERyaXZlclByb21pc2UiLCJnZXRTZXJpYWxpemVyIiwic2VyaWFsaXplclByb21pc2UiLCJkcml2ZXJzIiwic3VwcG9ydGVkRHJpdmVycyIsIl9nZXRTdXBwb3J0ZWREcml2ZXJzIiwic2V0RHJpdmVyVG9Db25maWciLCJleHRlbmRTZWxmV2l0aERyaXZlciIsIl9leHRlbmQiLCJpbml0RHJpdmVyIiwiY3VycmVudERyaXZlckluZGV4IiwiZHJpdmVyUHJvbWlzZUxvb3AiLCJvbGREcml2ZXJTZXREb25lIiwic3VwcG9ydHMiLCJsaWJyYXJ5TWV0aG9kc0FuZFByb3BlcnRpZXMiLCJjcmVhdGVJbnN0YW5jZSIsImxvY2FsZm9yYWdlX2pzIiwiREJfTkFNRSIsIkRCX1ZFUlNJT04iLCJEYXRhU291cmNlIiwiZ2V0T3JDcmVhdGUiLCJfZGF0YVNyYyIsIl9nZXRJbnN0YW5jZSIsInByb3h5Iiwic29ja2V0TmFtZSIsImV2ZW50cyIsImNvbW1zIiwiZXZlbnRUYXJnZXQiLCJhY3RpdmUiLCJfbG9nIiwiX2luaXRMb2dnaW5nIiwiX2NoZWNrTG9jYWxEQm9yRml4dHVyZXMiLCJfaW5pdFNvY2tldCIsIl9pbnN0YW5jZXMiLCJfbG9nUHJlZml4IiwiX2xvZ1N0eWxlIiwiam9pbiIsIl9vbm1zZyIsIl9ub3JtYWxpemVEYXRhIiwiX2Rpc3B0YWNoTWVzc2FnZSIsIl91cGRhdGVEYXRhSW5Db250ZXh0IiwiZml4dHVyZXMiLCJfbG9hZEZpeHR1cmVzIiwiY2F0Y2giLCJfY21wX2RhdGEiLCJfZ2V0Q21wRGF0YSIsIl91cGRhdGVEYXRhIiwiX2RhdGEiLCJfaXNEZWJ1Z2dhbGUiLCJUUkFTSF9TQ09QRSIsImNtcF9kYXRhX3NyYyIsIl9hdXRoZW50aWNhdGVNc2ciLCJfZGF0YVRvU3RvcmUiLCJkaXIiLCJfZHMiLCJET01Db21wb25lbnQiLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJkZWZhdWx0TGlmZWN5Y2xlSW50ZXJmYWNlcyIsImRlZmF1bHRCcm9rZXJzIiwib3B0IiwiREVCVUdfU0NPUEUiLCJfZGVidWdDbXAiLCJpbnRlcmZhY2VzIiwic3RhdGVTcGFjZSIsImFkdmVydGlzZUFzIiwidHJhbnNpdGlvblNwYWNlIiwiY29tcG9zZWRTY29wZSIsInVpVmFycyIsImRhdGFfc3JjIiwiY3VycmVudF9zdGF0ZSIsImludGVyZmFjZSIsIl9wcmVJbml0IiwiX3NldHVwRG9tQ29udGVudExvYWRlZENhbGxiYWNrIiwib25Eb21Db250ZW50TG9hZGVkIiwiX3NldHVwQWR2ZXJ0aXNlZEludGVyZmFjZSIsImFkdmVydGlzZWRJbnRlcmZhY2UiLCJpbmZsZWN0ZWRNc2ciLCJvbkNvbm5lY3QiLCJzd2l0Y2hUb0lkbGVTdGF0ZSIsIl9vbkRhdGFTcmNVcGRhdGUiLCJyZW5kZXIiLCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2siLCJfaW5pdFN0YXRlU3BhY2UiLCJzaGFkb3ciLCJhdHRhY2hTaGFkb3ciLCJkb21Nb2RlIiwibWFya3VwRnVuYyIsInN0eWxlTWFya3VwIiwicHJvY2Vzc0RhdGEiLCJfaW5pdExpZmVjeWNsZSIsImdyb3VwRW5kIiwiZ2V0UGFyZW50IiwiY2hpbGRzY29wZSIsImNoaWxkc2NvcGVLZXkiLCJncm91cCIsImhhc0F0dHJpYnV0ZSIsIl9nZXREb21Ob2RlIiwiX2luaXRDb21wb25lbnREYXRhU3JjIiwiZ2V0QXR0cmlidXRlIiwiZGVmaW5lUHJvcGVydHkiLCJfcG9zdFByb2Nlc3NDbXBEYXRhIiwiYnJva2VyIiwiZGVmYXVsdFN0YXRlU3BhY2UiLCJhZGRJbnRlcmZhY2UiLCJfaW5pdEludGVyZmFjZXMiLCJzZW5kZXIiLCJNdWZmaW4iLCJDb21wb25lbnRNc2ciLCJfaW5pdFVpVmFycyIsIl9nZXRSb3V0ZUNvbnRleHQiLCJjbG9zZXN0Um91dGUiLCJjbG9zZXN0Iiwicm91dGVOYW1lIiwicm91dGVyIiwiZ2V0Um91dGUiLCJfaW5pdFJvdXRlSW50ZXJmYWNlIiwiX3NvY2tldCIsInJvdXRlVmFycyIsIm9uQmVmb3JlUm91dGVMb2FkIiwibmV3RGF0YSIsIl9wcm9jZXNzZWREYXRhIiwiX19wcm9jZXNzU3R5bGVNYXJrdXAiLCJfcmVuZGVyZWRTdHlsZVN0cmluZyIsIl9yZW5kZXJlZFN0eWxlIiwiX3JlbmRlcmVkRnJhZyIsImZpcnN0RWxlbWVudENoaWxkIiwicHJlcGVuZCIsIl9fcHJvY2Vzc1JlbmRlcmVkRnJhZ0V2ZW50TGlzdGVuZXJzIiwiX2V2ZW50cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJfZWwiLCJvbmNoYW5nZSIsIm9uaW5wdXQiLCJvbmNsaWNrIiwib25zY3JvbGwiLCJvbmtleXVwIiwib25jb250ZXh0bWVudSIsImNvbnRleHRtZW51IiwiX2dldENoaWxkQ21wcyIsImNtcF9kb21fbm9kZSIsIl9wcm9jZXNzQ2hpbGRDbXBzIiwiY2hpbGRDbXBzSW5ET00iLCJjbXBTZWxlY3RvciIsIm1hcCIsImNoaWxkQ21wc0luUmVuZGVyZWRGcmFnIiwiX2NoaWxkQ21wSW5GcmFnIiwiZnJhZ0NtcElkeCIsIl9jaGlsZENtcEluRG9tIiwiZG9tQ21wSWR4IiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwicmVwbGFjZVdpdGgiLCJzd2l0Y2hTdGF0ZSIsInN0YXRlTmFtZSIsInRhcmdldFN0YXRlIiwicHJldlN0YXRlTmFtZSIsImFwcmlvcmkiLCJ0cmFuc2l0aW9uIiwibWV0YSIsIl9fcHJvY2Vzc1Jvb3RNYXJrdXAiLCJkYXRhc2V0IiwiY29tcG9uZW50IiwiUmVmbGVjdCIsIl9fcHJvY2Vzc0NvbmRpdGlvbmFsTWFya3VwIiwiZXZhbCIsInN0eWxlIiwiZGlzcGxheSIsIl9faXNET01UcmVlRXF1YWwiLCJub2RlMSIsIm5vZGUyIiwiY2hpbGRFbGVtZW50Q291bnQiLCJpc0VxdWFsIiwiY2hpbGRyZW4iLCJjaGlsZE5vZGUxIiwiY2hpbGROb2RlMiIsIl9fcGF0Y2hVbmVxdWFsQXR0cmlidXRlcyIsImlnbm9yZUF0dHJpYnV0ZUxpc3QiLCJfbm9kZTFBdHRyIiwic2V0QXR0cmlidXRlIiwiX19maW5kQW5kUmVwbGFjZVVuZXF1YWxOb2RlcyIsInJvb3QxIiwicm9vdDIiLCJfcm9vdDFDaGlsZE5vZGUiLCJfcm9vdDJDaGlsZE5vZGUiLCJpc0VxdWFsTm9kZSIsInJlbmRlcm9ubHlvbmNlIiwidm9sYXRpbGUiLCJfX3BhdGNoUm9vdE5vZGVBdHRycyIsInJvb3ROb2RlIiwiX19wYXRjaFN0eWxlIiwiX2luZG9tU3R5bGUiLCJfX3BhdGNoRE9NQ29tcGxldGVseSIsIl9fcGF0Y2hET00iLCJzdG9wIiwic3RvcHBlZENtcCIsImluX2RvbSIsIl9yZW5kZXJlZEZyYWdSb290Tm9kZSIsIl9yZW5kZXJlZCIsImRlYnVnTGFzdFJlbmRlcmVkQ21wIiwicG9zdFJlbmRlciIsIl9iaW5kaW5nIiwiYiIsIm9iamVjdCIsInByb3BlcnR5IiwiYXR0cmlidXRlIiwidmFsdWVHZXR0ZXIiLCJ2YWx1ZVNldHRlciIsInNldCIsIl9jb21wb3NlU2VsZiIsIl9jb21wb3NlIiwiY29tcG9zZUZ1bmMiLCJSb3V0ZXIiLCJyb3V0ZXMiLCJ0b2dnbGVDbGFzcyIsInJvdXRlRGVsaW1pdGVyIiwiY29udGFpbm1lbnQiLCJfaW5pdExpc3RlbmVycyIsIl9nZXRQYXJhbXNPYmpGcm9tUGF0aFN0cmluZyIsInBhdGhTdHJpbmciLCJwYXJhbXNTdHJMaXN0Iiwic2hpZnQiLCJfcGFyYW1TdHIiLCJwYXJhbVNwbGl0IiwicGFyYW1PYmoiLCJyZWR1Y2UiLCJhY2N1bSIsImN1cnIiLCJnZXRDdXJyZW50Um91dGVQYXJhbXMiLCJoaXN0b3J5IiwibG9jYXRpb24iLCJzZWFyY2giLCJfZ2V0Um91dGVOYW1lRnJvbVdpbmRvd0xvY2F0aW9uIiwicm91dGVQYXRoIiwiZ2V0RGVmYXVsdFJvdXRlIiwiX2dldFJvdXRlTmFtZUZyb21IaXN0b3J5U3RhdGUiLCJnZXRDdXJyZW50Um91dGVOYW1lIiwib25wb3BzdGF0ZSIsInJvdXRlT2JqIiwidHJpZ2dlckN1c3RvbUV2ZW50Iiwib25TdGF0ZUNoYW5nZSIsImdvIiwicm91dGUiLCJkZWZhdWx0Um91dGUiLCJhZGREZWZhdWx0Um91dGUiLCJyb3V0ZV9uYW1lIiwidXJsX3BhcmFtcyIsImdldE9yQ3JlYXRlUm91dGUiLCJjcmVhdGVPclJlcGxhY2VSb3V0ZSIsImZpbmRJbmRleCIsInNwbGljZSIsImFkZFJvdXRlIiwiY2xvc2VSb3V0ZSIsInJvdXRlRWwiLCJvbmJlZm9yZWV4aXQiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJfb25CZWZvcmVMb2FkIiwidG9nZ2xlUm91dGVFbCIsImdldFJvdXRlRWwiLCJnZXRDdXJyZW50U2NvcGUiLCJpc1N1YlJvdXRlIiwiYW5jZXNzdG9yUm91dGVFbGVtcyIsImdldFJvdXRlQW5jZXNzdG9ycyIsImVsZW1zIiwiX2dldEFjdGl2ZVJvdXRlRWxlbXNJblNjb3BlIiwiZ2V0VG9nZ2xlQ2xhc3MiLCJfY2xvc2VBbGxBY3RpdmVSb3V0ZXNJblNjb3BlIiwiY3VycmVudGx5X2FjdGl2ZV9yb3V0ZV9lbGVtc19pbl9zY29wZSIsImN1cnJlbnRseV9hY3RpdmVfcm91dGVfZWwiLCJjdXJyZW50bHlfYWN0aXZlX3JvdXRlIiwiY3VycmVudGx5X2FjdGl2ZV9yb3V0ZV9vYmoiLCJwYXJhbXMiLCJvbkJlZm9yZUxvYWQiLCJfcm91dGVFbCIsIl9wYXJlbnRTY29wZSIsIl9vbmxvYWQiLCJhY3RpdmVfcm91dGUiLCJ0YXJnZXRfcm91dGUiLCJ0YXJnZXRfcGFnZSIsInNjcm9sbFRvIiwib25yb3V0ZWNoYW5nZSIsImV2ZW50TmFtZSIsImRldGFpbHMiLCJ1cGRhdGVTdGF0ZSIsImFuY2Vzc3RvclJvdXRlTmFtZXMiLCJoaXN0b3J5VGl0bGUiLCJoaXN0b3J5VXJsIiwiaGlzdG9yeURhdGEiLCJwdXNoU3RhdGUiLCJiYWNrIiwibm9kZUxpc3QiLCJlbCIsImFuY2Vzc3RvclJvdXRlcyIsInVwZGF0ZVJvdXRlT2JqUGFyYW1zIiwiaW5pdFNvY2tldCIsImZvcmNlIiwiYWRkUm91dGVDb25maWciLCJyb3V0ZU9iakxpc3QiLCJnZXRBY3RpdmVSb3V0ZSIsImRvY0ZyYWdQYXJzZXIiLCJfZG9jRnJhZyIsImNtcF9lbF9zcmMiLCJkb2MiLCJpbXBvcnROb2RlIiwiZG9jRnJhZyIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJfY2hlY2tJZlRlcm1pbmF0aW5nQ21wVXJsIiwiZmlyc3RDaGlsZCIsInNyYyIsIm9yaWdpbiIsImhyZWYiLCJpbnNlcnRCZWZvcmUiLCJfZnJhZyIsIkluY2x1ZGVGcmFnIiwibG9hZERvY0ZyYWdJbnRvRG9tIiwiX3BhcnNlZF9mcmFnIiwiZmV0Y2hGcmFnIiwiZnJhZyIsIkludHJvc3BlY3RvciIsImluaXRQb3J0IiwiSU5UUk9TUEVDVCIsInBvcnRzIiwiaW50cm9zcGVjdE9iaiIsImludHJvc3BlY3RhYmxlSW5zdGFuY2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztDQUFBO0NBRUEsSUFBSUEsYUFBYSxHQUFHO0NBQ25CLG1CQUFrQixLQURDO0NBRW5CLDRCQUEwQixxQkFGUDtDQUduQixnQkFBYyxLQUhLO0NBSWhCLGFBQVcsMkJBSks7Q0FLaEIsZ0JBQWMsS0FMRTtDQU1oQixpQkFBZTtDQU5DLENBQXBCOztDQVNBLElBQUdDLElBQUksQ0FBQ0MsYUFBUixFQUFzQjtDQUNyQkYsRUFBQUEsYUFBYSxHQUFHLEVBQUMsR0FBR0EsYUFBSjtDQUFtQixPQUFHQyxJQUFJLENBQUNDO0NBQTNCLEdBQWhCO0NBQ0E7O0NDWEQsTUFBTUMsTUFBTixDQUFhOzt1QkFBUEE7OztVQUNXO0NBQ2YsV0FBTyxvQ0FEUTtDQUVmLGFBQVMsb0NBRk07Q0FHZixZQUFRLG9DQUhPO0NBSWYsWUFBUSxvQ0FKTztDQUtmLGFBQVM7Q0FMTTs7O0NBU2pCQSxNQUFNLENBQUNDLEtBQVAsR0FBZSxNQUFNO0NBQ3BCRCxFQUFBQSxNQUFNLENBQUNFLEtBQVAsR0FBZUMsT0FBTyxDQUFDQyxHQUF2Qjs7Q0FDQUQsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLEdBQWMsWUFBVztDQUN4QixRQUFHUCxhQUFhLENBQUNRLGFBQWQsSUFBK0IsTUFBbEMsRUFBeUM7Q0FBQztDQUFROztDQUVsRCxRQUFHQyxTQUFTLENBQUMsQ0FBRCxDQUFULEtBQWUsTUFBbEIsRUFBeUI7Q0FDeEIsVUFBSUMsWUFBWSxHQUFHQyxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQkwsU0FBM0IsQ0FBbkI7Q0FDQSxVQUFJTSxNQUFN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
